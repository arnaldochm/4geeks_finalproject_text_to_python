,Problem,Python Code,Compiles
0,Write a NumPy program to repeat elements of an array. ,"import numpy as np
x = np.repeat(3, 4)
print(x)
x = np.array([[1,2],[3,4]])
print(np.repeat(x, 2))
",True
1,Write a Python function to create and print a list where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l)
		
printValues()
",True
2,Write a Python program to remove duplicates from a list of lists. ,"import itertools
num = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
print(""Original List"", num)
num.sort()
new_num = list(num for num,_ in itertools.groupby(num))
print(""New List"", new_num)
",True
3,Write a NumPy program to compute the x and y coordinates for points on a sine curve and plot the points using matplotlib. ,"import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 3 * np.pi, 0.2)
y = np.sin(x)
print(""Plot the points using matplotlib:"")
plt.plot(x, y)
plt.show()
",True
4,Write a Python program to alter a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()
   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""\nagent_master file has created."")
   
   
   cursorObj.execute(""""""
   ALTER TABLE agent_master
   ADD COLUMN FLAG BOOLEAN;
   """""")
   print(""\nagent_master file altered."")
   conn.commit()
   
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
",True
5,Write a Python program to extract specified size of strings from a give list of string values using lambda. ,"def extract_string(str_list1, l):
    result = list(filter(lambda e: len(e) == l, str_list1))
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"")
print(extract_string(str_list1 , l))
",True
6,Write a Python program to create Fibonacci series upto n using Lambda. ,"from functools import reduce
 
fib_series = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],
                                range(n-2), [0, 1])
 
print(""Fibonacci series upto 2:"")
print(fib_series(2))
print(""\nFibonacci series upto 5:"")
print(fib_series(5))
print(""\nFibonacci series upto 6:"")
print(fib_series(6))
print(""\nFibonacci series upto 9:"")
print(fib_series(9))
",True
7,Write a Python program to sort unsorted numbers using Strand sort. ,"
import operator
def strand_sort(arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not arr:
        return solution
    sublist = [arr.pop(0)]
    for i, item in enumerate(arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            arr.pop(i)

    
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for i, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(i, item)
                    break
            else:
                solution.append(item)

    strand_sort(arr, reverse, solution)
    return solution
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
",True
8,Write a Python program to insert a specified element in a given list after every nth element. ,"def inset_element_list(lst, x, n):
    i = n
    while i < len(lst):
        lst.insert(i, x)
        i+= n+1
    return lst

nums = [1, 3, 5, 7, 9, 11,0, 2, 4, 6, 8, 10,8,9,0,4,3,0]
print(""Original list:"")
print(nums)
x = 20
n = 4
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(nums, x, n))

chars = ['s','d','f','j','s','a','j','d','f','d']
print(""\nOriginal list:"")
print(chars)
x = 'Z'
n = 3
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(chars, x, n))
",True
9,rite a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=[np.max, np.min])
print(table)
",True
10,Write a NumPy program to extract upper triangular part of a NumPy matrix. ,"import numpy as np
num = np.arange(18)
arr1 = np.reshape(num, [6, 3])
print(""Original array:"")
print(arr1)
result  = arr1[np.triu_indices(3)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
result  = arr1[np.triu_indices(2)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
",True
11,Write a Python program to find the maximum occurring character in a given string. ,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
 
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch

print(get_max_occuring_char(""Python: Get file creation and modification date/times""))
print(get_max_occuring_char(""abcdefghijkb""))
",True
12,"Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user. ","num = int(input(""Enter a number: ""))
mod = num % 2
if mod > 0:
    print(""This is an odd number."")
else:
    print(""This is an even number."")",True
13,Write a NumPy program to create a new vector with 2 consecutive 0 between two values of a given vector. ,"import numpy as np
nums = np.array([1,2,3,4,5,6,7,8])
print(""Original array:"")
print(nums)
p = 2
new_nums = np.zeros(len(nums) + (len(nums)-1)*(p))
new_nums[::p+1] = nums
print(""\nNew array:"")
print(new_nums)
",True
14,Write a Python program to count the occurrences of each word in a given sentence. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print( word_count('the quick brown fox jumps over the lazy dog.'))
",True
15,Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically. ,"items=[n for n in input().split('-')]
items.sort()
print('-'.join(items))
",True
16,Write a Pandas program to insert a column at a specific index in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
date_of_birth = ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997']  
idx = 3
print(""\nInsert 'date_of_birth' column in 3rd position of the said DataFrame:"")
df.insert(loc=idx, column='date_of_birth', value=date_of_birth)
print(df)
",True
17,Write a Python program to remove the last N number of elements from a given list. ,"def remove_last_n(nums, N):
    result = nums[:len(nums)-N]
    return result    
nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]
print(""Original lists:"")
print(nums)
N = 3
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 5
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 1
print(""\nRemove the last"",N,""element from the said list:"")
print(remove_last_n(nums, N))
",True
18,Write a Python program to find index position and value of the maximum and minimum values in a given list of numbers using lambda. ,"def position_max_min(nums):
    max_result = max(enumerate(nums), key=(lambda x: x[1]))
    min_result = min(enumerate(nums), key=(lambda x: x[1]))
    return max_result,min_result

nums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex position and value of the maximum value of the said list:"")
print(result[0])
print(""\nIndex position and value of the minimum value of the said list:"")
print(result[1])
",True
19,Write a NumPy program to find the k smallest values of a given NumPy array. ,"import numpy as np
array1 = np.array([1, 7, 8, 2, 0.1, 3, 15, 2.5])
print(""Original arrays:"")
print(array1)
k = 4
result = np.argpartition(array1, k)
print(""\nk smallest values:"")
print(array1[result[:k]])
",True
20,"Write a NumPy program to add one polynomial to another, subtract one polynomial from another, multiply one polynomial by another and divide one polynomial by another. ","from numpy.polynomial import polynomial as P
x = (10,20,30)
y = (30,40,50)
print(""Add one polynomial to another:"")
print(P.polyadd(x,y))
print(""Subtract one polynomial from another:"")
print(P.polysub(x,y))
print(""Multiply one polynomial by another:"")
print(P.polymul(x,y))
print(""Divide one polynomial by another:"")
print(P.polydiv(x,y))
",True
21,Write a Python program to check common elements between two given list are in same order or not. ,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2

color1 = [""red"",""green"",""black"",""orange""]
color2 = [""red"",""pink"",""green"",""white"",""black""]
color3 = [""white"",""orange"",""pink"",""black""]

print(""Original lists:"")
print(color1)
print(color2)
print(color3)
print(""\nTest common elements between color1 and color2 are in same order?"")
print(same_order(color1, color2))
print(""\nTest common elements between color1 and color3 are in same order?"")
print(same_order(color1, color3))
print(""\nTest common elements between color2 and color3 are in same order?"")
print(same_order(color2, color3))
",True
22,Write a Python program to find numbers divisible by nineteen or thirteen from a list of numbers using Lambda. ,"nums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]
print(""Orginal list:"")
print(nums) 
result = list(filter(lambda x: (x % 19 == 0 or x % 13 == 0), nums)) 
print(""\nNumbers of the above list divisible by nineteen or thirteen:"")
print(result)
",True
23,Write a NumPy program to multiply two given arrays of same size element-by-element. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nMultiply said arrays of same size element-by-element:"")
print(np.multiply(nums1, nums2))
",True
24,"Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. ","def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
",True
25,Write a Pandas program to replace the missing values with the most frequent values present in each column of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nReplace the missing values with the most frequent values present in each column:"")
result = df.fillna(df.mode().iloc[0])
print(result)
",True
26,"Write a NumPy program to split an array of 14 elements into 3 arrays, each of which has 2, 4, and 8 elements in the original order. ","import numpy as np
x = np.arange(1, 15)
print(""Original array:"",x)
print(""After splitting:"")
print(np.split(x, [2, 6]))
",True
27,Write a Python program to create a deep copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary (Deep copy):"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.deepcopy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nDeep copy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (Deep copy):"")
print(nums_copy)
",True
28,Write a Pandas program to create a subset of a given series based on value and condition. ,"import pandas as pd
s = pd.Series([0, 1,2,3,4,5,6,7,8,9,10])
print(""Original Data Series:"")
print(s)
print(""\nSubset of the above Data Series:"")
n = 6
new_s = s[s < n]
print(new_s)
",True
29,Write a Python program to get the items from a given list with specific condition. ,"def first_index(l1):
    return sum(1 for i in l1 if (i> 45 and i % 2 == 0))

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 45
print(""\nNumber of Items of the said list which are even and greater than"",n)
print(first_index(nums))
",True
30,Write a Python program to read a file line by line store it into a variable. ,"def file_read(fname):
        with open (fname, ""r"") as myfile:
                data=myfile.readlines()
                print(data)
file_read('test.txt')
",True
31,Write a Python program to get the current value of the recursion limit. ,"import sys
print()
print(""Current value of the recursion limit:"")
print(sys.getrecursionlimit())
print()
",True
32,Write a Python program to swap cases of a given string. ,"def swap_case_string(str1):
   result_str = """"   
   for item in str1:
       if item.isupper():
           result_str += item.lower()
       else:
           result_str += item.upper()           
   return result_str
print(swap_case_string(""Python Exercises""))
print(swap_case_string(""Java""))
print(swap_case_string(""NumPy""))
",True
33,"Write a Python program to convert an address (like ""1600 Amphitheatre Parkway, Mountain View, CA"") into geographic coordinates (like latitude 37.423021 and longitude -122.083739). ","import requests
geo_url = 'http://maps.googleapis.com/maps/api/geocode/json'
my_address = {'address': '21 Ramkrishana Road, Burdwan, East Burdwan, West Bengal, India', 
             'language': 'en'}
response = requests.get(geo_url, params = my_address)
results = response.json()['results']
my_geo = results[0]['geometry']['location']
print(""Longitude:"",my_geo['lng'],""\n"",""Latitude:"",my_geo['lat'])
",True
34,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
",True
35,Write a Python program to create a two-dimensional list from given list of lists. ,"def two_dimensional_list(nums):
  return list(zip(*nums))
print(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
print(two_dimensional_list([[1, 2], [4, 5]]))
",True
36,Write a Python program to invert a dictionary with unique hashable values. ,"def test(students):
  return { value: key for key, value in students.items() }
 
students = {
  'Theodore': 10,
  'Mathew': 11,
  'Roxanne': 9,
}
print(test(students))
",True
37,Write a NumPy program to access last two columns of a multidimensional columns. ,"import numpy as np
arra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arra)
result = arra[:,[1,2]]
print(result)
",True
38,Write a Python program to create Cartesian product of two or more given lists using itertools. ,"import itertools 
def cartesian_product(lists):
    return list(itertools.product(*lists))

ls = [[1,2],[3,4]]
print(""Original Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2,3],[3,4,5]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[],[1,2,3]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2],[]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
",True
39,Write a NumPy program to find the first Monday in May 2017. ,"import numpy as np
print(""First Monday in May 2017:"")
print(np.busday_offset('2017-05', 0, roll='forward', weekmask='Mon'))
",True
40, Write a Python program to get the number of people visiting a U.S. government website right now. ,"
import requests
from lxml import html
url = 'https://www.us-cert.gov/ncas/alerts'
doc = html.fromstring(requests.get(url).text)
print(""The number of security alerts issued by US-CERT in the current year:"")
print(len(doc.cssselect('.item-list li')))
  ",True
41,Write a NumPy program to remove the leading and trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
stripped = np.char.strip(x)
print(""\nRemove the leading and trailing whitespaces: "", stripped)
",True
43,Write a Python program to create a table and insert some records in that table. Finally selects all rows from the table and display the records. ,"import sqlite3
 
from sqlite3 import Error
 
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()

   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
",True
44,Write a Pandas program to calculate the number of characters in each word in a given series. ,"import pandas as pd
series1 = pd.Series(['Php', 'Python', 'Java', 'C#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: len(x))
print(""\nNumber of characters in each word in the said series:"")
print(result)
",True
45,"Write a NumPy program to broadcast on different shapes of arrays where p(3,3) + q(3). ","import numpy as np    
p = np.array([[0, 0, 0],
              [1, 2, 3],
              [4, 5, 6]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
",True
46,Write a Python program to check if a given function returns True for at least one element in the list. ,"def some(lst, fn = lambda x: x):
  return any(map(fn, lst))
print(some([0, 1, 2, 0], lambda x: x >= 2 ))
print(some([5, 10, 20, 10], lambda x: x < 2 ))
",True
47,Write a NumPy program to create an array using generator function that generates 15 integers. ,"import numpy as np
def generate():
   for n in range(15):
       yield n
nums = np.fromiter(generate(),dtype=float,count=-1)
print(""New array:"")
print(nums)
",True
48,Write a Python program to find four elements from a given array of integers whose sum is equal to a given number. The solution set must not contain duplicate quadruplets. ,"
from bisect import bisect_left
class Solution:
    def fourSum(self, nums, target):        
        N = 4
        quadruplets = []
        if len(nums) < N:
            return quadruplets
        nums = sorted(nums)
        quadruplet = []

        
        top = [0]       
        for i in range(1, N):
            top.append(top[i - 1] + nums[-i])

        
        
        
        def sum_(curr_target, curr_n, lo=0):
            if curr_n == 0:
                if curr_target == 0:
                    quadruplets.append(quadruplet[:])
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect_left(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i)

            for i in range(min_i, max_i + 1): 
                if i == min_i or nums[i] != nums[i - 1]:
                    quadruplet.append(nums[i])
                    next_target = curr_target - nums[i]
                    sum_(next_target, next_n, i + 1)
                    quadruplet.pop()

        sum_(target, N)
        return quadruplets

s = Solution()
nums = [-2, -1, 1, 2, 3, 4, 5, 6]
target = 10
result = s.fourSum(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Solution Set:\n"", result)
",True
49,Write a Python program to extract specified size of strings from a give list of string values. ,"def extract_string(str_list1, l):
    result = [e for e in str_list1 if len(e) == l] 
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"") 
print(extract_string(str_list1 , l))
",True
50,Write a Python program to count the number of times a specific element presents in a deque object. ,"import collections
nums = (2,9,0,8,2,4,0,9,2,4,8,2,0,4,2,3,4,0)
nums_dq = collections.deque(nums)
print(""Number of 2 in the sequence"")
print(nums_dq.count(2))
print(""Number of 4 in the sequence"")
print(nums_dq.count(4))
",True
51,Write a Pandas program to check the empty values of UFO (unidentified flying object) Dataframe. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
print(df.isnull().sum())
",True
52,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color on all the values of the said dataframe. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient()
",True
53,Write a Python program to find the difference between consecutive numbers in a given list. ,"def diff_consecutive_nums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
print(""Original list:"")
print(nums1)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums1))

nums2 = [4, 5, 8, 9, 6, 10]
print(""\nOriginal list:"")
print(nums2)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums2))
",True
54,Write a Pandas program to extract only words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)

def search_words(text):
    result = re.findall(r'\b[^\d\W]+\b', text)
    return "" "".join(result)

df['only_words']=df['address'].apply(lambda x : search_words(x))
print(""\nOnly words:"")
print(df)
",True
55,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
",True
56,Write a Python program that invoke a given function after specific milliseconds. ,"from time import sleep
import math
def delay(fn, ms, *args):
  sleep(ms / 1000)
  return fn(*args)
print(""Square root after specific miliseconds:"") 
print(delay(lambda x: math.sqrt(x), 100, 16))
print(delay(lambda x: math.sqrt(x), 1000, 100))
print(delay(lambda x: math.sqrt(x), 2000, 25100))
",True
57,Write a Pandas program to find and drop the missing values from World alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nMissing values:"")
print(w_a_con.isnull())
print(""\nDropping the missing values:"")
print(w_a_con.dropna())
",True
58,Write a Python program to print all primes (Sieve_of_Eratosthenes) smaller than or equal to a specified number. ,"
def sieve_of_Eratosthenes(num):
    limitn = num+1
    not_prime_num = set()
    prime_nums = []

    for i in range(2, limitn):
        if i in not_prime_num:
            continue

        for f in range(i*2, limitn, i):
            not_prime_num.add(f)

        prime_nums.append(i)

    return prime_nums

print(sieve_of_Eratosthenes(100));
",True
59,Write a Python program to create non-repeated combinations of Cartesian product of four given list of numbers. ,"import itertools as it
mums1 = [1, 2, 3, 4]
mums2 = [5, 6, 7, 8]
mums3 = [9, 10, 11, 12]
mums4 = [13, 14, 15, 16]
print(""Original lists:"")
print(mums1)
print(mums2)
print(mums3)
print(mums4)
print(""\nSum of the specified range:"")
for i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):
    print(i)
",True
60,Write a Python program to find the values of length six in a given list using Lambda. ,"weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days = filter(lambda day: day if len(day)==6 else '', weekdays)
for d in days:
  print(d)
",True
61,Write a Pandas program to replace NaNs with the value from the previous row or the next row in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplacing NaNs with the value from the previous row (purch_amt):"")
df['purch_amt'].fillna(method='pad', inplace=True)
print(df)
print(""\nReplacing NaNs with the value from the next row (sale_amt):"")
df['sale_amt'].fillna(method='bfill', inplace=True)
print(df)
",True
62,Write a Python program to sort a list of elements using the merge sort algorithm. ,"def mergeSort(nlist):
    print(""Splitting "",nlist)
    if len(nlist)>1:
        mid = len(nlist)//2
        lefthalf = nlist[:mid]
        righthalf = nlist[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)
        i=j=k=0       
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                nlist[k]=lefthalf[i]
                i=i+1
            else:
                nlist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            nlist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            nlist[k]=righthalf[j]
            j=j+1
            k=k+1
    print(""Merging "",nlist)

nlist = [14,46,43,27,57,41,45,21,70]
mergeSort(nlist)
print(nlist)
",True
63," latitude 37.423021 and longitude -122.083739), which you can use to place markers on a map, or position the map.","from lxml import html
import requests
response = requests.get('http://catalog.data.gov/dataset?q=&sort=metadata_created+desc')
doc = html.fromstring(response.text)
title = doc.cssselect('h3.dataset-heading')[0].text_content()
print(""The name of the most recently added dataset on data.gov:"")
print(title.strip())
",True
64,Write a NumPy program to create an array of ones and an array of zeros. ,"import numpy as np
print(""Create an array of zeros"")
x = np.zeros((1,2))
print(""Default type is float"")
print(x)
print(""Type changes to int"")
x = np.zeros((1,2), dtype = np.int)
print(x)
print(""Create an array of ones"")
y= np.ones((1,2)) 
print(""Default type is float"")
print(y)
print(""Type changes to int"")
y = np.ones((1,2), dtype = np.int)
print(y)
",True
65,Write a Python program to find the value of the first element in the given list that satisfies the provided testing function. ,"def find(lst, fn):
  return next(x for x in lst if fn(x)) 
print(find([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find([1, 2, 3, 4], lambda n: n % 2 == 0))
",True
66,Write a Python program to remove duplicates from Dictionary. ,"student_data = {'id1': 
   {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id2': 
  {'name': ['David'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id3': 
    {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id4': 
   {'name': ['Surya'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
}

result = {}

for key,value in student_data.items():
    if value not in result.values():
        result[key] = value

print(result)
",True
67,Write a Python program to find the list in a list of lists whose sum of elements is the highest. ,"num = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]
print(max(num, key=sum))
",True
68,Write a Python program to get the top stories from Google news. ,"import bs4
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen

news_url=""https://news.google.com/news/rss""
Client=urlopen(news_url)
xml_page=Client.read()
Client.close()

soup_page=soup(xml_page,""xml"")
news_list=soup_page.findAll(""item"")

for news in news_list:
  print(news.title.text)
  print(news.link.text)
  print(news.pubDate.text)
  print(""-""*60)
",True
69,Write a Python program to check all values are same in a dictionary. ,"def value_check(students, n):
    result = all(x == n for x in students.values()) 
    return result
  
students = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}
print(""Original Dictionary:"")
print(students)
n = 12
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
n = 10
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
",True
70,Write a Python program to compare two given lists and find the indices of the values present in both lists. ,"def matched_index(l1, l2):
    l2 = set(l2)
    return [i for i, el in enumerate(l1) if el in l2]

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 2, 10, 12]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 15 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))
",True
71,Write a Python program to create a 24-hour time format (HH:MM ) using 4 given digits. Display the latest time and do not use any digit more than once. ,"import itertools
def max_time(nums):
    for i in range(len(nums)):
        nums[i] *= -1
    nums.sort()
    for hr1, hr2, m1, m2 in itertools.permutations(nums):
        hrs = -(10*hr1 + hr2)
        mins = -(10*m1 + m2)
        if 60> mins >=0 and 24 > hrs >=0:
            result = ""{:02}:{:02}"".format(hrs, mins)
            break
    return result

nums = [1,2,3,4]
print(""Original array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [1,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [0,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))
",True
72,"Sum a list of numbers. Write a Python program to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on. ","
def test(list1):
    result =   [(x + y) / 2.0 for (x, y) in zip(list1[:-1], list1[1:])]
    return list(result)

nums =  [1,2,3,4,5,6,7]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))

nums =  [0,1,-3,3,7,-5,6,7,11]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))
",True
73,Write a Python program to test whether all numbers of a list is greater than a certain number. ,"num = [2, 3, 4, 5]
print()
print(all(x > 1 for x in num))
print(all(x > 4 for x in num))
print()
",True
74,Write a NumPy program to test whether a given 2D array has null columns or not. ,"import numpy as np
print(""Original array:"")
nums = np.random.randint(0,3,(4,10))
print(nums)
print(""\nTest whether the said array has null columns or not:"")
print((~nums.any(axis=0)).any())
",True
75,Write a NumPy program to convert angles from degrees to radians for all elements in a given array. ,"import numpy as np
x = np.array([-180.,  -90.,   90.,  180.])
r1 = np.radians(x)
r2 = np.deg2rad(x)
assert np.array_equiv(r1, r2)
print(r1)
",True
76,Write a Python program to find all anagrams of a string in a given list of strings using lambda. ,"from collections import Counter  
texts = [""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""]
str = ""abcd""
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
print(""\nAnagrams of 'abcd' in the above string: "")
print(result)
",True
77,rogram to display the name of the most recently added dataset on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('http://www.example.com/')
bsh = BeautifulSoup(html.read(), 'html.parser')
print(bsh.h1)
",True
78,Write a NumPy program to extract all numbers from a given array which are less and greater than a specified number. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 5
print(""\nElements of the said array greater than"",n)
print(nums[nums > n])
n = 6
print(""\nElements of the said array less than"",n)
print(nums[nums < n])
",True
79,Write a NumPy program to extract second and fourth elements of the second and fourth rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and fourth elements of the second and fourth rows "")
print(arra_data[1::2, 1::2])
",True
80,Write a NumPy program to split a given array into multiple sub-arrays vertically (row-wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(4, 4)
print(x)
new_array1 =  np.vsplit(x, 2)
print(""\nSplit an array into multiple sub-arrays vertically:"")
print(new_array1)
",True
81,Write a Python program to count number of substrings from a given string of lowercase alphabets with exactly k distinct (given) characters. ,"def count_k_dist(str1, k): 
	str_len = len(str1) 
	
	result = 0

	ctr = [0] * 27

	for i in range(0, str_len): 
		dist_ctr = 0

		ctr = [0] * 27

		for j in range(i, str_len): 
			
			if(ctr[ord(str1[j]) - 97] == 0): 
				dist_ctr += 1

			ctr[ord(str1[j]) - 97] += 1

			if(dist_ctr == k): 
				result += 1
			if(dist_ctr > k): 
				break

	return result 

str1 = input(""Input a string (lowercase alphabets):"")
k = int(input(""Input k: ""))
print(""Number of substrings with exactly"", k, ""distinct characters : "", end = """") 
print(count_k_dist(str1, k))
",True
82,Write a Python program to create a list reflecting the run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def encode_list(s_list):
    return [[len(list(group)), key] for key, group in groupby(s_list)]
n_list = [1,1,2,3,4,4.3,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said list:"")
print(encode_list(n_list))
n_list = 'automatically'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said string:"")
print(encode_list(n_list))
",True
83,Write a Pandas program to check whether only numeric values present in a given column of a DataFrame.,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001', '2055', 'abcd', '123345'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
	
print(""Original DataFrame:"")
print(df)
print(""\nNumeric values present in company_code column:"")
df['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))
print(df)

",True
84,Write a Python program to check if a specific Key and a value exist in a dictionary. ,"def test(dictt, key, value):
   if any(sub[key] == value for sub in dictt):
       return True
   return False

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]


print(""\nOriginal dictionary:"")
print(students)
print(""\nCheck if a specific Key and a value exist in the said dictionary:"")
print(test(students,'student_id', 1))
print(test(students,'name', 'Brian Howell'))
print(test(students,'class', 'VII'))
print(test(students,'class', 'I'))
print(test(students,'name', 'Brian Howelll'))
print(test(students,'student_id', 11))
",True
85,Write a Pandas program to split a given dataset using group by on multiple columns and drop last n rows of from each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3002,3001,3004,3003,3002,3003,3001],
'salesman_id':[5002,5003,5001,5003,5002,5001,5001,5003,5003,5002,5003,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nSplit the said data on 'salesman_id', 'customer_id' wise:"")
result = df.groupby(['salesman_id', 'customer_id'])
for name,group in result:
    print(""\nGroup:"")
    print(name)
    print(group)
n = 2

print(""\nDroping last two records:"")    
result1 = df.drop(df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)
print(result1)
",True
86,"Write a NumPy program to find point by point distances of a random vector with shape (10,2) representing coordinates. ","import numpy as np
a= np.random.random((10,2))
x,y = np.atleast_2d(a[:,0], a[:,1])
d = np.sqrt( (x-x.T)**2 + (y-y.T)**2)
print(d)
",True
87,Write a Python program to create the next bigger number by rearranging the digits of a given number. ,"def rearrange_bigger(n):
    
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False
n = 12
print(""Original number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))

n = 10
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
      
n = 201
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 102
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 445
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
",True
88,Write a Python program to filter a dictionary based on values. ,"marks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}
print(""Original Dictionary:"")
print(marks)
print(""Marks greater than 170:"")
result = {key:value for (key, value) in marks.items() if value >= 170}
print(result)
",True
89,Write a Python program to count the frequency of the elements of a given unordered list. ,"from itertools import groupby

uno_list = [2,1,3,8,5,1,4,2,3,4,0,8,2,0,8,4,2,3,4,2]
print(""Original list:"")
print(uno_list)
uno_list.sort()
print(uno_list)
print(""\nSort the said unordered list:"")
print(uno_list)
print(""\nFrequency of the elements of the said unordered list:"")
result = [len(list(group)) for key, group in groupby(uno_list)]
print(result)
",True
90,Write a Pandas program to find out the alcohol consumption details in the year '1987' or '1989' from the world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details where year is 1987 or 1989:"")
print((w_a_con[(w_a_con['Year']==1987) | (w_a_con['Year']==1989)]).head(10))
",True
91,Write a Python program to count the number of even and odd numbers from a series of numbers. ,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) 
count_odd = 0
count_even = 0
for x in numbers:
        if not x % 2:
    	     count_even+=1
        else:
    	     count_odd+=1
print(""Number of even numbers :"",count_even)
print(""Number of odd numbers :"",count_odd)
",True
92,Write a Python code to send some sort of data in the URL's query string. ,"import requests
payload = {'key1': 'value1', 'key2': 'value2'}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
print(""\nPass a list of items as a value:"")
payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
",True
93,Write a Pandas program to split the following dataframe into groups and calculate monthly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nMonth wise purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='M')).agg({'purch_amt':sum})
print(result)
",True
94,Write a Pandas program to add leading zeros to the character column in a pandas series and makes the length of the field to 8 digit. ,"import pandas as pd
nums = {'amount': ['10', '250', '3000', '40000', '500000']}
print(""Original dataframe:"")
df = pd.DataFrame(nums)
print(df)
print(""\nAdd leading zeros:"")
df['amount'] = list(map(lambda x: x.zfill(10), df['amount']))
print(df)
",True
95,Write a NumPy program to compute the reciprocal for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., .2, .3])
print(""Original array: "")
print(x)
r1 = np.reciprocal(x)
r2 = 1/x
assert np.array_equal(r1, r2)
print(""Reciprocal for all elements of the said array:"")
print(r1)
",True
96,Write a NumPy program to calculate the QR decomposition of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.qr(m)
print(""Decomposition of the said matrix:"")
print(result)
",True
97,Write a NumPy program to extract first and second elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and second elements of the first and second rows "")
print(arra_data[0:2, 0:2])
",True
98,Write a Python program to compute sum of digits of a given string. ,"def sum_digits_string(str1):
    sum_digit = 0
    for x in str1:
        if x.isdigit() == True:
            z = int(x)
            sum_digit = sum_digit + z

    return sum_digit
     
print(sum_digits_string(""123abcd45""))
print(sum_digits_string(""abcd1234""))
",True
99,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color mapping on a specified column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient(subset=['C'])
",True
100,Write a Python program to find the nth Hamming number. User itertools module. ,"import itertools
from heapq import merge

def nth_hamming_number(n):
    def num_recur():
        last = 1
        yield last
        x, y, z = itertools.tee(num_recur(), 3)
        for n in merge((2 * i for i in x), (3 * i for i in y), (5 * i for i in z)):
            if n != last:
                yield n
                last = n
    result =  itertools.islice(num_recur(), n)
    return list(result)[-1]

print(nth_hamming_number(8))
print(nth_hamming_number(14))
print(nth_hamming_number(17))
",True
101,Write a Python program to find the last occurrence of a specified item in a given list. ,"def last_occurrence(l1, ch):
    return ''.join(l1).rindex(ch)

chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']
print(""Original list:"")
print(chars)
ch = 'f'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'c'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'k'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'w'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch)) 
",True
102,Write a Python program to convert Python dictionary object (sort by key) to JSON data. Print the object members with indent level 4. ,"import json
j_str = {'4': 5, '6': 7, '1': 3, '2': 4}
print(""Original String:"")
print(j_str)
print(""\nJSON data:"")
print(json.dumps(j_str, sort_keys=True, indent=4))
",True
103,Write a Python program to create the combinations of 3 digit combo. ,"numbers = []
for num in range(1000):
  num=str(num).zfill(3)
print(num)
numbers.append(num)
",True
104,Write a Python program to create an iterator to get specified number of permutations of elements. ,"import itertools as it
def permutations_data(iter, length):
    return it.permutations(iter, length)

result = permutations_data(['A','B','C','D'], 3)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)


result = permutations_data(""Python"", 2)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)
",True
105,Write a Python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string. ,"def first_three(str):
	return str[:3] if len(str) > 3 else str

print(first_three('ipy'))
print(first_three('python'))
print(first_three('py'))
",True
106,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
",True
107,Write a Python program to display formatted text (width=50) as output. ,"import textwrap
sample_text = '''
  Python is a widely used high-level, general-purpose, interpreted,
  dynamic programming language. Its design philosophy emphasizes
  code readability, and its syntax allows programmers to express
  concepts in fewer lines of code than possible in languages such
  as C++ or Java.
  '''
print()
print(textwrap.fill(sample_text, width=50))
print()
",True
108,Write a Python function to find the maximum and minimum numbers from a sequence of numbers. ,"def max_min(data):
  l = data[0]
  s = data[0]
  for num in data:
    if num> l:
      l = num
    elif num< s:
        s = num
  return l, s

print(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))
",True
109,Write a Pandas program to create a sequence of durations increasing by an hour. ,"import pandas as pd
date_range = pd.timedelta_range(0, periods=49, freq='H')
print(""Hourly range of perods 49:"")
print(date_range)
",True
110,Write a NumPy program to sort the specified number of elements from beginning of a given array. ,"import numpy as np
nums =  np.random.rand(10)
print(""Original array:"")
print(nums)
print(""\nSorted first 5 elements:"")
print(nums[np.argpartition(nums,range(5))])
",True
111,"Write a Python program to extract year, month, date and time using Lambda. ","import datetime
now = datetime.datetime.now()
print(now)
year = lambda x: x.year
month = lambda x: x.month
day = lambda x: x.day
t = lambda x: x.time()
print(year(now))
print(month(now))
print(day(now))
print(t(now))
",True
112,"Write a Python program to find all the common characters in lexicographical order from two given lower case strings. If there are no common letters print ""No common characters"". ","from collections import Counter 
def common_chars(str1,str2): 	
	d1 = Counter(str1) 
	d2 = Counter(str2) 
	common_dict = d1 & d2 
	if len(common_dict) == 0: 
		return ""No common characters.""

	
	common_chars = list(common_dict.elements()) 
	common_chars = sorted(common_chars) 

	return ''.join(common_chars) 

str1 = 'Python'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
str1 = 'Java'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
",True
113,Write a Python program to remove a newline in Python. ,"str1='Python Exercises\n'
print(str1)
print(str1.rstrip())
",True
114,"Write a Pandas program to extract the column labels, shape and data types of the dataset (titanic.csv). ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
print(""List of columns:"")
print(df.columns)
print(""\nShape of the Dataset:"")
print(df.shape)
print(""\nData types of the Dataset:"")
print(df.dtypes)
",True
115,Write a Pandas program to replace arbitrary values with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace(""A"", ""C"")
print(df)
",True
116,"Write a NumPy program to calculate mean across dimension, in a 2D numpy array. ","import numpy as np
x = np.array([[10, 30], [20, 60]])
print(""Original array:"")
print(x)
print(""Mean of each column:"")
print(x.mean(axis=0))
print(""Mean of each row:"")
print(x.mean(axis=1))
",True
117,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. Add the fare as a dimension of columns and partition fare column into 2 categories based on the values present in fare columns. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
fare = pd.qcut(df['fare'], 2)
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex', age], columns=[fare, 'pclass'])
print(result)
",True
118,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def get(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'freddy': {
    'name': {
      'first': 'Fateh',
      'last': 'Harwood' 
    },
    'postIds': [1, 2, 3]
  }
}
print(get(users, ['freddy', 'name', 'last']))
print(get(users, ['freddy', 'postIds', 1]))
",True
119,Write a Python program to sort unsorted numbers using Recursive Bubble Sort. ,"
def bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swapped = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swapped = True

    return list_data if not swapped else bubble_sort(list_data, length - 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
",True
120,Write a Python program to count the values associated with key in a dictionary. ,"student = [{'id': 1, 'success': True, 'name': 'Lary'},
 {'id': 2, 'success': False, 'name': 'Rabi'},
 {'id': 3, 'success': True, 'name': 'Alex'}]
print(sum(d['id'] for d in student))
print(sum(d['success'] for d in student))
",True
121,"Write a NumPy program to multiply an array of dimension (2,2,3) by an array with dimensions (2,2). ","import numpy as np
nums1 = np.ones((2,2,3))
nums2 = 3*np.ones((2,2))
print(""Original array:"")
print(nums1)
new_array = nums1 * nums2[:,:,None]
print(""\nNew array:"")
print(new_array)
",True
122,Write a NumPy program to swap rows and columns of a given array in reverse order. ,"import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [90, 91, 93, 94],
               [5, 0, 3, 2]]])
print(""Original array:"")
print(nums)
print(""\nSwap rows and columns of the said array in reverse order:"")
new_nums = print(nums[::-1, ::-1])
print(new_nums)
",True
123,"Write a NumPy program to create an 1-D array of 20 elements. Now create a new array of shape (5, 4) from the said array, then restores the reshaped array into a 1-D array. ","import numpy as np
array_nums = np.arange(0, 40, 2)
print(""Original array:"")
print(array_nums)
print(""\nNew array of shape(5, 4):"")
new_array = array_nums.reshape(5, 4)
print(new_array) 
print(""\nRestore the reshaped array into a 1-D array:"")
print(new_array.flatten())
",True
124,Write a Python program to sort a list of elements using Tree sort. ,"


class node():
    
    def __init__(self, val):
        self.val = val
        self.left = None 
        self.right = None 
    
    def insert(self,val):
        if self.val:
            if val < self.val:
                if self.left is None:
                    self.left = node(val)
                else:
                    self.left.insert(val)
            elif val > self.val:
                if self.right is None:
                    self.right = node(val)
                else:
                    self.right.insert(val)
        else:
            self.val = val

def inorder(root, res):
    
    if root:
        inorder(root.left,res)
        res.append(root.val)
        inorder(root.right,res)

def treesort(arr):
    
    if len(arr) == 0:
        return arr
    root = node(arr[0])
    for i in range(1,len(arr)):
        root.insert(arr[i])
    
    res = []
    inorder(root,res)
    return res

print(treesort([7,1,5,2,19,14,17]))
",True
125,"Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays. ","import numpy as np
x = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])
y = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - equal:"")
print(np.equal(x, y))
print(""Comparison - equal within a tolerance:"")
print(np.allclose(x, y))
",True
126,Write a Pandas program to split a given dataframe into groups with multiple aggregations. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s001'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by with multiple aggregations:"")
result = df.groupby(['school_code','class']).agg({'height': ['max', 'mean'],
                                 'weight': ['sum','min','count']})
print(result)
",True
127,Write a NumPy program to find a matrix or vector norm. ,"import numpy as np
v = np.arange(7)
result = np.linalg.norm(v)
print(""Vector norm:"")
print(result)
m = np.matrix('1, 2; 3, 4') 
result1 = np.linalg.norm(m)
print(""Matrix norm:"")
print(result1)
",True
128,Write a Python program to delete the first item from a singly linked list. ,"class Node:
    
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the first item from the list:"")
items.delete_item('PHP')
for val in items.iterate_item():
    print(val)
",True
129,Write a Python program to find the difference between two list including duplicate elements. Use collections module. ,"from collections import Counter
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]
print(""Original lists:"")
c1 = Counter(l1)
c2 = Counter(l2)
diff = c1-c2
print(list(diff.elements()))
",True
130,Write a Python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number. ,"def sum_of_cubes(n):
 n -= 1
 total = 0
 while n > 0:
   total += n * n * n
   n -= 1
 return total
print(""Sum of cubes smaller than the specified number: "",sum_of_cubes(3))
",True
131,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and find a list of specified customers by name. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df.query('Mine_Name == [""Shoal Creek Mine"", ""Piney Woods Preparation Plant""]').head()
",True
132,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",True
133,Write a NumPy program to create a 3-D array with ones on a diagonal and zeros elsewhere. ,"import numpy as np
x = np.eye(3)
print(x)
",True
134,Write a NumPy program to extract first element of the second row and fourth element of fourth row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First element of the second row and fourth element of fourth row  "")
print(arra_data[[1,3], [0,3]])
",True
135,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
",True
136,Write a Python program to get the size of a file. ,"import os
file_size = os.path.getsize(""abc.txt"")
print(""\nThe size of abc.txt is :"",file_size,""Bytes"")
print()
",True
137,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display bar charts in dataframe on specified columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBar charts in dataframe:"")
df.style.bar(subset=['B', 'C'], color='#d65f5f')
",True
138,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) sighted by month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.month
months_data = df.ufo_yr.value_counts()
months_index = months_data.index  
months_values = months_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO sighted by Month')
plt.xlabel(""Months"")
plt.ylabel(""Number of sighting"")
months_plot = sns.barplot(x=months_index[:60],y=months_values[:60], palette = ""Oranges"")
",True
139,Write a Python program to sort unsorted numbers using Recursive Quick Sort. ,"def quick_sort(nums: list) -> list:
    if len(nums) <= 1:
        return nums
    else:
        return (
            quick_sort([el for el in nums[1:] if el <= nums[0]])
            + [nums[0]]
            + quick_sort([el for el in nums[1:] if el > nums[0]])
        )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
",True
140,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
",True
141,Write a Python program to find the difference between two list including duplicate elements. ,"def list_difference(l1,l2):
    result = list(l1)
    for el in l2:
        result.remove(el)
    return result
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]

print(""Original lists:"")
print(l1)
print(l2)
print(""\nDifference between two said list including duplicate elements):"")
print(list_difference(l1,l2))
",True
142,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in Heatmap style. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Heatmap style:"")

cm = sns.light_palette(""red"", as_cmap=True)
 
df.style.background_gradient(cmap='viridis') 
",True
143,Write a Python program to remove a tag from a given tree of html document and destroy it and its contents. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.a.decompose()
print(""After decomposing:"")
print(new_tag)
",True
144,Write a Python program to convert a given number (integer) to a list of digits. ,"def digitize(n):
  return list(map(int, str(n)))
print(digitize(123))
print(digitize(1347823)) 
",True
145,rite a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case). ,"lines = []
while True:
    l = input()
    if l:
        lines.append(l.upper())
    else:
        break;

for l in lines:
    print(l)
	",True
146,Write a Python program to remove a tag or string from a given tree of html document and replace it with the given tag or string. ,"from bs4 import BeautifulSoup
html_markup= '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_markup, ""lxml"")
print(""Original markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.new_tag(""b"")
new_tag.string = ""PHP""
b_tag = a_tag.i.replace_with(new_tag)
print(""New Markup:"")
print(a_tag)
",True
147,Write a Pandas program to extract the unique sentences from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue\n9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.\n102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_unique_sentence(str1):
    result = re.findall(r'(?sm)(^[^\r\n]+$)(?!.*^\1$)', str1)
    return result

df['unique_sentence']=df['address'].apply(lambda st : find_unique_sentence(st))
print(""\nExtract unique sentences :"")
print(df)
",True
148,Write a Pandas program to filter all records where the average consumption of beverages per person from .5 to 2.50 in world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter all records where the average consumption of beverages per person from .5 to 2.50.:"")
print(w_a_con[(w_a_con['Display Value'] < 2.5) & (w_a_con['Display Value']>.5)].head())
",True
149,Write a Pandas program to extract elements in the given positional indices along an axis of a dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(""\nConstruct a Dataframe using the said MultiIndex levels:"")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSelect 1st, 2nd and 3rd row of the said DataFrame:"")
positions = [1, 2, 5]
print(df.take([1, 2, 5]))

print(""\nTake elements at indices 1 and 2 along the axis 1 (column selection):"")
print(df.take([1, 2], axis=1))

print(""\nTake elements at indices 4 and 3 using negative integers along the axis 1 (column selection):"")
print(df.take([-1, -2], axis=1))
",True
150,Write a Python program to find a pair with highest product from a given array of integers. ,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        print(""No pairs exists"") 
        return      
    
    x = arr[0]; y = arr[1] 

    
    for i in range(0, arr_len): 

        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 

    return x,y    

nums = [1, 2, 3, 4, 7, 0, 8, 4] 
print(""Original array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))

nums = [0, -1, -2, -4, 5, 0, -6] 
print(""\nOriginal array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))
",True
151,Write a Python program to move all zero digits to end of a given list of numbers. ,"def test(lst):
    result = sorted(lst, key=lambda x: not x) 
    return result
nums = [3,4,0,0,0,6,2,0,6,7,6,0,0,0,9,10,7,4,4,5,3,0,0,2,9,7,1]
print(""\nOriginal list:"")
print(nums)
print(""\nMove all zero digits to end of the said list of numbers:"")
print(test(nums)) 
",True
152,Write a NumPy program to compute cross-correlation of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCross-correlation of the said arrays:\n"",np.cov(x, y))
",True
153,Write a Python program to get the actual module object for a given object. ,"from inspect import getmodule
from math import sqrt
print(getmodule(sqrt))
",True
154,Write a Python program to extract the nth element from a given list of tuples using lambda. ,"def extract_nth_element(test_list, n):
    result = list(map (lambda x:(x[n]), test_list))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
",True
155,Write a NumPy program to add an extra column to a NumPy array. ,"import numpy as np
x = np.array([[10,20,30], [40,50,60]])
y = np.array([[100], [200]])
print(np.append(x, y, axis=1))
",True
156,Write a Python program to calculate the product of a given list of numbers using lambda. ,"import functools 
def remove_duplicates(nums):
    result = functools.reduce(lambda x, y: x * y, nums, 1)
    return result
nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2.2,4.12,6.6,8.1,8.3]
print(""list1:"", nums1)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums1))
print(""\nlist2:"", nums2)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums2))
",True
157,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
",True
158,Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable. ,"import numpy as np
x = np.random.rand(10, 4)
print(""Original array: "")
print(x)
y= x[:5, :]
print(""First 5 rows of the above array:"")
print(y)
",True
159,Write a Pandas program to find average consumption of wine per person greater than 2 in world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nAverage consumption of wine per person greater than 2:"")
print(w_a_con[(w_a_con['Beverage Types'] == 'Wine') & (w_a_con['Display Value'] > .2)].count())
",True
160,Write a Pandas program to convert Series of lists to one Series. ,"import pandas as pd
s = pd.Series([
    ['Red', 'Green', 'White'],
    ['Red', 'Black'],
    ['Yellow']])
print(""Original Series of list"")
print(s)
s = s.apply(pd.Series).stack().reset_index(drop=True)
print(""One Series"")
print(s)
",True
161,Write a Python program to sort a list of elements using Time sort. ,"
def binary_search(lst, item, start, end):
    if start == end:
        if lst[start] > item:
            return start
        else:
            return start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)

    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index+1:]
    return lst


def merge(left, right):
    if not left:
        return right

    if not right:
        return left

    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)

    return [right[0]] + merge(left, right[1:])

def time_sort(lst):
    runs, sorted_runs = [], []
    length = len(lst)
    new_run = [lst[0]]
    sorted_array = []

    for i in range(1, length):
        if i == length - 1:
            new_run.append(lst[i])
            runs.append(new_run)
            break

        if lst[i] < lst[i - 1]:
            if not new_run:
                runs.append([lst[i - 1]])
                new_run.append(lst[i])
            else:
                runs.append(new_run)
                new_run = []
        else:
            new_run.append(lst[i])

    for run in runs:
        sorted_runs.append(insertion_sort(run))

    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)

    return sorted_array

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(time_sort(nums))
",True
162,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
",True
163,Write a NumPy program to subtract the mean of each row of a given matrix. ,"import numpy as np
print(""Original matrix:\n"")
X = np.random.rand(5, 10)
print(X)
print(""\nSubtract the mean of each row of the said matrix:\n"")
Y = X - X.mean(axis=1, keepdims=True)
print(Y)
",True
164,Write a NumPy program to test whether two arrays are element-wise equal within a tolerance. ,"import numpy as np
print(""Test if two arrays are element-wise equal within a tolerance:"")
print(np.allclose([1e10,1e-7], [1.00001e10,1e-8]))
print(np.allclose([1e10,1e-8], [1.00001e10,1e-9]))
print(np.allclose([1e10,1e-8], [1.0001e10,1e-9]))
print(np.allclose([1.0, np.nan], [1.0, np.nan]))
print(np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True))
",True
165,Write a Pandas program to create a Pivot table and count the manager wise sale and mean value of sale amount. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Manager""],values=[""Sale_amt""],aggfunc=[np.mean,len]))
",True
166,Write a Python program to select all the Sundays of a specified year. ,"from datetime import date, timedelta

def all_sundays(year):

       dt = date(year, 1, 1)

       dt += timedelta(days = 6 - dt.weekday())  
       while dt.year == year:
          yield dt
          dt += timedelta(days = 7)
          
for s in all_sundays(2020):
   print(s)
   ",True
167,Write a Pandas program to print a concise summary of the dataset (titanic.csv). ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.info()
print(result)
",True
168,Write a Python program to create an object for writing and iterate over the rows to print the values. ,"import csv
import sys
with open('temp.csv', 'wt') as f:
    writer = csv.writer(f)
    writer.writerow(('id1', 'id2', 'date'))
    for i in range(3):
        row = (
            i + 1,
            chr(ord('a') + i),
            '01/{:02d}/2019'.format(i + 1),)
        writer.writerow(row)
print(open('temp.csv', 'rt').read())
",True
169,Write a Python program to remove duplicate dictionary from a given list. ,"def remove_duplicate_dictionary(list_color):
    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]
    return result

list_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
print (""Original list with duplicate dictionary:"")
print(list_color)
print(""\nAfter removing duplicate dictionary of the said list:"")
print(remove_duplicate_dictionary(list_color))
",True
170,Write a Pandas program to create a Pivot table and compute survival totals of all classes along each group. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class', margins=True)
print(result)
",True
171,Write a Python program to remove first specified number of elements from a given list satisfying a condition. ,"def condition_match(x):
    return ((x % 2) == 0)
def remove_items_con(data, N):
    ctr = 1
    result = []
    for x in data:
        if ctr > N or not condition_match(x):
            result.append(x)
        else:
            ctr = ctr + 1
    return result
nums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
N = 4
print(""Original list:"")
print(nums)
print(""\nRemove first 4 even numbers from the said list:"")
print(remove_items_con(nums, N))
",True
172,Write a Python program to convert a list of multiple integers into a single integer. ,"L = [11, 33, 50]
print(""Original List: "",L)
x = int("""".join(map(str, L)))
print(""Single Integer: "",x)
",True
173,Write a Python program to find the value of the last element in the given list that satisfies the provided testing function. ,"def find_last(lst, fn):
  return next(x for x in lst[::-1] if fn(x))

print(find_last([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find_last([1, 2, 3, 4], lambda n: n % 2 == 0))
",True
174,Write a Python program to change the position of every n-th value with the (n+1)th in a list. ,"from itertools import zip_longest, chain, tee
def replace2copy(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
n = [0,1,2,3,4,5]
print(replace2copy(n))
",True
175,Write a Python program to multiply all the numbers in a given list using lambda. ,"from functools import reduce 
def mutiple_list(nums):
    result =  reduce(lambda x, y: x*y, nums)
    return result
nums = [4, 3, 2, 2, -1, 18]
print (""Original list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
nums = [2, 4, 8, 8, 3, 2, 9]
print (""\nOriginal list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
",True
176,Write a Python program to remove unwanted characters from a given string. ,"def remove_chars(str1, unwanted_chars):
    for i in unwanted_chars:
        str1 = str1.replace(i, '')
    return str1



str1 = ""Pyth*^on Exercis^es""
str2 = ""A%^!B#*CD""

unwanted_chars = [""#"", ""*"", ""!"", ""^"", ""%""]
print (""Original String : "" + str1)
print(""After removing unwanted characters:"")
print(remove_chars(str1, unwanted_chars))
print (""\nOriginal String : "" + str2)
print(""After removing unwanted characters:"")
print(remove_chars(str2, unwanted_chars))
",True
177,Write a Python program to compute the average of n,"import itertools as it
nums = [[0, 1, 2],
       [2, 3, 4],
       [3, 4, 5, 6],
       [7, 8, 9, 10, 11],
       [12, 13, 14]]

print(""Original list:"")
print(nums)
def get_avg(x):
    x = [i for i in x if i is not None]
    return sum(x, 0.0) / len(x)
result = map(get_avg, it.zip_longest(*nums))
print(""\nAverage of n-th elements in the said list of lists with different lengths:"")
print(list(result))
",True
178,Write a Python program to find the details of a given zip code using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
zipcode1 = ""99501""
print(""\nZipcode:"",zipcode1)
location = geolocator.geocode(zipcode1)
print(""Details of the said pincode:"")
print(location.address) 
zipcode2 = ""CA9 3HX""
print(""\nZipcode:"",zipcode2)
location = geolocator.geocode(zipcode2)
print(""Details of the said pincode:"")
print(location.address) 
zipcode3 = ""61000""
print(""\nZipcode:"",zipcode3)
location = geolocator.geocode(zipcode3)
print(""Details of the said pincode:"")
print(location.address) 
zipcode4 = ""713101""
print(""\nZipcode:"",zipcode4)
location = geolocator.geocode(zipcode4)
print(""Details of the said pincode:"")
print(location.address)
",True
179,Write a NumPy program to insert a space between characters of all the elements of a given array. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.join("" "", x)
print(r)
",True
180,Write a Python program to merge some list items in given list using index value. ,"def merge_some_chars(lst,merge_from,merge_to):
    result = lst
    result[merge_from:merge_to] = [''.join(result[merge_from:merge_to])]    
    return result    
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(""Original lists:"")
print(chars)
merge_from = 2
merge_to = 4
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
merge_from = 3
merge_to = 7
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
",True
181,Write a Python function to check whether a number is perfect or not. ,"def perfect_number(n):
    sum = 0
    for x in range(1, n):
        if n % x == 0:
            sum += x
    return sum == n
print(perfect_number(6))
",True
182,"Write a Pandas program to split a given dataset, group by two columns and convert other columns of the dataframe into a dictionary with column header as key. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
dict_data_list = list()

for gg, dd in df.groupby(['school_code','class']):
    group = dict(zip(['school_code','class'], gg))
    ocolumns_list = list()
    for _, data in dd.iterrows():
        data = data.drop(labels=['school_code','class'])
        ocolumns_list.append(data.to_dict())
    group['other_columns'] = ocolumns_list
    dict_data_list.append(group)

print(dict_data_list) 
",True
183,Write a Python program to find the most common elements and their counts of a specified text. ,"from collections import Counter
s = 'lkseropewdssafsdfafkpwe'
print(""Original string: ""+s)
print(""Most common three characters of the said string:"")
print(Counter(s).most_common(3))
",True
184,Write a NumPy program to round array elements to the given number of decimals. ,"import numpy as np
x = np.round([1.45, 1.50, 1.55])
print(x)
x = np.round([0.28, .50, .64], decimals=1)
print(x)
x = np.round([.5, 1.5, 2.5, 3.5, 4.5]) 
print(x)
",True
185,Write a Pandas program to find the index of the first occurrence of the smallest and largest value of a given series. ,"import pandas as pd
nums = pd.Series([1, 3, 7, 12, 88, 23, 3, 1, 9, 0])
print(""Original Series:"")
print(nums)
print(""Index of the first occurrence of the smallest and largest value of the said series:"")
print(nums.idxmin())
print(nums.idxmax())
",True
186,Write a NumPy program to generate a random number between 0 and 1. ,"import numpy as np
rand_num = np.random.normal(0,1,1)
print(""Random number between 0 and 1:"")
print(rand_num)
",True
187,Write a Python program to count number of unique sublists within a given list. ,"def unique_sublists(input_list):
    result ={}
    for l in input_list: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result

list1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] 
print(""Original list:"")
print(list1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(list1)) 

color1 = [[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]
print(""\nOriginal list:"")
print(color1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(color1))
",True
188,Write a Python program to calculate the time runs (difference between start and current time) of a program. ,"from timeit import default_timer
def timer(n):
    start = default_timer()
    
    for row in range(0,n):
        print(row)
    print(default_timer() - start)

timer(5)
timer(15)
",True
189,Write a Python program to concatenate element-wise three given lists. ,"def concatenate_lists(l1,l2,l3):
    return [i + j + k for i, j, k in zip(l1, l2, l3)]
    
l1 = ['0','1','2','3','4'] 
l2 = ['red','green','black','blue','white']
l3 = ['100','200','300','400','500'] 

print(""Original lists:"")
print(l1)
print(l2)
print(l3)
print(""\nConcatenate element-wise three said lists:"")
print(concatenate_lists(l1,l2,l3))
",True
190,Write a Python program to delete a specific row from a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()

   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")   
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
   print(""\nDelete Salesman of ID 5003:"")
   s_id = 5003
   cursorObj.execute(""""""
   DELETE FROM salesman
   WHERE salesman_id = ?
   """""", (s_id,))
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""\nAfter updating Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
",True
191,Write a Python program to find the list with maximum and minimum length using lambda. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)
    
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)
      
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
",True
192,Write a Python program to convert a given string to camelcase. ,"from re import sub

def camel_case(s):
  s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
  return ''.join([s[0].lower(), s[1:]])
print(camel_case('JavaScript'))
print(camel_case('Foo-Bar'))
print(camel_case('foo_bar'))
print(camel_case('--foo.bar'))
print(camel_case('Foo-BAR'))
print(camel_case('fooBAR'))
print(camel_case('foo bar'))
",True
193,Write a Python program to find common items from two lists. ,"color1 = ""Red"", ""Green"", ""Orange"", ""White""
color2 = ""Black"", ""Green"", ""White"", ""Pink""
print(set(color1) & set(color2))
",True
194,"Write a Python program to create a doubly linked list, append some items and iterate through the list (print forward). ","class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)
            
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Items in the Doubly linked list: "")
items.print_foward()
",True
195,Write a NumPy program to rearrange the dimensions of a given array. ,"import numpy as np    
x = np.arange(24).reshape((6,4))
print(""Original arrays:"")
print(x)
new_array = np.transpose(x)
print(""After reverse the dimensions:"")
print(new_array)
",True
196,Write a Pandas program to create a series of Timestamps from a DataFrame of integer or string columns. Also create a series of Timestamps using specified columns. ,"import pandas as pd
df = pd.DataFrame({'year': [2018, 2019, 2020],
                   'month': [2, 3, 4],
                   'day': [4, 5, 6],
                   'hour': [2, 3, 4]})
print(""Original dataframe:"")
print(df)
result = pd.to_datetime(df)
print(""\nSeries of Timestamps from the said dataframe:"")
print(result)
print(""\nSeries of Timestamps using specified columns:"")
print(pd.to_datetime(df[['year', 'month', 'day']]))
",True
197,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
",True
198,"Write a Python program to merge two or more lists into a list of lists, combining elements from each of the input lists based on their positions. ","def merge_lists(*args, fill_value = None):
  max_length = max([len(lst) for lst in args])
  result = []
  for i in range(max_length):
    result.append([
      args[k][i] if i < len(args[k]) else fill_value for k in range(len(args))
    ])
  return result
print(""After merging lists into a list of lists:"")
print(merge_lists(['a', 'b'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False], fill_value = '_'))
",True
199,Write a NumPy program to stack arrays in sequence horizontally (column wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.hstack((x,y))
print(""\nStack arrays in sequence horizontally:"")
print(new_array)
",True
200,rite a Python program to find the first repeated word in a given string. ,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'
print(first_repeated_word(""ab ca bc ab""))
print(first_repeated_word(""ab ca bc ab ca ab bc""))
print(first_repeated_word(""ab ca bc ca ab bc""))
print(first_repeated_word(""ab ca bc""))
",True
201,"Create a dataframe of ten rows, four columns with random values. Convert some values to nan values. Write a Pandas program which will highlight the nan values. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def color_negative_red(val):
    color = 'red' if val < 0 else 'black'
    return 'color: %s' % color
print(""\nNegative numbers red and positive numbers black:"")
df.style.highlight_null(null_color='red')
",True
202,Write a Python program to generate a number in a specified range except some specific numbers. ,"from random import choice
def generate_random(start_range, end_range, nums):
    result = choice([i for i in range(start_range,end_range) if i not in nums])
    return result
   
start_range = 1
end_range = 10
nums = [2, 9, 10]
print(""\nGenerate a number in a specified range (1, 10) except [2, 9, 10]"")
print(generate_random(start_range,end_range,nums))

start_range = -5
end_range = 5
nums = [-5,0,4,3,2]

print(""\nGenerate a number in a specified range (-5, 5) except [-5,0,4,3,2]"")
print(generate_random(start_range,end_range,nums))
",True
203,Write a Python program to add to a tag's contents in a given html document. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
print(""\nOriginal Markup:"")
print(soup.a)
soup.a.append(""CSS"")
print(""\nAfter append a text in the new link:"")
print(soup.a)
",True
204,Write a NumPy program to create an array with 10^3 elements. ,"import numpy as np
x = np.arange(1e3)
print(x)
",True
205,Write a NumPy program to suppresses the use of scientific notation for small numbers in NumPy array. ,"import numpy as np
x=np.array([1.6e-10, 1.6, 1200, .235]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(suppress=True)
print(x)
",True
206,Write a Python program to join adjacent members of a given list. ,"def test(lst):
    result = [x + y for x, y in zip(lst[::2],lst[1::2])]
    return result

nums = ['1','2','3','4','5','6','7','8']
print(""Original list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))

nums = ['1','2','3']
print(""\nOriginal list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))
",True
207,Write a Python program to compare two unordered lists (not sets). ,"from collections import Counter
def compare_lists(x, y):
    return Counter(x) == Counter(y)
n1 = [20, 10, 30, 10, 20, 30]
n2 = [30, 20, 10, 30, 20, 50]
print(compare_lists(n1, n2))
",True
208,Write a Pandas program to get the length of the string present of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
print(""Original DataFrame:"")
print(df)
print(""\nLength of the string in a column:"")
df['company_code_length'] = df['company_code'].apply(len)
print(df)
",True
209,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
",True
210,Write a Python program to cast the provided value as a list if it's not one. ,"def cast_list(val):
  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]
d1 = [1]
print(type(d1))
print(cast_list(d1)) 
d2 = ('Red', 'Green')
print(type(d2))
print(cast_list(d2)) 
d3 = {'Red', 'Green'}
print(type(d3))
print(cast_list(d3))
d4 = {1: 'Red', 2: 'Green', 3: 'Black'}
print(type(d4))
print(cast_list(d4))
",True
211,Write a Python program to convert a list of dictionaries into a list of values corresponding to the specified key. ,"def test(lsts, key):
  return [x.get(key) for x in lsts]
 
students = [
  { 'name': 'Theodore', 'age': 18 },
  { 'name': 'Mathew', 'age': 22 },
  { 'name': 'Roxanne', 'age': 20 },
  { 'name': 'David', 'age': 18 }
]

print(""Original list of dictionaries:"")
print(students)
print(""\nConvert a list of dictionaries into a list of values corresponding to the specified key:"")
print(test(students, 'age'))
",True
212,Write a Python program to get the factorial of a non-negative integer. ,"def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * (factorial(n - 1))
    
print(factorial(5))
",True
213,"Write a Pandas program to create a Pivot table and find survival rate by gender, age wise of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result  =  df.pivot_table('survived', index=['sex','age'], columns='class')
print(result)
",True
214,"Write a NumPy program to compute xy, element-wise where x, y are two given arrays. ","import numpy as np
x = np.array([[1, 2], [3, 4]])
y = np.array([[1, 2], [1, 2]])
print(""Array1: "")
print(x)
print(""Array1: "")
print(y)
print(""Result- x^y:"")
r1 = np.power(x, y)
print(r1)
",True
215,Write a Python program to search the country name from given state name using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
state1 = ""Uttar Pradesh""
print(""State Name:"",state1)
location = geolocator.geocode(state1)
print(""State Name/Country Name: "")
print(location.address)
state2 = "" Illinois""
print(""\nState Name:"",state2)
location = geolocator.geocode(state2)
print(""State Name/Country Name: "")
print(location.address)
state3 = ""Normandy""
print(""\nState Name:"",state3)
location = geolocator.geocode(state3)
print(""State Name/Country Name: "")
print(location.address) 
state4 = ""Jerusalem District""
print(""\nState Name:"",state4)
location = geolocator.geocode(state4)
print(""State Name/Country Name: "")
print(location.address)
",True
216,Write a Python program to append items from a specified list. ,"from array import *
num_list = [1, 2, 6, -8]
array_num = array('i', [])
print(""Items in the list: "" + str(num_list))
print(""Append items from the list: "")
array_num.fromlist(num_list)
print(""Items in the array: ""+str(array_num))
",True
217,Write a NumPy program to create an array of the integers from 30 to70. ,"import numpy as np
array=np.arange(30,71)
print(""Array of the integers from 30 to70"")
print(array)
",True
218,Write a Python function to check whether a number is divisible by another number. Accept two integers values form the user. ,"def multiple(m, n):
	return True if m % n == 0 else False

print(multiple(20, 5))
print(multiple(7, 2))
",True
219,Write a NumPy program to generate a matrix product of two arrays. ,"import numpy as np
x = [[1, 0], [1, 1]]
y = [[3, 1], [2, 2]]
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Matrix product of above two arrays:"")
print(np.matmul(x, y))
",True
220,Write a NumPy program to find elements within range from a given array of numbers. ,"import numpy as np
a = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])
print(""Original array:"")
print(a)
result = np.where(np.logical_and(a>=7, a<=20))
print(""\nElements within range: index position"")
print(result)
",True
221,Write a Pandas program to find which years have all non-zero values and which years have any non-zero values from world alcohol consumption dataset. ,"import pandas as pd 


w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind which years have all non-zero values:"")
print(w_a_con.loc[:,w_a_con.all()])
print(""\nFind which years have any non-zero values:"")
print(w_a_con.loc[:,w_a_con.any()])
",True
222,Write a Pandas program to generate sequences of fixed-frequency dates and time spans intervals. ,"import pandas as pd
print(""Sequences of fixed-frequency dates and time spans (1 H):\n"")
r1 = pd.date_range('2030-01-01', periods=10, freq='H')
print(r1)
print(""\nSequences of fixed-frequency dates and time spans (3 H):\n"")
r2 = pd.date_range('2030-01-01', periods=10, freq='3H')
print(r2)
",True
223,Write a Python program to display a number with a comma separator. ,"x = 3000000
y = 30000000
print(""\nOriginal Number: "", x)
print(""Formatted Number with comma separator: ""+""{:,}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with comma separator: ""+""{:,}"".format(y));
print()
",True
224,"Write a NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not. ","import numpy as np
a = [[1, 2], [3, 4]]
x = np.array(a)
a2 = x.tolist()
print(a == a2)
",True
225,Write a Python program to reverse a string. ,"def string_reverse(str1):

    rstr1 = ''
    index = len(str1)
    while index > 0:
        rstr1 += str1[ index - 1 ]
        index = index - 1
    return rstr1
print(string_reverse('1234abcd'))
",True
226,Write a Pandas program to find integer index of rows with missing data in a given dataframe. ,"import pandas as pd
import numpy as np
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, None, 33, 30, 31, None]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
index = df['weight'].index[df['weight'].apply(np.isnan)]
df_index = df.index.values.tolist()
print(""\nInteger index of rows with missing data in 'weight' column of the said dataframe:"")
print([df_index.index(i) for i in index])
",True
227,Write a Python program to combine each line from first file with the corresponding line in second file. ,"with open('abc.txt') as fh1, open('test.txt') as fh2:
    for line1, line2 in zip(fh1, fh2):
        
        print(line1+line2)
		",True
228,Write a Python program to pair up the consecutive elements of a given list. ,"def pair_consecutive_elements(lst):
    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]
    return result
nums =  [1,2,3,4,5,6]
print(""Original lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
nums =  [1,2,3,4,5]
print(""\nOriginal lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
",True
229,Write a Pandas program to create a Pivot table and find survival of both gender and class affected. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()
print(result)
",True
230,Write a Python program to find the maximum and minimum product from the pairs of tuple within a given list. ,"def tuple_max_val(nums):
    result_max = max([abs(x * y) for x, y in nums] )
    result_min = min([abs(x * y) for x, y in nums] )
    return result_max,result_min
nums = [(2, 7), (2, 6), (1, 8), (4, 9)]   
print(""The original list, tuple : "") 
print(nums)
print(""\nMaximum and minimum product from the pairs of the said tuple of list:"")
print(tuple_max_val(nums)) 
",True
231,Write a Python program to interleave multiple lists of the same length. Use itertools module. ,"import itertools

def interleave_multiple_lists(list1,list2,list3):
    result = list(itertools.chain(*zip(list1, list2, list3)))
    return result
     
list1 = [100,200,300,400,500,600,700]
list2 = [10,20,30,40,50,60,70]
list3 = [1,2,3,4,5,6,7]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
",True
232,"Write a NumPy program to extract rows with unequal values (e.g. [1,1,2]) from 10x3 matrix. ","import numpy as np
nums = np.random.randint(0,4,(6,3))
print(""Original vector:"")
print(nums)
new_nums = np.logical_and.reduce(nums[:,1:] == nums[:,:-1], axis=1)
result = nums[~new_nums]
print(""\nRows with unequal values:"")
print(result)
",True
233,Write a Python script that takes input from the user and displays that input back in upper and lower cases. ,"user_input = input(""What's your favourite language? "")
print(""My favourite language is "", user_input.upper())
print(""My favourite language is "", user_input.lower())
",True
234,Write a Python program to find the siblings of tags in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nSiblings of tags:"")
print(soup.select(""#link1 ~ .sister""))
print(soup.select(""#link1 + .sister""))
",True
235,Write a Python program to extract and display all the image links from en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer). ,"import requests
r = requests.get(""https://analytics.usa.gov/data/live/browsers.json"")
print(""90 days of visits broken down by browser for all sites:"")
print(r.json()['totals']['browser'])
",True
236,Write a NumPy program to add a new row to an empty NumPy array. ,"import numpy as np    
arr = np.empty((0,3), int)
print(""Empty array:"")
print(arr)
arr = np.append(arr, np.array([[10,20,30]]), axis=0)
arr = np.append(arr, np.array([[40,50,60]]), axis=0)
print(""After adding two new arrays:"")
print(arr)
",True
237,Write a Python program to find the href of the first <a> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""href of the first <a> tag:"")
print(soup.find('a').attrs['href'])

",True
238,Write a Python program to convert an integer to binary keep leading zeros. ,"x = 12
print(format(x, '08b'))
print(format(x, '010b'))
",True
239,Write a Python program to reverse strings in a given list of string values using lambda. ,"def reverse_strings_list(string_list):
    result = list(map(lambda x: """".join(reversed(x)), string_list))
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
",True
240,Write a NumPy program to count the frequency of unique values in NumPy array. ,"import numpy as np
a = np.array( [10,10,20,10,20,20,20,30, 30,50,40,40] )
print(""Original array:"")
print(a)
unique_elements, counts_elements = np.unique(a, return_counts=True)
print(""Frequency of unique values of the said array:"")
print(np.asarray((unique_elements, counts_elements)))
",True
241,"Write a NumPy program to calculate the difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
r1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])
r2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])
assert np.array_equiv(r1, r2)
print(""Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:"")
print(r2)
",True
242,Write a Python program to calculate the area of the sector. ,"def sectorarea():
    pi=22/7
    radius = float(input('Radius of Circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    sur_area = (pi*radius**2) * (angle/360)
    print(""Sector Area: "", sur_area)

sectorarea()
",True
243,"Write a NumPy program to print the full NumPy array, without truncation. ","import numpy as np
import sys
nums = np.arange(2000)
np.set_printoptions(threshold=sys.maxsize)
print(nums)
",True
244,Write a Python program to extract all the text from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""Text from the said page:"")
print(soup.get_text())

",True
245,Write a Python program to convert given a dictionary to a list of tuples. ,"def test(d):
  return list(d.items())
 
d = {'Red': 1, 'Green': 3, 'White': 5, 'Black': 2, 'Pink': 4}
print(""Original Dictionary:"")
print(d)
print(""\nConvert the said dictionary to a list of tuples:"")
print(test(d))
",True
246,Write a Pandas program to select rows by filtering on one or more column(s) in a multi-index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32],
    'tcode': ['t1', 't2', 't3', 't4', 't5', 't6']})    
print(""Original DataFrame:"")
print(df)
print(""\nCreate MultiIndex on 'tcode' and 'school_code':"")
df = df.set_index(['tcode', 'school_code'])
print(df)
print(""\nSelect rows(s) from 'tcode' column:"")
print(df.query(""tcode == 't2'""))
print(""\nSelect rows(s) from 'school_code' column:"")
print(df.query(""school_code == 's001'""))
print(""\nSelect rows(s) from 'tcode' and 'scode' columns:"")
print(df.query((""tcode == 't1'"") and (""school_code == 's001'"")))
",True
247,Write a Python program to find smallest and largest word in a given string. ,"def smallest_largest_words(str1):
    word = """";
    all_words = [];
    str1 = str1 + "" "";
    for i in range(0, len(str1)):
        if(str1[i] != ' '):
            word = word + str1[i];  
        else:
            all_words.append(word);  
            word = """";  
          
    small = large = all_words[0];  
   

    for k in range(0, len(all_words)):
        if(len(small) > len(all_words[k])):
            small = all_words[k];
        if(len(large) < len(all_words[k])):
            large = all_words[k];
    return small,large;

str1 = ""Write a Java program to sort an array of given integers using Quick sort Algorithm."";  
print(""Original Strings:\n"",str1)
small, large = smallest_largest_words(str1)  
print(""Smallest word: "" + small);  
print(""Largest word: "" + large); 
",True
248,Write a Python program to find the length of a given dictionary values. ,"def test(dictt):
    result = {}
    for val in dictt.values(): 
        result[val] = len(val) 
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))
",True
249,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
",True
250,Write a Pandas program to extract words starting with capital words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_capital_word(str1):
    result = re.findall(r'\b[A-Z]\w+', str1)
    return result

df['caps_word_in']=df['address'].apply(lambda cw : find_capital_word(cw))
print(""\nExtract words starting with capital words from the sentences':"")
print(df)
",True
251,Write a Python program to join one or more path components together and split a given path in directory and file. ,"import os
path = r'g:\\testpath\\a.txt'
print(""Original path:"")
print(path)
print(""\nDir and file name of the said path:"")
print(os.path.split(path))
print(""\nJoin one or more path components together:"")
print(os.path.join(r'g:\\testpath\\','a.txt'))
",True
252,"Write a Python program to randomize the order of the values of an list, returning a new list. ","from copy import deepcopy
from random import randint
def shuffle_list(lst):
  temp_lst = deepcopy(lst)
  m = len(temp_lst)
  while (m):
    m -= 1
    i = randint(0, m)
    temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]
  return temp_lst
nums = [1, 2, 3, 4, 5, 6]
print(""Original list: "",nums)
print(""\nShuffle the elements of the said list:"")
print(shuffle_list(nums))
",True
253,Write a Python program to count the same pair in three given lists. ,"def count_same_pair(nums1, nums2, nums3):
    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))
    return result
nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
nums3 = [2,1,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nNumber of same pair of the said three given lists:"")
print(count_same_pair(nums1, nums2, nums3))
",True
254,Write a Pandas program to create a Pivot table with multiple indexes from the data set of titanic.csv. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.pivot_table(df, index = [""sex"",""age""], aggfunc=np.sum)
print(result)
",True
255,Write a Python program to get the volume of a sphere with radius 6.,"
pi = 3.1415926535897931
r= 6.0
V= 4.0/3.0*pi* r**3
print('The volume of the sphere is: ',V)
",True
256,"Write a Python program to traverse a given list in reverse order, also print the elements with original index. ","color = [""red"", ""green"", ""white"", ""black""]
print(""Original list:"")
print(color)
print(""\nTraverse the said list in reverse order:"")
for i in reversed(color):
    print(i)
print(""\nTraverse the said list in reverse order with original index:"")
for i, el in reversed(list(enumerate(color))):
    print(i, el) 
",True
257,"Write a NumPy program to create an array of zeros and three column types (integer, float, character). ","import numpy as np
x = np.zeros((3,), dtype=('i4,f4,a40'))
new_data = [(1, 2., ""Albert Einstein""), (2, 2., ""Edmond Halley""), (3, 3., ""Gertrude B. Elion"")]
x[:] = new_data
print(x)
",True
258,Write a NumPy program to stack 1-D arrays as row wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.row_stack((x, y))
print(""\nStack 1-D arrays as rows wise:"")
print(new_array)
",True
259,Write a Pandas program to add 100 days with reporting date of unidentified flying object (UFO). ,"import pandas as pd
from datetime import timedelta
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nAdd 100 days with reporting date:"")
df['New_doc_dt'] = df['Date_time'] + timedelta(days=180)
print(df)
",True
260,Write a NumPy program to compute numerical negative value for all elements in a given array. ,"import numpy as np
x = np.array([0, 1, -1])
print(""Original array: "")
print(x)
r1 = np.negative(x)
r2 = -x
assert np.array_equal(r1, r2)
print(""Numerical negative value for all elements of the said array:"")
print(r1)
",True
261,Write a Python program to sort each sublist of strings in a given list of lists using lambda. ,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
",True
262,Write a Python program to generate the combinations of n distinct objects taken from the elements of a given list. ,"def combination(n, n_list):
    if n<=0:
        yield []
        return
    for i in range(len(n_list)):
        c_num = n_list[i:i+1]
        for a_num in combination(n-1, n_list[i+1:]):
            yield c_num + a_num
n_list = [1,2,3,4,5,6,7,8,9]
print(""Original list:"") 
print(n_list)
n = 2
result = combination(n, n_list)
print(""\nCombinations of"",n,""distinct objects:"")
for e in result:
     print(e)

",True
263,Write a Python program to find all index positions of the maximum and minimum values in a given list of numbers. ,"def position_max_min(nums):
    max_val = max(nums)
    min_val = min(nums)
    max_result = [i for i, j in enumerate(nums) if j == max_val]
    min_result = [i for i, j in enumerate(nums) if j == min_val]
    return max_result,min_result

nums = [12,33,23,10,67,89,45,667,23,12,11,10,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex positions of the maximum value of the said list:"")
print(result[0])
print(""\nIndex positions of the minimum value of the said list:"")
print(result[1])
",True
264,Write a NumPy program to get the powers of an array values element-wise. ,"import numpy as np
x = np.arange(7)
print(""Original array"")
print(x)
print(""First array elements raised to powers from second array, element-wise:"")
print(np.power(x, 3))
",True
265,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
",True
266,Write a NumPy program to create display every element of a NumPy array. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
for x in np.nditer(x):
    print(x,end=' ')
print()
",True
267,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date> 01-01-07. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df[df['hire_date'] >='20070101']
",True
268,Write a NumPy program to create a 2d array with 1 on the border and 0 inside. ,"import numpy as np
x = np.ones((5,5))
print(""Original array:"")
print(x)
print(""1 on the border and 0 inside in the array"")
x[1:-1,1:-1] = 0
print(x)
",True
269,Write a NumPy program to get the n largest values of an array. ,"import numpy as np
x = np.arange(10)
print(""Original array:"")
print(x)
np.random.shuffle(x)
n = 1
print (x[np.argsort(x)[-n:]])
",True
270,Write a Python program to find numbers within a given range where every number is divisible by every digit it contains. ,"def divisible_by_digits(start_num, end_num):
    return [n for n in range(start_num, end_num+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
print(divisible_by_digits(1,22))
",True
271,Write a Python program to extract h1 tag from example.com. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://en.wikipedia.org/wiki/Main_Page')
bs = BeautifulSoup(html, ""html.parser"")
titles = bs.find_all(['h1', 'h2','h3','h4','h5','h6'])
print('List all the header tags :', *titles, sep='\n\n')
",True
272,Write a Python program to remove a specified item using the index from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Remove the third item form the array:"")
array_num.pop(2)
print(""New array: ""+str(array_num))
",True
273,Write a Python program to sort a given list of lists by length and value using lambda. ,"def sort_sublists(input_list):
    result = sorted(input_list, key=lambda l: (len(l), l))
    return result
list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
",True
274,Write a Python program to find the index position of the largest value smaller than a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left  
def Binary_Search(l, x): 
    i = bisect_left(l, x) 
    if i: 
        return (i-1) 
    else: 
        return -1  
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 5 
num_position  = Binary_Search(nums, x) 
if num_position  == -1: 
    print(""Not found..!"") 
else: 
    print(""Largest value smaller than "", x, "" is at index "", num_position )
",True
275,Write a NumPy program to get a copy of a matrix with the elements below the k-th diagonal zeroed. ,"import numpy as np
result  = np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)
print(""\nCopy of a matrix with the elements below the k-th diagonal zeroed:"")
print(result)
",True
276,"Write a Python program which iterates the integers from 1 to 50. For multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers which are multiples of both three and five print ""FizzBuzz"".","for fizzbuzz in range(51):
    if fizzbuzz % 3 == 0 and fizzbuzz % 5 == 0:
        print(""fizzbuzz"")
        continue
    elif fizzbuzz % 3 == 0:
        print(""fizz"")
        continue
    elif fizzbuzz % 5 == 0:
        print(""buzz"")
        continue
    print(fizzbuzz)
	",True
277,"Write a Python program to get a list with n elements removed from the left, right. ","def drop_left_right(a, n = 1):
  return a[n:], a[:-n] 
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 1 element from left of the said list:"")
print(result[0])
print(""Remove 1 element from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums,2)
print(""Remove 2 elements from left of the said list:"")
print(result[0])
print(""Remove 2 elements from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4, 5, 6]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 7 elements from left of the said list:"")
print(result[0])
print(""Remove 7 elements from right of the said list:"")
print(result[1])
",True
278,Write a Python program to list the tables of given SQLite database file. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()

   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   cursorObj.execute(""CREATE TABLE temp_agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""List of tables:"")
   cursorObj.execute(""SELECT name FROM sqlite_master WHERE type='table';"")
   print(cursorObj.fetchall())
   conn.commit()
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
",True
279,"Write a Python program to split values into two groups, based on the result of the given filter list. ","def bifurcate(colors, filter):
  return [
    [x for x, flag in zip(colors, filter) if flag],
    [x for x, flag in zip(colors, filter) if not flag]
  ]
print(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))
",True
280,Write a Python program to store a given dictionary in a json file. ,"d = {""students"":[{""firstName"": ""Nikki"", ""lastName"": ""Roysden""},
               {""firstName"": ""Mervin"", ""lastName"": ""Friedland""},
               {""firstName"": ""Aron "", ""lastName"": ""Wilkins""}],
""teachers"":[{""firstName"": ""Amberly"", ""lastName"": ""Calico""},
         {""firstName"": ""Regine"", ""lastName"": ""Agtarap""}]}
print(""Original dictionary:"")
print(d)
print(type(d))
import json
 
with open(""dictionary"", ""w"") as f:
   json.dump(d, f, indent = 4, sort_keys = True)
 
print(""\nJson file to dictionary:"")
with open('dictionary') as f:
 data = json.load(f)
print(data)
",True
281,Write a Python program to add two objects if both objects are an integer type. ,"def add_numbers(a, b):
   if not (isinstance(a, int) and isinstance(b, int)):
       return ""Inputs must be integers!""
   return a + b
print(add_numbers(10, 20))
print(add_numbers(10, 20.23))
print(add_numbers('5', 6))
print(add_numbers('5', '6'))
",True
282,Write a Python program to count the number of items of a given doubly linked list. ,"class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1


items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Number of items of the  Doubly linked list:"",items.count)
",True
283,Write a Pandas program to combine the columns of two potentially differently-indexed DataFrames into a single result DataFrame. ,"import pandas as pd
data1 = pd.DataFrame({'A': ['A0', 'A1', 'A2'],
                      'B': ['B0', 'B1', 'B2']},
                     index=['K0', 'K1', 'K2'])

data2 = pd.DataFrame({'C': ['C0', 'C2', 'C3'],
                      'D': ['D0', 'D2', 'D3']},
                     index=['K0', 'K2', 'K3'])
 
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (Joining on index):"")
result = data1.join(data2)
print(result)
",True
284,Write a Python program to count number of items in a dictionary value that is a list. ,"dict =  {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}
ctr = sum(map(len, dict.values()))
print(ctr)
",True
285,Write a Python program to find the elements of a given list of strings that contain specific substring using lambda. ,"def find_substring(str1, sub_str):
    result = list(filter(lambda x: sub_str in x, str1))
    return result
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)

sub_str = ""ack""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
",True
286,Write a Pandas program to generate holidays between two dates using the US federal holiday calendar. ,"import pandas as pd
from pandas.tseries.holiday import *
sdt = datetime(2021, 1, 1)
edt = datetime(2030, 12, 31)
print(""Holidays between 2021-01-01 and 2030-12-31 using the US federal holiday calendar."")
cal = USFederalHolidayCalendar()
for dt in cal.holidays(start=sdt, end=edt): 
    print (dt)
",True
287,Write a NumPy program to get all 2D diagonals of a 3D NumPy array. ,"import numpy as np
np_array = np.arange(3*4*5).reshape(3,4,5)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
result = np.diagonal(np_array, axis1=1, axis2=2)
print(""\n2D diagonals: "")
print(result)
print(""Type: "",type(result))
",True
288,Write a Python program to solve the Fibonacci sequence using recursion. ,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))

print(fibonacci(7))
",True
289,Write a NumPy program to access an array by column. ,"import numpy as np
x= np.arange(9).reshape(3,3)
print(""Original array elements:"")
print(x)
print(""Access an array by column:"")
print(""First column:"")
print(x[:,0])
print(""Second column:"")
print(x[:,1])
print(""Third column:"")
print(x[:,2])
",True
290,Write a Python program to get the sum of a non-negative integer. ,"def sumDigits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sumDigits(int(n / 10))

print(sumDigits(345))
print(sumDigits(45))
",True
291,Write a NumPy program to create and display every element of a NumPy array in Fortran order. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
print(""Elements of the array in Fortan array:"")
for x in np.nditer(x, order=""F""):
    print(x,end=' ')
print(""\n"")
",True
292,Write a Python program to check whether a specified list is sorted or not. ,"def is_sort_list(nums):
    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))
    return result

nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 

nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
",True
293,Write a NumPy program to create a 3x3 identity matrix. ,"import numpy as np
array_2D=np.identity(3)
print('3x3 matrix:')
print(array_2D)
",True
294,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
",True
295,Write a Python program to remove the first occurrence of a specified element from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
print(""Remove the first occurrence of 3 from the said array:"")
array_num.remove(3)
print(""New array: ""+str(array_num))
",True
297,Write a Python program to calculate the sum of the positive and negative numbers of a given list of numbers using lambda function. ,"nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]
print(""Original list:"",nums)

total_negative_nums = list(filter(lambda nums:nums<0,nums))
total_positive_nums = list(filter(lambda nums:nums>0,nums))

print(""Sum of the positive numbers: "",sum(total_negative_nums))
print(""Sum of the negative numbers: "",sum(total_positive_nums))
",True
298,"Write a Pandas program to split the following dataframe into groups, group by month and year based on order date and find the total purchase amount year wise, month wise. ","import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2013','08-17-2013','10-09-2013','07-27-2014','10-09-2012','10-10-2012','10-10-2012','06-17-2014','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nYear wise Month wise purchase amount:"")
result = df.groupby([df['ord_date'].dt.year, df['ord_date'].dt.month]).agg({'purch_amt':sum})
print(result)
",True
299,Write a Python code to create a program for Bitonic Sort. ,"





def compAndSwap(a, i, j, dire):
    if (dire == 1 and a[i] > a[j]) or (dire == 0 and a[i] < a[j]):
        a[i], a[j] = a[j], a[i]
        



def bitonicMerge(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        for i in range(low, low + k):
            compAndSwap(a, i, i + k, dire)
        bitonicMerge(a, low, k, dire)
        bitonicMerge(a, low + k, k, dire)

        




def bitonicSort(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        bitonicSort(a, low, k, 1)
        bitonicSort(a, low + k, k, 0)
        bitonicMerge(a, low, cnt, dire)

        



def sort(a, N, up):
    bitonicSort(a, 0, N, up)



a = []
print(""How many numbers u want to enter?"");
n = int(input())
print(""Input the numbers:"");
for i in range(n):
    a.append(int(input()))
up = 1

sort(a, n, up)
print(""\n\nSorted array is:"")
for i in range(n):
    print(""%d"" % a[i])
",True
300,Write a Python program to get the cumulative sum of the elements of a given list. ,"from itertools import accumulate
def cumsum(lst):
  return list(accumulate(lst))
nums = [1,2,3,4]
print(""Original list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums)) 
nums = [-1,-2,-3,4]
print(""\nOriginal list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums))
",True
301,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.tri(4, 3, -1)
print(x)
",True
302,Write a Python program to extract common index elements from more than one given list. ,"def extract_index_ele(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result

nums1 = [1, 1, 3, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 5, 7]
nums3 = [0, 1, 2, 3, 4, 5, 7]

print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nCommon index elements of the said lists:"") 
print(extract_index_ele(nums1, nums2, nums3))
",True
303,Write a Pandas program to check if a specified value exists in single and multiple column index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame with single index:"")
print(df)
print(""\nCheck a value is exist in single column index dataframe:"")
print('t1' in df.index)
print('t11' in df.index)
print(""\nCreate MultiIndex using columns 't_id', ‘school_code’ and 'class':"")
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nCheck a value is exist in multiple columns index dataframe:"")
print('t4' in df1.index.levels[0])
print('t4' in df1.index.levels[1])
print('t4' in df1.index.levels[2])
",True
304,Write a Python program to count the elements in a list until an element is a tuple. ,"num = [10,20,30,(10,20),40]
ctr = 0
for n in num:
    if isinstance(n, tuple):
        break
    ctr += 1
print(ctr)
",True
305,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=20)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
",True
306,Write a Python program to add a number to each element in a given list of numbers. ,"def add_val_to_list(lst, add_val):
    result = lst
    result = [x+add_val for x in result]   
    return result    
nums = [3,8,9,4,5,0,5,0,3]
print(""Original lists:"")
print(nums)
add_val = 3
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
nums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]
print(""\nOriginal lists:"")
print(nums)
add_val = .51
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
",True
307,Write a Python program to create a multidimensional list (lists of lists) with zeros. ,"nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
",True
308,Write a Pandas program to find the positions of numbers that are multiples of 5 of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.random.randint(1, 10, 9))
print(""Original Series:"")
print(num_series)
result = np.argwhere(num_series % 5==0)
print(""Positions of numbers that are multiples of 5:"")
print(result)
",True
309,Write a Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2. ,"def substring_copy(str, n):
  flen = 2
  if flen > len(str):
    flen = len(str)
  substr = str[:flen]
  
  result = """"
  for i in range(n):
    result = result + substr
  return result
print(substring_copy('abcdef', 2))
print(substring_copy('p', 3));
",True
310,"Write a NumPy program to partition a given array in a specified position and move all the smaller elements values to the left of the partition, and the remaining values to the right, in arbitrary order (based on random choice). ","import numpy as np
nums = np.array([70, 50, 20, 30, -11, 60, 50, 40])
print(""Original array:"")
print(nums)
print(""\nAfter partitioning on 4 the position:"")
print(np.partition(nums, 4))
",True
311,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise where Manager = ""Douglas"". ","import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"")
print(table.query('Manager == [""Douglas""]'))
",True
312,Write a Python program to check whether a specified list is sorted or not using lambda. ,"def is_sort_list(nums, key=lambda x: x):
    for i, e in enumerate(nums[1:]):
        if key(e) < key(nums[i]): 
            return False
    return True
nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 
nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
",True
313,Write a Python program to rotate a Deque Object specified number (positive) of times. ,"import collections

dq_object = collections.deque()

dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)

dq_object.rotate()
print(""\nDeque after 1 positive rotation:"")
print(dq_object)

dq_object.rotate(2)
print(""\nDeque after 2 positive rotations:"")
print(dq_object)
",True
314,"Write a Python code to send a request to a web page and stop waiting for a response after a given number of seconds. In the event of times out of request, raise Timeout exception. ","import requests
print(""timeout = 0.001"")
try:
    r = requests.get('https://github.com/', timeout = 0.001)
    print(r.text)
except requests.exceptions.RequestException as e:
    print(e)    

print(""\ntimeout = 1.0"")    
try:
    r = requests.get('https://github.com/', timeout = 1.0)
    print(""Connected....!"")
except requests.exceptions.RequestException as e:
    print(e)
",True
315,Write a Python program to create a doubly linked list and print nodes from current position to first node. ,"class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev
	
class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)

    def print_backward(self):
        current = self.tail
        while current:
            print(current.data)
            current = current.prev
            
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Print Items in the Doubly linked backwards:"")
items.print_backward()
",True
316,Write a Pandas program to convert a specified character column in title case in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nTitle cases:"")
df['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))
print(df)
",True
317,Write a Pandas program to convert given series into a dataframe with its index as another column on the dataframe. ,"import numpy as np
import pandas as pd
char_list = list('ABCDEFGHIJKLMNOP')
num_arra = np.arange(8)
num_dict = dict(zip(char_list, num_arra))
num_ser = pd.Series(num_dict)
df = num_ser.to_frame().reset_index()
print(df.head())
",True
318,Write a NumPy program to make all the elements of a given string to a numeric string of 5 digits with zeros on its left. ,"import numpy as np
x = np.array(['2', '11', '234', '1234', '12345'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.zfill(x, 5)
print(""\nNumeric string of 5 digits with zeros:"")
print(r) 
",True
319,Write a Python program to create a list with the unique values filtered out. ,"from collections import Counter
def filter_unique(lst):
  return [item for item, count in Counter(lst).items() if count > 1] 
print(filter_unique([1, 2, 2, 3, 4, 4, 5]))
",True
320,Write a Python program to set a random seed and get a random number between 0 and 1. Use random.random. ,"import random 
print(""Set a random seed and get a random number between 0 and 1:"")
random.seed(0)
new_random_value = random.random()
print(new_random_value)
random.seed(1)
new_random_value = random.random()
print(new_random_value)
random.seed(2)
new_random_value = random.random()
print(new_random_value)
",True
321,"Create an array (a) of shape 3, 4, 8 (K=3, J=4, I=8). tidx is an array of the same length as a.shape[1], i.e. contains J = 4 elements where each index denotes which element of K should be chosen.","import numpy as np
a = np.random.randint(0, 10, (3, 4, 8))
print(""Original array and shape:"")
print(a)
print(a.shape)
print(""--------------------------------"")
tidx = np.random.randint(0, 3, 4)
print(""tidex: "",tidx)
print(""Result:"")
print(a[tidx, np.arange(len(tidx)),:])
",True
322,"Write a Pandas program to split a given dataset, group by one column and apply an aggregate function to few columns and another aggregate function to the rest of the columns of the dataframe. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6],
'sale_feb':[250.5, 170.65, 15.26, 110.5, 598.5, 1400.6, 2760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_mar':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_apr':[150.5, 270.65, 95.26, 210.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_may':[130.5, 270.65, 65.26, 310.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jun':[150.5, 270.65, 45.26, 110.5, 948.5, 3400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jul':[950.5, 270.65, 65.26, 210.5, 948.5, 2400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_aug':[150.5, 70.65,  65.26, 110.5, 948.5, 400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_sep':[150.5, 270.65, 65.26, 110.5, 948.5, 200.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_oct':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_nov':[150.5, 270.65, 95.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], 
'sale_dec':[150.5, 70.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6]
})
print(""Original Orders DataFrame:"")
print(df)
print(""\Result after group on salesman_id and apply different aggregate functions:"")
df = df.groupby('salesman_id').agg(lambda x : x.sum() if x.name in ['sale_jan','sale_feb','sale_mar'] else x.mean())
print(df)
",True
323,Write a NumPy program (using NumPy) to sum of all the multiples of 3 or 5 below 100. ,"import numpy as np
x = np.arange(1, 100)

n= x[(x % 3 == 0) | (x % 5 == 0)]
print(n[:1000])

print(n.sum())
",True
324,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Labor Hours"" > 20000. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Labor_Hours""] > 20000].head()
",True
325,Write a Python program to iterate a given list cyclically on specific index position. ,"def cyclically_iteration(lst,spec_index):
    result = []
    length = len(lst)
    for i in range(length):
        element_index = spec_index % length
        result.append(lst[element_index])
        spec_index += 1
    return result

chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
print(""Original list:"")
print(chars)
spec_index = 3
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
spec_index = 5
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
",True
326,Write a Pandas program to interpolate the missing values using the Linear Interpolation method in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nInterpolate the missing values using the Linear Interpolation method (purch_amt):"")
df['purch_amt'].interpolate(method='linear', direction = 'forward', inplace=True) 
print(df)
",True
327,Write a Python program to read a random line from a file. ,"import random
def random_line(fname):
    lines = open(fname).read().splitlines()
    return random.choice(lines)
print(random_line('test.txt'))
",True
328,Write a Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder. ,"area = 1256.66
volume = 1254.725
decimals = 2
print(""The area of the rectangle is {0:.{1}f}cm\u00b2"".format(area, decimals))
decimals = 3
print(""The volume of the cylinder is {0:.{1}f}cm\u00b3"".format(volume, decimals))
",True
329,Write a NumPy program compare two given arrays. ,"import numpy as np
a = np.array([1, 2])
b = np.array([4, 5])
print(""Array a: "",a)
print(""Array b: "",b)
print(""a > b"")
print(np.greater(a, b))
print(""a >= b"")
print(np.greater_equal(a, b))
print(""a < b"")
print(np.less(a, b))
print(""a <= b"")
print(np.less_equal(a, b))
",True
330,Write a Pandas program to split the following given dataframe into groups based on school code and call a specific group with the name of the group. ,"import pandas as pd
pd.set_option('display.max_rows', None)

student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped = student_data.groupby(['school_code'])
print(""Call school code 's001':"")
print(grouped.get_group('s001'))
print(""\nCall school code 's004':"")
print(grouped.get_group('s004'))
",True
331,Write a Python program to compute the sum of digits of each number of a given list of positive integers. ,"from itertools import chain
def sum_of_digits(nums):
    return sum(int(y) for y in (chain(*[str(x) for x in nums])))

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
",True
333,Write a Python program to interleave two given list into another list randomly. ,"import random
def randomly_interleave(nums1, nums2):
    result =  [x.pop(0) for x in random.sample([nums1]*len(nums1) + [nums2]*len(nums2), len(nums1)+len(nums2))]
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
",True
334,"Given variables x=30 and y=20, write a Python program to print ""30+20=50"". ","x = 30
y = 20
print(""\n%d+%d=%d"" % (x, y, x+y))
print()
",True
335,Write a Python program to find the characters in a list of strings which occur more than and less than a given number. ,"from collections import Counter 
from itertools import chain 
def max_aggregate(list_str, N):
    temp = (set(sub) for sub in list_str) 
    counts = Counter(chain.from_iterable(temp)) 
    gt_N =  [chr for chr, count in counts.items() if count > N]
    lt_N =  [chr for chr, count in counts.items() if count < N]
    return gt_N, lt_N
     
list_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd'] 
print(""Original list:"")
print(list_str)
N = 3
result = max_aggregate(list_str, N)
print(""\nCharacters of the said list of strings which occur more than:"",N)
print(result[0])
print(""\nCharacters of the said list of strings which occur less than:"",N)
print(result[1])
",True
336,Write a NumPy program to add two zeros to the beginning of each element of a given array of string values. ,"import numpy as np 

nums = np.array(['1.12', '2.23', '3.71', '4.23', '5.11'], dtype=np.str)
print(""Original array:"")
print(nums)
print(""\nAdd two zeros to the beginning of each element of the said array:"")
print(np.char.add('00', nums))
print(""\nAlternate method:"")
print(np.char.rjust(nums, 6, fillchar='0'))
",True
337,Write a NumPy program to count the occurrence of a specified item in a given NumPy array. ,"import numpy as np
nums = np.array([10, 20, 20, 20, 20, 0, 20, 30, 30, 30, 0, 0, 20, 20, 0])
print(""Original array:"")
print(nums)
print(np.count_nonzero(nums == 10))
print(np.count_nonzero(nums == 20))
print(np.count_nonzero(nums == 30))
print(np.count_nonzero(nums == 0))
",True
338,Write a Python program to sort a given positive number in descending/ascending order. ,"def test_dsc(n):
    return int(''.join(sorted(str(n), reverse = True)))

def test_asc(n):
    return int(''.join(sorted(list(str(n))))[::1])

n = 134543
print(""Original Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
n = 43750973
print(""\nOriginal Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
",True
339,Write a Python program to check whether a string contains all letters of the alphabet. ,"import string
alphabet = set(string.ascii_lowercase)
input_string = 'The quick brown fox jumps over the lazy dog'
print(set(input_string.lower()) >= alphabet)
input_string = 'The quick brown fox jumps over the lazy cat'
print(set(input_string.lower()) >= alphabet)
",True
340,Write a Python program to delete a specific item from a given doubly linked list. ,"class Node(object):
    
    def __init__(self, value=None, next=None, prev=None):
        self.value = value
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, value):
        
        new_item = Node(value, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.value
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False
     
    def delete(self, value):
        
        current = self.head
        node_deleted = False
        if current is None:
            node_deleted = False

        elif current.value == value:
            self.head = current.next
            self.head.prev = None
            node_deleted = True

        elif self.tail.value == value:
            self.tail = self.tail.prev
            self.tail.next = None
            node_deleted = True

        else:
            while current:
                if current.value == value:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                    node_deleted = True
                current = current.next

        if node_deleted:
            self.count -= 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()

items.delete(""Java"")
items.delete(""Python"")
print(""\nList after deleting two items:"")
items.print_foward()
",True
341,Write a NumPy program to convert a list and tuple into arrays. ,"import numpy as np
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""List to array: "")
print(np.asarray(my_list))
my_tuple = ([8, 4, 6], [1, 2, 3])
print(""Tuple to array: "")
print(np.asarray(my_tuple))
",True
342,Write a Pandas program to create a plot of distribution of UFO (unidentified flying object) observation time. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['duration_sec'] = (df['length_of_encounter_seconds'].astype(float))/60
s = df[""duration_sec""].quantile(0.95)
temp = df['duration_sec']
temp = temp.sort_values()
temp = temp[temp < s]
plt.figure(figsize=(10, 8))
sns.distplot(temp)
plt.xlabel('Duration(min)', fontsize=20)
plt.ylabel(""Frequency"", fontsize=15)
plt.xticks(fontsize=12)
plt.title(""-Distribution of UFO obervation time-"", fontsize=20)
plt.show()
",True
343,"Write a NumPy program to find the union of two arrays. Union will return the unique, sorted array of values that are in either of the two input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique sorted array of values that are in either of the two input arrays:"")
print(np.union1d(array1, array2))
",True
344,Write a Python program to sum all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
print(sum(my_dict.values()))
",True
345,"Write a Python program to find the ration of positive numbers, negative numbers and zeroes in an array of integers. ","from array import array

def plusMinus(nums):
    n = len(nums)
    n1 = n2 = n3 = 0
    
    for x in nums:
        if x > 0:
            n1 += 1
        elif x < 0:
            n2 += 1
        else:
            n3 += 1
            
    return round(n1/n,2), round(n2/n,2), round(n3/n,2)

nums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
nums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])
print(""\nOriginal array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
",True
346,Write a Python program to sort a list of elements using the selection sort algorithm. ,"def selectionSort(nlist):
   for fillslot in range(len(nlist)-1,0,-1):
       maxpos=0
       for location in range(1,fillslot+1):
           if nlist[location]>nlist[maxpos]:
               maxpos = location

       temp = nlist[fillslot]
       nlist[fillslot] = nlist[maxpos]
       nlist[maxpos] = temp

nlist = [14,46,43,27,57,41,45,21,70]
selectionSort(nlist)
print(nlist)
",True
347,Write a Python program to interleave multiple lists of the same length. ,"def interleave_multiple_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result
     
list1 = [1,2,3,4,5,6,7]
list2 = [10,20,30,40,50,60,70]
list3 = [100,200,300,400,500,600,700]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
",True
348,"Write a Python program to combines two or more dictionaries, creating a list of values for each key. ","from collections import defaultdict
def test(*dicts):
  result = defaultdict(list)
  for el in dicts:
    for key in el:
      result[key].append(el[key])
  return dict(result)
 
d1 = {'w': 50, 'x': 100, 'y': 'Green', 'z': 400}
d2 = {'x': 300, 'y': 'Red', 'z': 600}

print(""Original dictionaries:"")
print(d1)
print(d2)
print(""\nCombined dictionaries, creating a list of values for each key:"")
print(test(d1, d2))
",True
349,Write a Pandas program to drop a index level from a multi-level column index of a dataframe. ,"import pandas as pd
cols = pd.MultiIndex.from_tuples([(""a"", ""x""), (""a"", ""y""), (""a"", ""z"")])
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(df)

print(""\nRemove the top level index:"")
df.columns = df.columns.droplevel(0)
print(df)
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(""\nOriginal dataframe:"")
print(df)
print(""\nRemove the index next to top level:"")
df.columns = df.columns.droplevel(1)
print(df)
",True
350,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) between 1950-10-10 and 1960-10-10. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting days of the unidentified flying object (ufo) between 1949-10-10 and 1960-10-10:"")
selected_period = df[(df['Date_time'] >= '1950-01-01 00:00:00') & (df['Date_time'] <= '1960-12-31 23:59:59')]
print(selected_period)
",True
351,Write a Python program to make an iterator that drops elements from the iterable as soon as an element is a positive number. ,"import itertools as it
def drop_while(nums):
    return it.dropwhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))

def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))
",True
352,Write a Python program to remove empty lists from a given list of lists. ,"list1 = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]
print(""Original list:"")
print(list1)
print(""\nAfter deleting the empty lists from the said lists of lists"")
list2 = [x for x in list1 if x]
print(list2)
",True
353,Write a Python program to sort a list of elements using Cocktail shaker sort. ,"def cocktail_shaker_sort(nums):
    for i in range(len(nums)-1, 0, -1):
        is_swapped = False
        
        for j in range(i, 0, -1):
            if nums[j] < nums[j-1]:
                nums[j], nums[j-1] = nums[j-1], nums[j]
                is_swapped = True

        for j in range(i):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
                is_swapped = True
        
        if not is_swapped:
            return nums
 
num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(cocktail_shaker_sort(nums))
",True
354,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length. ","def check_string(s):
    messg = []
    if not any(x.isupper() for x in s):
        messg.append('String must have 1 upper case character.')
    if not any(x.islower() for x in s):
        messg.append('String must have 1 lower case character.')
    if not any(x.isdigit() for x in s):
        messg.append('String must have 1 number.')
    if len(s) < 8:
        messg.append('String length should be atleast 8.')    
    if not messg:
        messg.append('Valid string.')
    return messg
    
s = input(""Input the string: "")
print(check_string(s))
",True
355,"Write a NumPy program to extract first, third and fifth elements of the third and fifth rows from a given (6x6) array. ","import numpy as np
arra_data = np.arange(0,36).reshape((6, 6))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First, third and fifth elements of the third and fifth rows"")
print(arra_data[2::2, ::2]) 
",True
356,Write a Python program to check if a given function is a generator or not. Use types.GeneratorType(),"import types
def a(x):
    yield x
        
def b(x):
    return x

def add(x, y):
    return x + y

print(isinstance(a(456), types.GeneratorType))
print(isinstance(b(823), types.GeneratorType))
print(isinstance(add(8,2), types.GeneratorType))
",True
357,Write a Python program to find the string similarity between two given strings. ,"import difflib
def string_similarity(str1, str2):
    result =  difflib.SequenceMatcher(a=str1.lower(), b=str2.lower())
    return result.ratio()
str1 = 'Python Exercises'
str2 = 'Python Exercises'
print(""Original string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Exercise'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Ex.'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str1 = 'Java Exercises'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
",True
358,Write a Python program to convert a pair of values into a sorted unique array. ,"L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),
 (7, 8), (9, 10)]
print(""Original List: "", L)
print(""Sorted Unique Data:"",sorted(set().union(*L)))
",True
359,"Write a NumPy program to calculate cumulative sum of the elements along a given axis, sum over rows for each of the 3 columns and sum over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative sum of the elements along a given axis:"")
r = np.cumsum(x)
print(r)
print(""\nSum over rows for each of the 3 columns:"")
r = np.cumsum(x,axis=0) 
print(r)
print(""\nSum over columns for each of the 2 rows:"")
r = np.cumsum(x,axis=1) 
print(r)

",True
360,Write a Python program to check multiple keys exists in a dictionary. ,"student = {
  'name': 'Alex',
  'class': 'V',
  'roll_id': '2'
}
print(student.keys() >= {'class', 'name'})
print(student.keys() >= {'name', 'Alex'})
print(student.keys() >= {'roll_id', 'name'})
",True
361,Write a Python program to create two strings from a given string. Create the first string using those character which occurs only once and create the second string which consists of multi-time occurring characters in the said string. ,"from collections import Counter  
def generateStrings(input): 
     str_char_ctr = Counter(input) 
     part1 = [ key for (key,count) in str_char_ctr.items() if count==1] 
     part2 = [ key for (key,count) in str_char_ctr.items() if count>1] 
     part1.sort() 
     part2.sort()
     return part1,part2
input = ""aabbcceffgh""
s1, s2 = generateStrings(input)
print(''.join(s1))   
print(''.join(s2))
",True
362,Write a Pandas program to check whether only lower case or upper case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['ABCD','EFGF', 'hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs lower (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))
print(df)
print(""\nIs Upper (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))
print(df)
",True
363,"Write a Python program to find the minimum, maximum value for each tuple position in a given list of tuples. ","def max_min_list_tuples(nums):
    zip(*nums)
    result1 = map(max, zip(*nums))
    result2 = map(min, zip(*nums))
    return list(result1), list(result2)

nums = [(2,3),(2,4),(0,6),(7,1)]
print(""Original list:"")
print(nums)

result = max_min_list_tuples(nums)
print(""\nMaximum value  for each tuple position in the said list of tuples:"")
print(result[0])
print(""\nMinimum value  for each tuple position in the said list of tuples:"")
print(result[1])
",True
364,Write a Python program to convert a given list of strings into list of lists. ,"def strings_to_listOflists(colors):
    result = [list(word) for word in colors]
    return result

colors = [""Red"", ""Maroon"", ""Yellow"", ""Olive""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
",True
365,Write a Pandas program to print a DataFrame without index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nDataFrame without index:"")
print(df.to_string(index=False))
",True
366,Write a Python program to display some information about the OS where the script is running. ,"import platform as pl

os_profile = [
        'architecture',
        'linux_distribution',
        'mac_ver',
        'machine',
        'node',
        'platform',
        'processor',
        'python_build',
        'python_compiler',
        'python_version',
        'release',
        'system',
        'uname',
        'version',
    ]
for key in os_profile:
  if hasattr(pl, key):
    print(key +  "": "" + str(getattr(pl, key)()))
",True
367,Write a NumPy program to create a 8x8 matrix and fill it with a checkerboard pattern. ,"import numpy as np
x = np.ones((3,3))
print(""Checkerboard pattern:"")
x = np.zeros((8,8),dtype=int)
x[1::2,::2] = 1
x[::2,1::2] = 1
print(x)
",True
368,"Write a Python program to filter the height and width of students, which are stored in a dictionary. ","def filter_data(students):
    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}
    return result    
 
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight > 6ft and Weight> 70kg:"")
print(filter_data(students))
",True
369,Write a NumPy program to find the nearest value from a given value in an array. ,"import numpy as np
x = np.random.uniform(1, 12, 5)
v = 4
n = x.flat[np.abs(x - v).argmin()]
print(n)
",True
370,Write a NumPy program to create a two-dimensional array of specified format. ,"import numpy as np   
print(""Create an array of shape (15,10):"") 
print(""Command-1"")
print(np.arange(1, 151).reshape(15, 10)) 
print(""\nCommand-2"")
print(np.arange(1, 151).reshape(-1, 10)) 
print(""\nCommand-3"")
print(np.arange(1, 151).reshape(15, -1))
",True
371,"Write a NumPy program to create an array of 4,5 shape and to reverse the rows of the said array. After reversing 1st row will be 4th and 4th will be 1st, 2nd row will be 3rd row and 3rd row will be 2nd row. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter reversing:"")
array_nums[:] = array_nums[3::-1]
print(array_nums)
",True
372,"Write a Python program to select a random element from a list, set, dictionary (value) and a file from a directory. Use random.choice()","import random
import os
print(""Select a random element from a list:"")
elements = [1, 2, 3, 4, 5]
print(random.choice(elements))
print(random.choice(elements))
print(random.choice(elements))
print(""\nSelect a random element from a set:"")
elements = set([1, 2, 3, 4, 5])

print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(""\nSelect a random value from a dictionary:"")
d = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4, ""e"": 5}
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key]) 
print(""\nSelect a random file from a directory.:"")
print(random.choice(os.listdir(""/"")))
",True
373,Write a NumPy program to set zero to lower triangles along the last two axes of a three-dimensional of a given array. ,"import numpy as np
arra=np.ones((1,8,8))
print(""Original array:"")
print(arra)
result = np.triu(arra, k=1)
print(""\nResult:"")
print(result)
",True
374,Write a Python program to create a key-value list pairings in a given dictionary. ,"from itertools import product
def test(dictt):
    result = [dict(zip(dictt, sub)) for sub in product(*dictt.values())]
    return result

students = {1: ['Jean Castro'], 2: ['Lula Powell'], 3: ['Brian Howell'], 4: ['Lynne Foster'], 5: ['Zachary Simon']}

print(""\nOriginal dictionary:"")
print(students)
print(""\nA key-value list pairings of the said dictionary:"")
print(test(students))
",True
375,"Write a Python program to generate a random alphabetical character, alphabetical string and alphabetical string of a fixed length. Use random.choice()","import random
import string
print(""Generate a random alphabetical character:"")
print(random.choice(string.ascii_letters))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
str1 = """"
for i in range(random.randint(1, max_length)):
    str1 += random.choice(string.ascii_letters)
print(str1)
print(""\nGenerate a random alphabetical string of a fixed length:"")
str1 = """"
for i in range(10):
    str1 += random.choice(string.ascii_letters)
print(str1)
",True
376,"Write a NumPy program to calculate cumulative product of the elements along a given axis, sum over rows for each of the 3 columns and product over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative product  of the elements along a given axis:"")
r = np.cumprod(x)
print(r)
print(""\nProduct over rows for each of the 3 columns:"")
r = np.cumprod(x,axis=0) 
print(r)
print(""\nProduct  over columns for each of the 2 rows:"")
r = np.cumprod(x,axis=1) 
print(r)
",True
377,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
",True
378,"Write a Pandas program to create a new DataFrame based on existing series, using specified argument and override the existing columns names. ","import pandas as pd
s1 = pd.Series([0, 1, 2, 3], name='col1')
s2 = pd.Series([0, 1, 2, 3])
s3 = pd.Series([0, 1, 4, 5], name='col3')
df = pd.concat([s1, s2, s3], axis=1, keys=['column1', 'column2', 'column3'])
print(df)
",True
379,Write a Python program to create all possible permutations from a given collection of distinct numbers.,"def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms

my_nums = [1,2,3]
print(""Original Cofllection: "",my_nums)
print(""Collection of distinct numbers:\n"",permute(my_nums))
",True
380,Write a Python program to find the maximum and minimum values in a given list of tuples using lambda function. ,"def max_min_list_tuples(class_students):
    return_max = max(class_students,key=lambda item:item[1])[1]
    return_min = min(class_students,key=lambda item:item[1])[1]
    return return_max, return_min
    
class_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
",True
381,Write a Python program to append items from inerrable to the end of the array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
array_num.extend(array_num)
print(""Extended array: ""+str(array_num))
",True
382,Write a Python function that takes a list of words and return the longest word and the length of the longest one. ,"def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]
result = find_longest_word([""PHP"", ""Exercises"", ""Backend""])
print(""\nLongest word: "",result[1])
print(""Length of the longest word: "",result[0])
",True
383,"Write a Python program to configure the rounding to round to the nearest - with ties going towards 0, with ties going away from 0. Use decimal.ROUND_HALF_DOWN, decimal.ROUND_HALF_UP","import decimal
print(""Configure the rounding to round to the nearest, with ties going towards 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_DOWN
print(decimal.Decimal(10) / decimal.Decimal(4))
print(""\nConfigure the rounding to round to the nearest, with ties going away from 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_UP
print(decimal.Decimal(10) / decimal.Decimal(4))
",True
384,Write a Python program to access only unique key value of a Python object. ,"import json
python_obj = '{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}'
print(""Original Python object:"")
print(python_obj)
json_obj = json.loads(python_obj)
print(""\nUnique Key in a JSON object:"")
print(json_obj) 
",True
385,Write a NumPy program to read a CSV data file and store records in an array. ,"from numpy import genfromtxt
csv_data = genfromtxt('fdata.csv', dtype=['S10','float32','float32','float32','float32'], delimiter="","")
print(csv_data)
",True
386,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_cols(s):
    color = 'grey'
    return 'background-color: %s' % color
print(""\nHighlight specific columns:"")
df.style.applymap(highlight_cols, subset=pd.IndexSlice[:, ['B', 'C']])
",True
387,Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters. ,"def string_test(s):
    d={""UPPER_CASE"":0, ""LOWER_CASE"":0}
    for c in s:
        if c.isupper():
           d[""UPPER_CASE""]+=1
        elif c.islower():
           d[""LOWER_CASE""]+=1
        else:
           pass
    print (""Original String : "", s)
    print (""No. of Upper case characters : "", d[""UPPER_CASE""])
    print (""No. of Lower case Characters : "", d[""LOWER_CASE""])

string_test('The quick Brown Fox')
",True
388,Write a Python program to create a list containing the power of said number in bases raised to the corresponding number in the index using Python map. ,"bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Base numbers abd index: "")
print(bases_num)
print(index)
result = list(map(pow, bases_num, index))
print(""\nPower of said number in bases raised to the corresponding number in the index:"")
print(result)
",True
389,Write a Pandas program to extract year between 1800 to 2200 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_year(text):
    
    result = re.findall(r""\b(18[0-9]{2}|19[0-8][0-9]|199[0-9]|2[01][0-9]{2}|2200)\b"",text)
    return result
df['year_range']=df['year'].apply(lambda x: find_year(x))
print(""\Extracting year between 1800 to 2200:"")
print(df)
",True
390,Write a Pandas program to extract the day name from a specified date. Add 2 days and 1 business day with the specified date. ,"import pandas as pd
newday = pd.Timestamp('2020-02-07')
print(""First date:"")
print(newday)
print(""\nThe day name of the said date:"")
print(newday.day_name())
print(""\nAdd 2 days with the said date:"")
newday1 = newday + pd.Timedelta('2 day')
print(newday1.day_name())
print(""\nNext business day:"")
nbday = newday + pd.offsets.BDay()
print(nbday.day_name())
",True
391,Write a Python program to read the current line from a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", newline='')
csv_reader = csv.reader(f)
print(next(csv_reader))
print(next(csv_reader))
print(next(csv_reader))
",True
392,Write a Python program to read a square matrix from console and print the sum of matrix primary diagonal. Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user. ,"size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))
print(""Sum of matrix primary diagonal:"")
print(matrix_sum_diagonal)
",True
393,Write a Pandas program to import sheet2 data from a given excel data (employee.xlsx ) into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx',sheet_name=1)
print(df)
",True
394,"Write a NumPy program to convert a given array into bytes, and load it as array. ","import numpy as np
import os
a = np.array([1, 2, 3, 4, 5, 6])
print(""Original array:"")
print(a)
a_bytes = a.tostring()
a2 = np.fromstring(a_bytes, dtype=a.dtype)
print(""After loading, content of the text file:"")
print(a2)
print(np.array_equal(a, a2))
",True
395,Write a Pandas program to create a monthly time period and display the list of names in the current local scope. ,"import pandas as pd
mtp = pd.Period('2021-11','M')
print(""Monthly time perid: "",mtp)
print(""\nList of names in the current local scope:"")
print(dir(mtp)) 
",True
396,"Write a NumPy program to sort an along the first, last axis of an array. ","import numpy as np
a = np.array([[4, 6],[2, 1]])
print(""Original array: "")
print(a)
print(""Sort along the first axis: "")
x = np.sort(a, axis=0)
print(x)
print(""Sort along the last axis: "")
y = np.sort(x, axis=1)
print(y)
",True
397,"Write a NumPy program to move the specified axis backwards, until it lies in a given position. ","import numpy as np
x = np.ones((2,3,4,5))
print(np.rollaxis(x, 3, 1).shape)
",True
398,"Write a NumPy program to check whether each element of a given array starts with ""P"". ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Test if each element of the said array starts with 'P':"")
r = np.char.startswith(x1, ""P"")
print(r)
",True
399,Write a Pandas program to construct a DataFrame using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
",True
400,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the entire row in Yellow where a specific column value is greater than 0.5. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")

def highlight_greaterthan(x):
    if x.C > .5:
        return ['background-color: yellow']*5
    else:
        return ['background-color: white']*5 
df.style.apply(highlight_greaterthan, axis=1)
",True
401,"a href=""python-conditional-exercise-15.php"" target=""_blank"">Click me to see the sample solution</a>","import re
p= input(""Input your password"")
x = True
while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        print(""Valid Password"")
        x=False
        break

if x:
    print(""Not a Valid Password"")
",True
402,"Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array. ","import numpy as np
X = np.array([1, 7, 13, 105])
print(""Original array:"")
print(X)
print(""Size of the memory occupied by the said array:"")
print(""%d bytes"" % (X.size * X.itemsize))
",True
403,Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn. ,"a = int(input(""Input an integer : ""))
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
print (n1+n2+n3)
",True
404,"Write a Python program to find a tuple, the smallest second index value from a list of tuples. ","x = [(4, 1), (1, 2), (6, 0)]
print(min(x, key=lambda n: (n[1], -n[0])))
",True
405,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")

th_props = [
  ('font-size', '12px'),
  ('text-align', 'center'),
  ('font-weight', 'bold'),
  ('color', '#6d6d6d'),
  ('background-color', '#f7ffff')
  ]


td_props = [
  ('font-size', '12px')
  ]


styles = [
  dict(selector=""th"", props=th_props),
  dict(selector=""td"", props=td_props)
  ]
(df.style
        .set_table_styles(styles))
",True
406,Write a NumPy program to convert Pandas dataframe to NumPy array with headers. ,"import numpy as np
import pandas as pd
np_array = np.random.rand(12,3)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
df = pd.DataFrame(np.random.rand(12,3),columns=['A','B','C'])
print(""\nPanda's DataFrame: "")
print(df)
print(""Type: "",type(df))
",True
407,Write a NumPy program to calculate 2p for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\n2^p for all the elements of the said array:"")
r1 = np.exp2(x)
r2 = 2 ** x
assert np.allclose(r1, r2)
print(r1)
",True
408,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to set dataframe background Color black and font color yellow. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBackground:black - fontcolor:yelow"")
df.style.set_properties(**{'background-color': 'black',
                           'color': 'yellow'})
",True
409,Write a NumPy program to extract first and third elements of the first and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and third elements of the first and third rows "")
print(arra_data[::2, ::2])
",True
410,"Write a Python program to sum of three given integers. However, if two values are equal sum will be zero. ","def sum(x, y, z):
    if x == y or y == z or x==z:
        sum = 0
    else:
        sum = x + y + z
    return sum

print(sum(2, 1, 2))
print(sum(3, 2, 2))
print(sum(2, 2, 2))
print(sum(1, 2, 3))
",True
411,Write a Pandas program to sort a MultiIndex of a DataFrame. Also sort on various levels of index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSort on MultiIndex DataFrame:"")
df1 = df.sort_index()
print(""\nSort on Index level=0 of the DataFrame:"")
df2 = df.sort_index(level=0)
print(df2)
print(""\nSort on Index level=1 of the DataFrame:"")
df2 = df.sort_index(level=1)
print(df2)
print(""\nPass a level name to sort the DataFrame:"")
df3 = df.sort_index(level=""city"")
print(df3)  
",True
412,"Write a NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array. ","import numpy as np
x = np.array([[0,1],[2,3]])
print(""Original array:"")
print(x)
print(""Sum of all elements:"")
print(np.sum(x))
print(""Sum of each column:"")
print(np.sum(x, axis=0))
print(""Sum of each row:"")
print(np.sum(x, axis=1))
",True
413,"Write a Python program to extract specified number of elements from a given list, which follows each other continuously. ","from itertools import groupby 

def extract_elements(nums, n):
    result = [i for i, j in groupby(nums) if len(list(j)) == n] 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
n = 2
print(""Original list:"")
print(nums1)
print(""Extract 2 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums1, n))
nums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]
n = 4
print(""Original lists:"")
print(nums2)
print(""Extract 4 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums2, n))
",True
414,Write a Python program to sort a given list of tuples on specified element. ,"def sort_on_specific_item(lst, n):
    result = sorted((lst), key=lambda x: x[n])
    return result   
items = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]
print(""Original list of tuples:"")
print(items)
print(""\nSort on 1st element of the tuple of the said list:"")
n = 0
print(sort_on_specific_item(items, n))
print(""\nSort on 2nd element of the tuple of the said list:"")
n = 1
print(sort_on_specific_item(items, n))
print(""\nSort on 3rd element of the tuple of the said list:"")
n = 2
print(sort_on_specific_item(items, n))
",True
415,Write a NumPy program to move axes of an array to new positions. Other axes remain in their original order. ,"import numpy as np
x = np.zeros((2, 3, 4))
print(np.moveaxis(x, 0, -1).shape)
print(np.moveaxis(x, -1, 0).shape)
",True
416,Write a Python program to scramble the letters of string in a given list. ,"from random import shuffle

def shuffle_word(text_list):
    text_list = list(text_list)
    shuffle(text_list)
    return ''.join(text_list)

text_list = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(text_list)
print(""\nAfter scrambling the letters of the strings of the said list:"")
result =  [shuffle_word(word) for word in text_list]
print(result) 
",True
417,Write a Python program to get the most frequent element in a given list of numbers. ,"def most_frequent(nums):
  return max(set(nums), key = nums.count) 
print(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
nums = [1, 2, 3, 1, 2, 3, 2, 1, 4, 3, 3]
print (""\nOriginal list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
",True
418,"Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors. ","def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
print(smallest_multiple(13))
print(smallest_multiple(11))
print(smallest_multiple(2))
print(smallest_multiple(1))
",True
419,Write a NumPy program to copy data from a given array to another array. ,"import numpy as np
x = np.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(x)
y = np.empty_like (x)
y[:] = x
print(""\nCopy of the said array:"")
print(y)
",True
420,Write a Pandas program to split a dataset to group by two columns and then sort the aggregated results within the groups. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df_agg = df.groupby(['customer_id','salesman_id']).agg({'purch_amt':sum})
result = df_agg['purch_amt'].groupby(level=0, group_keys=False)
print(""\nGroup on 'customer_id', 'salesman_id' and then sort sum of purch_amt within the groups:"")
print(result.nlargest())
",True
421,Write a Python program to find the indexes of all None items in a given list. ,"def relative_order(lst):
    result = [i for i in range(len(lst)) if lst[i] == None]
    return result

nums = [1, None, 5, 4,None, 0, None, None]
print(""Original list:"")
print(nums)
print(""\nIndexes of all None items of the list:"")
print(relative_order(nums))
",True
422,Write a Python program to split a given multiline string into a list of lines. ,"def split_lines(s):
  return s.split('\n')
print(""Original string:"")
print(""This\nis a\nmultiline\nstring.\n"")
print(""Split the said multiline string into a list of lines:"")
print(split_lines('This\nis a\nmultiline\nstring.\n'))
",True
423,Write a Python program to write a Python list of lists to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
data = [[10,'a1', 1], [12,'a2', 3], [14, 'a3', 5], [16, 'a4', 7], [18, 'a5', 9]]
with open(""temp.csv"", ""w"", newline="""") as f:
   writer = csv.writer(f)
   writer.writerows(data)
with open('temp.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ')
 for row in data:
   print(', '.join(row))
",True
424,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length using lambda. ","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result    
s = input(""Input the string: "")
print(check_string(s))
",True
425,Write a Python program to run an operating system command using the os module. ,"import os
if os.name == ""nt"":
   command = ""dir""
else:
   command = ""ls -l""
os.system(command)
",True
426,"Write a Pandas program to create a subtotal of ""Labor Hours"" against MSHA ID from the given excel data (coalpublic2013.xlsx ). ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df_sub=df[[""MSHA ID"",""Labor_Hours""]].groupby('MSHA ID').sum()
df_sub
",True
427,Write a Python program to count the number of rows of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn):
    cursorObj = conn.cursor()

    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    print(""Number of records before inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))

    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")
    conn.commit()
    print(""\nNumber of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
    
sqllite_conn = sql_connection()
sql_table(sqllite_conn)

if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
",True
428,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. ,"def count_dups(nums):
    element = []
    freque = []
    if not nums:
        return element
    running_count = 1
    for i in range(len(nums)-1):
        if nums[i] == nums[i+1]:
            running_count += 1
        else:
            freque.append(running_count)
            element.append(nums[i])
            running_count = 1
    freque.append(running_count)
    element.append(nums[i+1])
    return element,freque


nums = [1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)

print(""\nConsecutive duplicate elements and their frequency:"")
print(count_dups(nums))
",True
429,Write a NumPy program to convert a given vector of integers to a matrix of binary representation. ,"import numpy as np
nums = np.array([0, 1, 3, 5, 7, 9, 11, 13, 15])
print(""Original vector:"")
print(nums)
bin_nums = ((nums.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)
print(""\nBinary representation of the said vector:"")
print(bin_nums[:,::-1])
",True
430,Write a NumPy program to create an empty and a full array. ,"import numpy as np

x = np.empty((3,4))
print(x)

y = np.full((3,3),6)
print(y)
",True
431,Write a Python program to find all the h2 tags and list the first four from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('h2')[0:4])

",True
432,Write a Pandas program to check whether only proper case or title case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'Hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs proper case or title case?"")
df['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))
print(df)
",True
433,"Write a Pandas program to calculate one, two, three business day(s) from a specified date. Also find the next business month end from a specific date. ","import pandas as pd
from pandas.tseries.offsets import *
import datetime
from datetime import datetime, date
dt = datetime(2020, 1, 4)
print(""Specified date:"")
print(dt)
print(""\nOne business day from the said date:"")
obday = dt + BusinessDay()
print(obday)
print(""\nTwo business days from the said date:"")
tbday = dt + 2 * BusinessDay()
print(tbday)
print(""\nThree business days from the said date:"")
thbday = dt + 3 * BusinessDay()
print(thbday)
print(""\nNext business month end from the said date:"")
nbday = dt + BMonthEnd()
print(nbday)
",True
434,"Write a Pandas program to filter those records where WHO region contains ""Ea"" substring from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())

new_w_a_con = w_a_con.dropna()
print(""\nMatch if  a given column has a particular sub string:"")
print(new_w_a_con[new_w_a_con[""WHO region""].str.contains(""Ea"")])
",True
435,Write a Python program to extract single key-value pair of a dictionary in variables. ,"d = {'Red': 'Green'}
(c1, c2), = d.items()
print(c1)
print(c2)
",True
436,Write a Python program to test whether a passed letter is a vowel or not. ,"def is_vowel(char):
    all_vowels = 'aeiou'
    return char in all_vowels
print(is_vowel('c'))
print(is_vowel('e'))
",True
437,Write a Python program to generate groups of five consecutive numbers in a list. ,"l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)
",True
438,rite a Python program to get the unique enumeration values. ,"import enum
class Countries(enum.Enum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    India = 355
    USA = 213
for result in Countries:
    print('{:15} = {}'.format(result.name, result.value))
",True
439,Write a Python program to find the class wise roll number from a tuple-of-tuples. ,"from collections import defaultdict
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)

class_rollno = defaultdict(list)

for class_name, roll_id in classes:
    class_rollno[class_name].append(roll_id)

print(class_rollno)
",True
440,"Write a Python program to generate a list, containing the Fibonacci sequence, up until the nth term. ","def fibonacci_nums(n):
  if n <= 0:
    return [0]
  sequence = [0, 1]
  while len(sequence) <= n:
    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]
    sequence.append(next_value)
  return sequence
print(""First 7 Fibonacci numbers:"")
print(fibonacci_nums(7))
print(""\nFirst 15 Fibonacci numbers:"")
print(fibonacci_nums(15))
print(""\nFirst 50 Fibonacci numbers:"")
print(fibonacci_nums(50))
",True
441,Write a python program to find the next previous palindrome of a specified number. ,"def Previous_Palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x
print(Previous_Palindrome(99));
print(Previous_Palindrome(1221));
",True
442,Write a Python program to convert true to 1 and false to 0. ,"x = 'true'
x = int(x == 'true')
print(x)
x = 'abcd'
x = int(x == 'true')
print(x)
",True
443,Write a Python program to remove specific words from a given list using lambda. ,"def remove_words(list1, remove_words):
    result = list(filter(lambda word: word not in remove_words, list1))
    return result
        
colors = ['orange', 'red', 'green', 'blue', 'white', 'black']
remove_colors = ['orange','black']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
",True
444,"Write a NumPy program to create a 12x12x4 array with random values and extract any array of shape(6,6,3) from the said array. ","import numpy as np 
nums = np.random.random((8,8,3))
print(""Original array:"")
print(nums)
print(""\nExtract array of shape (6,6,3) from the said array:"")
new_nums = nums[:6, :6, :]
print(new_nums)
",True
445,Write a Pandas program to check the equality of two given series. ,"import pandas as pd
nums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
nums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original Series:"")
print(nums1)
print(nums2)
print(""Check 2 series are equal or not?"")
print(nums1 == nums2)
",True
446,Write a NumPy program to compute the factor of a given array by Singular Value Decomposition. ,"import numpy as np
a = np.array([[1, 0, 0, 0, 2], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0]], dtype=np.float32)
print(""Original array:"")
print(a)
U, s, V = np.linalg.svd(a, full_matrices=False)
q, r = np.linalg.qr(a)
print(""Factor of a given array  by Singular Value Decomposition:"")
print(""U=\n"", U, ""\ns=\n"", s, ""\nV=\n"", V)
",True
447,"Write a Pandas program to extract a single row, rows and a specific value from a MultiIndex levels DataFrame. ","import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)

print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])
print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])

print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale1'])
print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale3'])

print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale1', 'city2'), 1])
print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale4', 'city1'), 4])
",True
448,Write a Pandas program to calculate the total number of missing values in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nTotal number of missing values of the said DataFrame:"")
result = df.isna().sum().sum()
print(result)
",True
449,Write a Python program to sum all amicable numbers from 1 to specified numbers. ,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""

    if limit < 1:
        return ""Input must be bigger than 0!""

    amicables = set()

    for num in range(2, limit+1):
        if num in amicables:
            continue

        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)

    return sum(amicables)


print(amicable_numbers_sum(9999))
print(amicable_numbers_sum(999))
print(amicable_numbers_sum(99))
",True
450,Write a Python program to remove newline characters from a file. ,"def remove_newlines(fname):
    flist = open(fname).readlines()
    return [s.rstrip('\n') for s in flist]

print(remove_newlines(""test.txt""))
",True
451,Write a NumPy program to find the most frequent value in an array. ,"import numpy as np
x = np.random.randint(0, 10, 40)
print(""Original array:"")
print(x)
print(""Most frequent value in the above array:"")
print(np.bincount(x).argmax())
",True
452,Write a Python program to find all lower and upper mixed case combinations of a given string. ,"import itertools
def combination(str1):
    result = map(''.join, itertools.product(*((c.lower(), c.upper()) for c in str1)))
    return list(result)
st =""abc""
print(""Original string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""w3r""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""Python""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
",True
453,Write a Pandas program to extract items at given positions of a given series. ,"import pandas as pd
num_series = pd.Series(list('2390238923902390239023'))
element_pos = [0, 2, 6, 11, 21]
print(""Original Series:"")
print(num_series)
result = num_series.take(element_pos)
print(""\nExtract items at given positions of the said series:"")
print(result)
",True
454,"Write a Python program to find the nested lists elements, which are present in another list using lambda. ","def intersection_nested_lists(l1, l2):
    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
",True
455,Write a NumPy program to extract all the elements of the first and fourth columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the first and fourth columns "")
print(arra_data[:, [0,3]])
",True
456,Write a Python program to check whether it follows the sequence given in the patterns array. ,"def is_samePatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True

print(is_samePatterns([""red"", 
 ""green"", 
 ""green""], [""a"", 
 ""b"", 
 ""b""])) 

print(is_samePatterns([""red"", 
 ""green"", 
 ""greenn""], [""a"", 
 ""b"", 
 ""b""])) 
",True
457,"Write a Python program to create a dictionary of keys x, y, and z where each key has as value a list from 11-20, 21-30, and 31-40 respectively. Access the fifth value of each key from the dictionary. ","from pprint import pprint
dict_nums = dict(x=list(range(11, 20)), y=list(range(21, 30)), z=list(range(31, 40)))
pprint(dict_nums)
print(dict_nums[""x""][4])
print(dict_nums[""y""][4])
print(dict_nums[""z""][4])
for k,v in dict_nums.items():
   print(k, ""has value"", v)
",True
458,Write a Pandas program to create a yearly time period from a specified year and display the properties of this period. ,"import pandas as pd
ytp = pd.Period('2020','A-DEC')
print(""Yearly time perid:"",ytp)
print(""\nAll the properties of the said period:"")
print(dir(ytp))
",True
459,Write a Python program to set the indentation of the first line. ,"import textwrap
sample_text ='''
Python is a widely used high-level, general-purpose, interpreted, dynamic
programming language. Its design philosophy emphasizes code readability,
and its syntax allows programmers to express concepts in fewer lines of
code than possible in languages such as C++ or Java.
    '''

text1 =  textwrap.dedent(sample_text).strip()
print()
print(textwrap.fill(text1,
                    initial_indent='',
                    subsequent_indent=' ' * 4,
                    width=80,
                    ))
print()
",True
460,Write a NumPy program to reverse an array (first element becomes last). ,"import numpy as np
import numpy as np
x = np.arange(12, 38)
print(""Original array:"")
print(x)
print(""Reverse array:"")
x = x[::-1]
print(x)
",True
461,Write a Python program to display the examination schedule. (extract the date from exam_st_date). ,"exam_st_date = (11,12,2014)
print( ""The examination will start from : %i / %i / %i""%exam_st_date)
",True
462,Write a Python program to count number of non-empty substrings of a given string. ,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); 

str1 = input(""Input a string: "")
print(""Number of substrings:"") 
print(number_of_substrings(str1))
",True
463,Write a Pandas program to change the order of index of a given series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5], index = ['A', 'B', 'C','D','E'])
print(""Original Data Series:"")
print(s)
s = s.reindex(index = ['B','A','C','D','E'])
print(""Data Series after changing the order of index:"")
print(s)
",True
464,Write a NumPy program to compute the cross product of two given vectors. ,"import numpy as np
p = [[1, 0], [0, 1]]
q = [[1, 2], [3, 4]]
print(""original matrix:"")
print(p)
print(q)
result1 = np.cross(p, q)
result2 = np.cross(q, p)
print(""cross product of the said two vectors(p, q):"")
print(result1)
print(""cross product of the said two vectors(q, p):"")
print(result2)
",True
465,Write a Python program to remove None value from a given list. ,"def remove_none(nums):
    result = [x for x in nums if x is not None]
    return result
nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
",True
466,Write a Python program to print a nested lists (each list on a new line) using the print() function. ,"colors = [['Red'], ['Green'], ['Black']]
print('\n'.join([str(lst) for lst in colors]))
",True
467,Write a Python program to search a specific item in a given doubly linked list and return true if the item is found otherwise return false. ,"class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\n"")
if items.search_item('SQL'):
    print(""True"")
else:
    print(""False"")

if items.search_item('C+'):
    print(""True"")
else:
    print(""False"")
",True
468,Write a NumPy program to convert (in sequence depth wise (along third axis)) two 1-D arrays into a 2-D array. ,"import numpy as np
a = np.array([[10],[20],[30]])
b = np.array([[40],[50],[60]])
c = np.dstack((a, b))
print(c)
",True
469,Write a Pandas program to check whether two given words present in a specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_and_cond(text):
    result = re.findall(r'(?=.*Ave.)(?=.*9910).*', text) 
    return "" "".join(result)
df['check_two_words']=df['address'].apply(lambda x : test_and_cond(x))
print(""\nPresent two words!"")
print(df)
",True
470,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. Use collections module. ,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
",True
471,"Write a NumPy program to test element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not. ","import numpy as np
a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])
print(""Original array"")
print(a)
print(""Checking for complex number:"")
print(np.iscomplex(a))
print(""Checking for real number:"")
print(np.isreal(a))
print(""Checking for scalar type:"")
print(np.isscalar(3.1))
print(np.isscalar([3.1]))
",True
472,Write a Pandas program to create a time series object with a time zone. ,"import pandas as pd
print(""Timezone: Europe/Berlin:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'Europe/Berlin')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/Europe/Berlin')
print(date_util.tz)
print(""\nUS/Pacific:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'US/Pacific')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/US/Pacific')
print(date_util.tz)
",True
473,Write a NumPy program to check whether a Numpy array contains a specified row. ,"import numpy as np
num = np.arange(20)
arr1 = np.reshape(num, [4, 5])
print(""Original array:"")
print(arr1)
print([0, 1, 2, 3, 4] in arr1.tolist())
print([0, 1, 2, 3, 5] in arr1.tolist())
print([15, 16, 17, 18, 19] in arr1.tolist())
",True
474,Write a NumPy program to check whether the NumPy array is empty or not. ,"import numpy as np
x = np.array([2, 3])
y = np.array([])

print(x.size)

print(y.size)
",True
475,Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically). ,"items = input(""Input comma separated sequence of words"")
words = [word for word in items.split("","")]
print("","".join(sorted(list(set(words)))))
",True
476,Write a Python program to set a new value of an item in a singly linked list using index value. ,"class Node:
    
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data
    
    def __setitem__(self, index, value):
        if index > self.count - 1:
            raise Exception(""Index out of range."")
        current = self.tail
        for n in range(index):
            current = current.next
        current.data = value

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Modify items by index:"")
items[1] = ""SQL""
print(""New value: "",items[1])
items[4] = ""Perl""
print(""New value: "",items[4])
",True
477,Write a Python program to update a specific column value of a given table and select all rows before and after updating the said table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()

    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate commission .15 to .45 where id is 5003:"")
    sql_update_query = """"""Update salesman set commission = .45 where salesman_id = 5003""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
",True
478,Write a Python program to find the k,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def kth_smallest(root, k):
    stack = []
    while root or stack:
        while root:
            stack.append(root)
            root = root.left
        root = stack.pop()
        k -= 1
        if k == 0:
            break
        root = root.right
    return root.val

root = TreeNode(8)  
root.left = TreeNode(5)  
root.right = TreeNode(14) 
root.left.left = TreeNode(4)  
root.left.right = TreeNode(6) 
root.left.right.left = TreeNode(8)  
root.left.right.right = TreeNode(7)  
root.right.right = TreeNode(24) 
root.right.right.left = TreeNode(22)  

print(kth_smallest(root, 2))
print(kth_smallest(root, 3))
",True
479,Write a Pandas program to count year-country wise frequency of reporting dates of unidentified flying object(UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
df['Year'] = df['Date_time'].apply(lambda x: ""%d"" % (x.year))
result = df.groupby(['Year', 'country']).size()
print(""\nCountry-year wise frequency of reporting dates of UFO:"")
print(result)
",True
480,Write a Python program to create an iterator that returns consecutive keys and groups from an iterable. ,"import itertools as it
print(""Iterate over characters of a string and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))    
print(""\nIterate over elements of a list and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'    
str1 = [1,2,2,3,4,4,5,5,5,6,6,7,7,7,8]
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))
",True
481,Write a Python program to remove all the elements of a given deque object. ,"import collections
odd_nums = (1,3,5,7,9)
odd_deque  = collections.deque(odd_nums)
print(""Original Deque object with odd numbers:"")
print(odd_deque)
print(""Deque length: %d""%(len(odd_deque)))
odd_deque.clear()
print(""Deque object after removing all numbers-"")
print(odd_deque)
print(""Deque length:%d""%(len(odd_deque)))
",True
482,"Write a NumPy program to create an array of 4,5 shape and swap column1 with column4. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter swapping column1 with column4:"")
array_nums[:,[0,3]] = array_nums[:,[3,0]]
print(array_nums)
",True
483,Write a Pandas program to create a TimeSeries to display all the Sundays of given year. ,"import pandas as pd
result = pd.Series(pd.date_range('2020-01-01', periods=52, freq='W-SUN'))
print(""All Sundays of 2019:"")
print(result)
",True
484,Write a Python function that takes a list and returns a new list with unique elements of the first list. ,"def unique_list(l):
  x = []
  for a in l:
    if a not in x:
      x.append(a)
  return x

print(unique_list([1,2,3,3,3,3,4,5])) 
",True
485,Write a Python program to write a Python dictionary to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
csv_columns = ['id','Column1', 'Column2', 'Column3', 'Column4', 'Column5']
dict_data = {'id':['1', '2', '3'],
    'Column1':[33, 25, 56],
    'Column2':[35, 30, 30],
    'Column3':[21, 40, 55],
    'Column4':[71, 25, 55],
    'Column5':[10, 10, 40], }
csv_file = ""temp.csv""
try:
   with open(csv_file, 'w') as csvfile:
       writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
       writer.writeheader()
       for data in dict_data:
           writer.writerow(dict_data)
except IOError:
   print(""I/O error"")
data = csv.DictReader(open(csv_file))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
",True
486,"Write a Python program to find the indices of elements of a given list, greater than a specified value. ","def test(lst, value):
    result = [i for i,val in enumerate(lst) if val > value]
    return result
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 3000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 20000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
",True
487,Write a NumPy program to test whether each element of a 1-D array is also present in a second array. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [0, 40]
print(""Array2: "",array2)
print(""Compare each element of array1 and array2"")
print(np.in1d(array1, array2))
",True
488,"Write a Python program to determine the largest and smallest integers, longs, floats. ","import sys
print(""Float value information: "",sys.float_info)
print(""\nInteger value information: "",sys.int_info)
print(""\nMaximum size of an integer: "",sys.maxsize) 
",True
489,Write a Pandas program to extract numbers greater than 940 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.1111','920 N. Bishop Ave.','9910 Golden Star St.', '1025 Dunbar St.', '1700 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_num_great(text): 
    result = re.findall(r'95[5-9]|9[6-9]\d|[1-9]\d{3,}',text)
    return "" "".join(result)
df['num_great']=df['address'].apply(lambda x : test_num_great(x))
print(""\nNumber greater than 940:"")
print(df)
",True
490,"Write a Python program to print a long text, convert the string to a list and print all the words and their frequencies. ","string_words = '''United States Declaration of Independence
From Wikipedia, the free encyclopedia
The United States Declaration of Independence is the statement
adopted by the Second Continental Congress meeting at the Pennsylvania State
House (Independence Hall) in Philadelphia on July 4, 1776, which announced
that the thirteen American colonies, then at war with the Kingdom of Great
Britain, regarded themselves as thirteen independent sovereign states, no longer
under British rule. These states would found a new nation – the United States of
America. John Adams was a leader in pushing for independence, which was passed
on July 2 with no opposing vote cast. A committee of five had already drafted the
formal declaration, to be ready when Congress voted on independence.

John Adams persuaded the committee to select Thomas Jefferson to compose the original
draft of the document, which Congress would edit to produce the final version.
The Declaration was ultimately a formal explanation of why Congress had voted on July
2 to declare independence from Great Britain, more than a year after the outbreak of
the American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The
Second Day of July 1776, will be the most memorable Epocha, in the History of America.""
But Independence Day is actually celebrated on July 4, the date that the Declaration of
Independence was approved.

After ratifying the text on July 4, Congress issued the Declaration of Independence in
several forms. It was initially published as the printed Dunlap broadside that was widely
distributed and read to the public. The source copy used for this printing has been lost,
and may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete
with changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made
by Congress, are preserved at the Library of Congress. The best-known version of the Declaration
is a signed copy that is displayed at the National Archives in Washington, D.C., and which is
popularly regarded as the official document. This engrossed copy was ordered by Congress on
July 19 and signed primarily on August 2.

The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.
The Declaration justified the independence of the United States by listing colonial grievances against
King George III, and by asserting certain natural and legal rights, including a right of revolution.
Having served its original purpose in announcing independence, references to the text of the
Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric
(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement
on human rights, particularly its second sentence:

We hold these truths to be self-evident, that all men are created equal, that they are endowed by their
Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.

This has been called ""one of the best-known sentences in the English language"", containing ""the most potent
and consequential words in American history"". The passage came to represent a moral standard to which
the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the
Declaration to be the foundation of his political philosophy and argued that it is a statement of principles
through which the United States Constitution should be interpreted.

The U.S. Declaration of Independence inspired many other similar documents in other countries, the first
being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands
(modern-day Belgium). It also served as the primary model for numerous declarations of independence across
Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the
19th century.'''

word_list = string_words.split()

word_freq = [word_list.count(n) for n in word_list]

print(""String:\n {} \n"".format(string_words))
print(""List:\n {} \n"".format(str(word_list)))
print(""Pairs (Words and Frequencies:\n {}"".format(str(list(zip(word_list, word_freq)))))
",True
491,Write a Pandas program to extract numbers less than 100 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['72 Surrey Ave.11','92 N. Bishop Ave.','9910 Golden Star St.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)

def test_num_less(n):
    nums = []
    for i in n.split():
        result = re.findall(r'\b(0*(?:[1-9][0-9]?|100))\b',i)
        nums.append(result)
        all_num=["","".join(x) for x in nums if x != []]
    return "" "".join(all_num)

df['num_less'] = df['address'].apply(lambda x : test_num_less(x))
print(""\nNumber less than 100:"")
print(df)
",True
492,Write a Pandas program to split the following dataframe into groups and count unique values of 'value' column. ,"import pandas as pd
df = pd.DataFrame({
    'id': [1, 1, 2, 3, 3, 4, 4, 4],
    'value': ['a', 'a', 'b', None, 'a', 'a', None, 'b']
})
print(""Original DataFrame:"")
print(df)
print(""Count unique values:"")
print (df.groupby('value')['id'].nunique())
",True
493,"Write a Python program to compute the sum of elements of a given array of integers, use map() function. ","from array import array
def array_sum(nums_arr):
    sum_n = 0
    for n in nums_arr:
        sum_n += n
    return sum_n

nums = array('i', [1, 2, 3, 4, 5, -15])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = array_sum(nums_arr)
print(""Sum of all elements of the said array:"")
print(result)
",True
494,Write a Python program to convert a given string into a list of words. ,"str1 = ""The quick brown fox jumps over the lazy dog.""
print(str1.split(' '))
str1 = ""The-quick-brown-fox-jumps-over-the-lazy-dog.""
print(str1.split('-'))
",True
495,Write a Python program to display a given decimal value in scientific notation. Use decimal.Decimal,"import decimal

def format_e(n):
    a = '%E' % n
    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]

print(""Original decimal value: ""+ ""40800000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40800000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40000000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40000000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40812300000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40812300000.00000000000000')))
",True
496,Write a Python program to create a list by concatenating a given list which range goes from 1 to n. ,"my_list = ['p', 'q']
n = 4
new_list = ['{}{}'.format(x, y) for y in range(1, n+1) for x in my_list]
print(new_list)
",True
497,Write a Python program to find the index of an item in a specified list. ,"num =[10, 30, 4, -6]
print(num.index(30))
",True
498,Write a Pandas program to generate time series combining day and intraday offsets intervals. ,"import pandas as pd
dateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')
print(""Time series with frequency 3h10min:"")
print(dateset1)
dateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')
print(""\nTime series with frequency 1 day 10 minutes and 20 microseconds:"")
print(dateset2)
",True
499,Write a Python program to print the following integers with zeros on the left of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(left padding, width 2): ""+""{:0>2d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(left padding, width 6): ""+""{:0>6d}"".format(y));
print()
",True
500,Write a Python program to extract characters from various text files and puts them into a list. ,"import glob
char_list = []
files_list = glob.glob(""*.txt"")
for file_elem in files_list:
   with open(file_elem, ""r"") as f:
       char_list.append(f.read())
print(char_list)
",True
501,Write a Python program to add two given lists using map and lambda. ,"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
print(""Original list:"")
print(nums1)
print(nums2)
result = map(lambda x, y: x + y, nums1, nums2)
print(""\nResult: after adding two list"")
print(list(result))
",True
502,Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,21):
		l.append(i**2)
	print(l[:5])
	print(l[-5:])

printValues()
",True
503,Write a NumPy program to extract all the rows from a given array where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod'],
 ['02', 'V', 'Artemiy Ellie'],
 ['03', 'V', 'Baptist Kamal'],
 ['04', 'V', 'Lavanya Davide'],
 ['05', 'V', 'Fulton Antwan'],
 ['06', 'V', 'Euanthe Sandeep'],
 ['07', 'V', 'Endzela Sanda'],
 ['08', 'V', 'Victoire Waman'],
 ['09', 'V', 'Briar Nur'],
 ['10', 'V', 'Rose Lykos']])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nStudent name starting with"",char,"":"")
print(result)
char='1'
result = student[np.char.startswith(student[:,0], char)]
print(""\nStudent id starting with"",char,"":"")
print(result)
",True
504,Write a Python program to square the elements of a list using map() function. ,"def square_num(n):
  return n * n
nums = [4, 5, 2, 9]
print(""Original List: "",nums)
result = map(square_num, nums)
print(""Square the elements of the said list using map():"")
print(list(result))
",True
506,Write a Python program to read a file line by line store it into an array. ,"def file_read(fname):
        content_array = []
        with open(fname) as f:
                
                for line in f:
                        content_array.append(line)
                print(content_array)

file_read('test.txt')
",True
507,Write a Python program that takes a text file as input and returns the number of words of a given text file. ,"def count_words(filepath):
   with open(filepath) as f:
       data = f.read()
       data.replace("","", "" "")
       return len(data.split("" ""))
print(count_words(""words.txt""))
",True
508,Write a Python program for nth Catalan Number. ,"def catalan_number(num):
    if num <=1:
         return 1
   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num
 
for n in range(10):
    print(catalan_number(n))
	",True
509,Write a Python program to get the total length of all values of a given dictionary with string values. ,"def test(dictt):
    result = sum((len(values) for values in dictt.values()))
    return result
color = {'#FF0000':'Red', '#800000':'Maroon', '#FFFF00':'Yellow', '#808000':'Olive'}
print(""\nOriginal dictionary:"")
print(color)
print(""\nTotal length of all values of the said dictionary with string values:"")
print(test(color))
",True
510,Write a Pandas program to convert 1,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
print(""Original DataFrame:"")
print(df)
print(""\nMultiIndex using columns 't_id', ‘school_code’ and 'class':"")
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nConvert 1st and 3rd levels in the index frame into columns:"")
df2 = df1.reset_index(level=['t_id', 'class'])
print(df2)
",True
511,Write a Python program to access a function inside a function. ,"def test(a):
        def add(b):
                nonlocal a
                a += 1
                return a+b
        return add
func= test(4)
print(func(4))
",True
512,Write a Python program to filter a list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nEven numbers from the said list:"")
even_nums = list(filter(lambda x: x%2 == 0, nums))
print(even_nums)
print(""\nOdd numbers from the said list:"")
odd_nums = list(filter(lambda x: x%2 != 0, nums))
print(odd_nums)
",True
513,"Write a Pandas program to find out the 'WHO region, 'Country', 'Beverage Types' in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details ('WHO region','Country','Beverage Types') \nin the year ‘1986’ or ‘1989’ where  WHO region is ‘Americas’  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))][['WHO region','Country','Beverage Types']].head(10))
",True
514,Write a Python program to construct a Decimal from a float and a Decimal from a string. Also represent the Decimal value as a tuple. Use decimal.Decimal,"import decimal
print(""Construct a Decimal from a float:"")
pi_val = decimal.Decimal(3.14159)
print(pi_val)
print(pi_val.as_tuple())
print(""\nConstruct a Decimal from a string:"")
num_str = decimal.Decimal(""123.25"")
print(num_str)
print(num_str.as_tuple())
",True
515,Write a Python program to remove all duplicate elements from a given array and returns a new array. ,"import array as arr
def test(nums):
    return sorted(set(nums),key=nums.index)

array_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
array_num = arr.array('i', [2, 4, 2, 6, 4, 8])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
",True
516,Write a Pandas program to find and replace the missing values in a given DataFrame which do not have any valuable information. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,""--"",70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,""?"",12.43,2480.4,250.45, 3045.6],
'ord_date': ['?','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,""--"",3002,3001,3001],
'salesman_id':[5002,5003,""?"",5001,np.nan,5002,5001,""?"",5003,5002,5003,""--""]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace the missing values with NaN:"")
result = df.replace({""?"": np.nan, ""--"": np.nan})
print(result)
",True
517,Write a Python program to find the index of the last element in the given list that satisfies the provided testing function. ,"def find_last_index(lst, fn):
  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))

print(find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1))
",True
518,Write a Python program to iterate over all pairs of consecutive items in a given list. ,"def pairwise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp
l1 = [1,1,2,3,3,4,4,5]
print(""Original lists:"")
print(l1)
print(""\nIterate over all pairs of consecutive items of the said list:"")
print(pairwise(l1))
",True
519,Write a Python program to create a list with the non-unique values filtered out. ,"from collections import Counter
def filter_non_unique(lst):
  return [item for item, count in Counter(lst).items() if count == 1]
print(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))
",True
520,Write a Python program to find the second smallest number in a list. ,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]   

print(second_smallest([1, 2, -8, -2, 0, -2]))
print(second_smallest([1, 1, 0, 0, 2, -2, -2]))
print(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_smallest([2,2]))
print(second_smallest([2]))
",True
521,"Write a Python program to create a deque and append few elements to the left and right, then remove some elements from the left, right sides and reverse the deque. ","import collections

deque_colors = collections.deque([""Red"",""Green"",""White""])
print(deque_colors)

print(""\nAdding to the left: "")
deque_colors.appendleft(""Pink"")
print(deque_colors)

print(""\nAdding to the right: "")
deque_colors.append(""Orange"")
print(deque_colors)

print(""\nRemoving from the right: "")
deque_colors.pop()
print(deque_colors)

print(""\nRemoving from the left: "")
deque_colors.popleft()
print(deque_colors)

print(""\nReversing the deque: "")
deque_colors.reverse()
print(deque_colors)
",True
522,Write a Python program to count float number in a given mixed list using lambda. ,"def count_integer(list1):
    ert = list(map(lambda i: isinstance(i, float), list1)) 
    result = len([e for e in ert if e])         
    return result
list1 = [1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
print(""Original list:"")
print(list1)
print(""\nNumber of floats in the said mixed list:"")
print(count_integer(list1))
",True
523,Write a NumPy program to compute the histogram of nums against the bins. ,"import numpy as np
import matplotlib.pyplot as plt
nums = np.array([0.5, 0.7, 1.0, 1.2, 1.3, 2.1])
bins = np.array([0, 1, 2, 3])
print(""nums: "",nums)
print(""bins: "",bins)
print(""Result:"", np.histogram(nums, bins))
plt.hist(nums, bins=bins)
plt.show()
",True
524,Write a Python program to extract numbers from a given string. ,"def test(str1):
    result = [int(str1) for str1 in str1.split() if str1.isdigit()]
    return result
str1 = ""red 12 black 45 green"" 
print(""Original string:"", str1) 
print(""Extract numbers from the said string:"")
print(test(str1))
",True
525,Write a Pandas program to partition each of the passengers into four categories based on their age. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.cut(df['age'], [0, 10, 30, 60, 80])
print(result)
",True
526,"Write a NumPy program to fetch all items from a given array of 4,5 shape which are either greater than 6 and a multiple of 3. ","import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
print(""Original arrays:"")
print(array_nums1)
result = array_nums1[(array_nums1>6) & (array_nums1%3==0)]
print(""\nItems greater than 6 and a multiple of 3 of the said array:"")
print(result)
",True
527,Write a Python program to find smallest window that contains all characters of a given string. ,"from collections import defaultdict   

def find_sub_string(str): 
    str_len = len(str) 
      
    
    dist_count_char = len(set([x for x in str])) 
  
    ctr, start_pos, start_pos_index, min_len = 0, 0, -1, 9999999999
    curr_count = defaultdict(lambda: 0) 
    for i in range(str_len): 
        curr_count[str[i]] += 1
 
        if curr_count[str[i]] == 1: 
            ctr += 1
  
        if ctr == dist_count_char: 
            while curr_count[str[start_pos]] > 1: 
                if curr_count[str[start_pos]] > 1: 
                    curr_count[str[start_pos]] -= 1
                start_pos += 1
  
            len_window = i - start_pos + 1
            if min_len > len_window: 
                min_len = len_window 
                start_pos_index = start_pos 
    return str[start_pos_index: start_pos_index + min_len] 
      
str1 = ""asdaewsqgtwwsa""
print(""Original Strings:\n"",str1)
print(""\nSmallest window that contains all characters of the said string:"")
print(find_sub_string(str1)) 
",True
528,Write a Python program to find the years where 25th of December be a Sunday between 2000 and 2150. ,"'''Days of the week'''

 
from datetime import date
from itertools import islice
 
 

def xmasIsSunday(y):
    '''True if Dec 25 in the given year is a Sunday.'''
    return 6 == date(y, 12, 25).weekday()
 
 

def main():
    '''Years between 2000 and 2150 with 25 December on a Sunday'''
 
    xs = list(filter(
        xmasIsSunday,
        enumFromTo(2000)(2150)
    ))
    total = len(xs)
    print(
        fTable(main.__doc__ + ':\n\n' + '(Total ' + str(total) + ')\n')(
            lambda i: str(1 + i)
        )(str)(index(xs))(
            enumFromTo(0)(total - 1)
        )
    )
 
 

 

def enumFromTo(m):
    '''Integer enumeration from m to n.'''
    return lambda n: list(range(m, 1 + n))
 
 

def index(xs):
    '''Item at given (zero-based) index.'''
    return lambda n: None if 0 > n else (
        xs[n] if (
            hasattr(xs, ""__getitem__"")
        ) else next(islice(xs, n, None))
    )
 
 

def unlines(xs):
    '''A single string formed by the intercalation
       of a list of strings with the newline character.
    '''
    return '\n'.join(xs)
 
 



def fTable(s):
    '''Heading -> x display function -> fx display function ->
                     f -> xs -> tabular string.
    '''
    def go(xShow, fxShow, f, xs):
        ys = [xShow(x) for x in xs]
        w = max(map(len, ys))
        return s + '\n' + '\n'.join(map(
            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),
            xs, ys
        ))
    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(
        xShow, fxShow, f, xs
    ) 
 

if __name__ == '__main__':
    main()
",True
529,Write a Python program to accept a filename from the user and print the extension of that. ,"filename = input(""Input the Filename: "")
f_extns = filename.split(""."")
print (""The extension of the file is : "" + repr(f_extns[-1]))
",True
530,Write a NumPy program to save two given arrays into a single file in compressed format (.npz format) and load it. ,"import numpy as np
import os
x = np.arange(10)
y = np.arange(11, 20)
print(""Original arrays:"")
print(x)
print(y)
np.savez('temp_arra.npz', x=x, y=y)
print(""Load arrays from the 'temp_arra.npz' file:"")
with np.load('temp_arra.npz') as data:
    x2 = data['x']
    y2 = data['y']
    print(x2)
    print(y2)
",True
531,Write a Python program to swap two sublists in a given list. ,"nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
print(""Original list:"")
print(nums)
nums[6:10], nums[1:3] = nums[1:3], nums[6:10]
print(""\nSwap two sublists of the said list:"")
print(nums)
nums[1:3], nums[4:6] = nums[4:6], nums[1:3]
print(""\nSwap two sublists of the said list:"")
print(nums)
",True
532,Write a Pandas program to convert a specified character column in upper/lower cases in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

df1 = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nUpper cases in comapny_code:"")
df['upper_company_code'] = list(map(lambda x: x.upper(), df['company_code']))
print(df)
print(""\nLower cases in comapny_code:"")
df1['lower_company_code'] = list(map(lambda x: x.lower(), df1['company_code']))
print(df1)
",True
533,Write a NumPy program to stack 1-D arrays as columns wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.column_stack((x, y))
print(""\nStack 1-D arrays as columns wise:"")
print(new_array)
",True
534,Write a NumPy program to get the lower-triangular L in the Cholesky decomposition of a given array. ,"import numpy as np
a = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
L = np.linalg.cholesky(a)
print(""Lower-trianglular L in the Cholesky decomposition of the said array:"")
print(L)
",True
535,Write a Python program to get the unique values in a given list of lists. ,"def unique_values_in_list_of_lists(lst):
    result = set(x for l in lst for x in l)
    return list(result)
nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(nums))
chars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]
print(""\nOriginal list:"")
print(chars)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(chars))
",True
536,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.cond(m)
print(""Condition number of the said matrix:"")
print(result)
",True
537,"Write a Python program to create and display all combinations of letters, selecting each letter from a different key in a dictionary. ","import itertools      
d ={'1':['a','b'], '2':['c','d']}
for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    print(''.join(combo))
	",True
538,Write a Pandas program to filter the specified columns and records by range from world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFiltering records by label or index:"")
print(w_a_con.loc[0:4, [""WHO region"", ""Beverage Types""]])
",True
539,Write a NumPy program to create a new array which is the average of every consecutive triplet of elements of a given array. ,"import numpy as np
arr1 = np.array([1,2,3, 2,4,6, 1,2,12, 0,-12,6])
print(""Original array:"")
print(arr1)
result = np.mean(arr1.reshape(-1, 3), axis=1)
print(""Average of every consecutive triplet of elements of the said array:"")
print(result)
",True
540,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",True
541,Write a Pandas program to get the length of the integer of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nLength of sale_amount:"")
df['sale_amount_length'] = df['sale_amount'].map(str).apply(len)
print(df)
",True
542,"Write a Python program to get information about the file pertaining to the file mode. Print the information - ID of device containing file, inode number, protection, number of hard links, user ID of owner, group ID of owner, total size (in bytes), time of last access, time of last modification and time of last status change. ","import os
path = 'e:\\testpath\\p.txt'
fd = os.open(path, os.O_RDWR)
info = os.fstat(fd)
print (f""ID of device containing file: {info.st_dev}"")
print (f""Inode number: {info.st_ino}"")
print (f""Protection: {info.st_mode}"")
print (f""Number of hard links: {info.st_nlink}"")
print (f""User ID of owner: {info.st_uid}"")
print (f""Group ID of owner: {info.st_gid}"")
print (f""Total size, in bytes: {info.st_size}"")
print (f""Time of last access: {info.st_atime}"")
print (f""Time of last modification: {info.st_mtime }"")
print (f""Time of last status change: {info.st_ctime }"")
os.close( fd)
",True
543,Write a Python program to create a flat list of all the values in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.values())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}
print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the values of the said flat dictionary:"")
print(test(students))
",True
544,rite a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence.,"items = []
for i in range(100, 401):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):
        items.append(s)
print( "","".join(items))
",True
545,Write a Python program to sort a list of dictionaries using Lambda. ,"models = [{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':'2', 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}]
print(""Original list of dictionaries :"")
print(models)
sorted_models = sorted(models, key = lambda x: x['color'])
print(""\nSorting the List of dictionaries :"")
print(sorted_models)
",True
546,Write a NumPy program to normalize a 3x3 random matrix. ,"import numpy as np
x= np.random.random((3,3))
print(""Original Array:"")
print(x)
xmax, xmin = x.max(), x.min()
x = (x - xmin)/(xmax - xmin)
print(""After normalization:"")
print(x)
",True
547,Write a NumPy program to get the qr factorization of a given array. ,"import numpy as np
a = np.array([[4, 12, -14], [12, 37, -53], [-14, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
q, r = np.linalg.qr(a)
print(""qr factorization of the said array:"")
print( ""q=\n"", q, ""\nr=\n"", r)
",True
548,Write a Python program to print all permutations with given repetition number of characters of a given string. ,"from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))
print(all_repeat('xyz', 2))
print(all_repeat('abcd', 4))
",True
549,Write a Python program to test if a variable is a list or tuple or a set. ,"

x = ('tuple', False, 3.2, 1)
if type(x) is list:
    print('x is a list')
elif type(x) is set:
    print('x is a set')
elif type(x) is tuple:
    print('x is a tuple')    
else:
    print('Neither a list or a set or a tuple.')
",True
550,Write a Python program to get all possible combinations of the elements of a given list using itertools module. ,"import itertools
def combinations_list(list1):
    temp = []
    for i in range(0,len(list1)+1):
        temp.append(list(itertools.combinations(list1,i)))
    return temp

colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said list’s elements:"")
print(combinations_list(colors))
",True
551,Write a Pandas program to replace NaNs with a single constant value in specified columns in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace NaNs with a single constant value:"")
result = df['ord_no'].fillna(0, inplace=False)
print(result)
",True
552,Write a Python program to count the occurrences of the items in a given list using lambda. ,"def count_occurrences(nums):
    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))
    return result
nums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]
print(""Original list:"")
print(nums)
print(""\nCount the occurrences of the items in the said list:"")
print(count_occurrences(nums))
",True
553,Write a NumPy program to generate an array of 15 random numbers from a standard normal distribution. ,"import numpy as np
rand_num = np.random.normal(0,1,15)
print(""15 random numbers from a standard normal distribution:"")
print(rand_num)
",True
554,Write a Python program to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). ,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)

print(sum_series(6))
print(sum_series(10))
",True
555,"Write a Pandas program to create a horizontal stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.barh(stacked=True)
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
",True
556,Write a Pandas program to create a dataframe indexing by date and time. ,"import pandas as pd
print(""Create a dataframe, indexing by date and time:"")

dt_range = pd.date_range(start ='2020-05-12 07:10:10', freq ='S', periods = 10) 
df_dt = pd.DataFrame({""Sale_amt"":[100, 110, 117, 150, 112, 99, 129, 135, 140, 150]},
                            index = dt_range)
print(df_dt)
",True
557,Write a Pandas program to create a time series object that has time indexed data. Also select the dates of same year and select the dates between certain dates. ,"import pandas as pd
index = pd.DatetimeIndex(['2011-09-02', '2012-08-04',
                          '2015-09-03', '2010-08-04',
                          '2015-03-03', '2011-08-04',
                          '2015-04-03', '2012-08-04'])

s_dates = pd.Series([0, 1, 2, 3, 4, 5, 6, 7], index=index)

print(""Time series object with indexed data:"")
print(s_dates)
print(""\nDates of same year:"")
print(s_dates['2015'])
print(""\nDates between 2012-01-01 and 2012-12-31"")
print(s_dates['2012-01-01':'2012-12-31']) 
",True
558,Write a NumPy program to remove the leading whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
lstripped_char = np.char.lstrip(x)
print(""\nRemove the leading whitespaces : "", lstripped_char)
",True
559,Write a Python program to split a list into different variables. ,"color = [(""Black"", ""#000000"", ""rgb(0, 0, 0)""), (""Red"", ""#FF0000"", ""rgb(255, 0, 0)""),
         (""Yellow"", ""#FFFF00"", ""rgb(255, 255, 0)"")]
var1, var2, var3 = color
print(var1)
print(var2)
print(var3)
",True
560,Write a Python program to find the first two elements of a given list whose sum is equal to a given value. Use itertools module to solve the problem. ,"import itertools as it
def sum_pairs_list(nums, n):
    for num2, num1 in list(it.combinations(nums[::-1], 2))[::-1]:
        if num2 + num1 == n:
            return [num1, num2]

nums = [1,2,3,4,5,6,7]     
n = 10
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))

nums = [1,2,-3,-4,-5,6,-7]     
n = -6
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))
",True
561,"Write a Pandas program to create an index labels by using 64-bit integers, using floating-point numbers in a given dataframe. ","import pandas as pd
print(""Create an Int64Index:"")
df_i64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[1, 2, 3, 4, 5, 6])
print(df_i64)
print(""\nView the Index:"")
print(df_i64.index)

print(""\nFloating-point labels using Float64Index:"")
df_f64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[.1, .2, .3, .4, .5, .6])
print(df_f64)
print(""\nView the Index:"")
print(df_f64.index)
",True
562,Write a NumPy program to convert a NumPy array into Python list structure. ,"import numpy as np
x= np.arange(6).reshape(3, 2)
print(""Original array elements:"")
print(x)
print(""Array to list:"")
print(x.tolist())
",True
563,Write a Python program to copy of a deque object and verify the shallow copying process. ,"import collections
tup1 = (1,3,5,7,9)
dq1 = collections.deque(tup1)
dq2 = dq1.copy()
print(""Content of dq1:"")
print(dq1)
print(""dq2 id:"")
print(id(dq1))
print(""\nContent of dq2:"")
print(dq2)
print(""dq2 id:"")
print(id(dq2))
print(""\nChecking the first element of dq1 and dq2 are shallow copies:"")
print(id(dq1[0]))
print(id(dq2[0]))
",True
564,Write a Python program to create an instance of an OrderedDict using a given dictionary. Sort the dictionary during the creation and print the members of the dictionary in reverse order. ,"from collections import OrderedDict
dict = {'Afghanistan': 93, 'Albania': 355, 'Algeria': 213, 'Andorra': 376, 'Angola': 244}
new_dict = OrderedDict(dict.items())
for key in new_dict:
    print (key, new_dict[key])

print(""\nIn reverse order:"")
for key in reversed(new_dict):
    print (key, new_dict[key])
",True
565,"Write a Python program to retrieve the HTML code of the title, its text, and the HTML code of its parent. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""title"")
print(soup.title)
print(""title text"")
print(soup.title.text)
print(""Parent content of the title:"")
print(soup.title.parent)
",True
566,Write a Python program to shuffle and print a specified list. ,"from random import shuffle
color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
shuffle(color)
print(color)
",True
567,Write a NumPy program to swap columns in a given array. ,"import numpy as np
my_array = np.arange(12).reshape(3, 4)
print(""Original array:"")
print(my_array)
my_array[:,[0, 1]] = my_array[:,[1, 0]]
print(""\nAfter swapping arrays:"")
print(my_array)
",True
568,Write a Pandas program to find out the alcohol consumption details in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year ‘1986’ or ‘1989’ where  WHO region is ‘Americas’  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))].head(10))
",True
569,Write a NumPy program to remove a specific column from a given array. ,"import numpy as np 
nums = np.random.random((7, 5))
print(""Original array:"")
print(nums)
print(""\nDelete the first column of the said array:"")
print(np.delete(nums, [0], axis=1))
print(""\nDelete the last column of the said array:"")
print(np.delete(nums, [4], axis=1))
",True
570,Write a Pandas program convert the first and last character of each word to upper case in each word of a given series. ,"import pandas as pd
series1 = pd.Series(['php', 'python', 'java', 'c#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: x[0].upper() + x[1:-1] + x[-1].upper())
print(""\nFirst and last character of each word to upper case:"")
print(result)
",True
571,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
",True
572,Write a NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10. ,"import numpy as np
x = np.random.randint(0, 11, 5)
print(""Vector of length 5 filled with arbitrary integers from 0 to 10:"")
print(x)
",True
573,Write a Pandas program to insert a column in the sixth position of the said excel sheet and fill it with NaN values. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.insert(3, ""column1"", np.nan)
print(df.head) 
",True
574,Write a Pandas program to sort a given Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
new_s = pd.Series(s).sort_values()
print(new_s)
",True
575,Write a Python program to add two positive integers without using the '+' operator. ,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a
print(add_without_plus_operator(2, 10))
print(add_without_plus_operator(-20, 10))
print(add_without_plus_operator(-10, -20))
",True
576,Write a Pandas program to create a plot to present the number of unidentified flying object (UFO) reports per year. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nPlot to present the number unidentified flying objects (ufo) found year wise:"")
df[""Year""] = df.Date_time.dt.year
df.Year.value_counts().sort_index().plot(x=""Year"")
",True
577,Write a Python program to sort a list of elements using Comb sort. ,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0

    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)

        swapped = False
        i = 0

        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums

num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(comb_sort(nums))
",True
578,Write a Python program to find maximum difference pair in a given list. ,"from itertools import combinations
from heapq import nlargest

def test(lst):
    result = nlargest(1, combinations(lst, 2),
               key=lambda sub: abs(sub[0] - sub[1]))
    return result

marks = [32,14,90,10,22,42,31]
print(""\nOriginal list:"")
print(marks)
print(""\nFind maximum difference pair of the said list:"")
print(test(marks))
",True
579,Write a Python program to move the specified number of elements to the end of the given list. ,"def move_end(nums, offset):
  return nums[offset:] + nums[:offset] 
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -7))
",True
580,Write a Python program to insert an element at the beginning of a given OrderedDictionary. ,"from collections import OrderedDict
color_orderdict = OrderedDict([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 
print(""Original OrderedDict:"")
print(color_orderdict)
print(""Insert an element at the beginning of the said OrderedDict:"")
color_orderdict.update({'color4':'Orange'})
color_orderdict.move_to_end('color4', last = False)
print(""\nUpdated OrderedDict:"")
print(color_orderdict)
",True
581,Write a Python program to print the following floating numbers upto 2 decimal places. ,"x = 3.1415926
y = 12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number: ""+""{:.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number: ""+""{:.2f}"".format(y));
print() 
",True
582,Write a Python program to extract every first or specified element from a given two-dimensional list. ,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
N = 0
print(""\nExtract every first element from the said given two dimensional list:"")
print(specified_element(nums, N))
N = 2
print(""\nExtract every third element from the said given two dimensional list:"")
print(specified_element(nums, N))
",True
583,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
",True
584,Write a Python program to iterate over dictionaries using for loops. ,"d = {'Red': 1, 'Green': 2, 'Blue': 3} 
for color_key, value in d.items():
     print(color_key, 'corresponds to ', d[color_key]) 
",True
585,Write a Python program to sort unsorted numbers using Stooge sort. ,"
def stooge_sort(arr):
    stooge(arr, 0, len(arr) - 1)
    return arr
def stooge(arr, i, h):
    if i >= h:
        return
    
    if arr[i] > arr[h]:
        arr[i], arr[h] = arr[h], arr[i]
    
    if h - i + 1 > 2:
        t = (int)((h - i + 1) / 3)
        
        stooge(arr, i, (h - t))
        
        stooge(arr, i + t, (h))
        
        stooge(arr, i, (h - t))
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
",True
586,Write a Python program to rearrange positive and negative numbers in a given array using Lambda. ,"array_nums = [-1, 2, -3, 5, 7, 8, 9, -10]
print(""Original arrays:"")
print(array_nums)
result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
print(""\nRearrange positive and negative numbers of the said array:"")
print(result)
",True
587,Write a Python program to perform an action if a condition is true. ,"n=1
if n == 1:
   print(""\nFirst day of a Month!"")
print()
",True
588,Write a Python program to find the maximum length of a substring in a given string where all the characters of the substring are same. Use itertools module to solve the problem. ,"import itertools

def max_sub_string(str1):
    return max(len(list(x)) for _, x in itertools.groupby(str1))
    
    
str1 = ""aaabbccddeeeee""

print(""Original string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))

str1 = ""c++ exercises""
print(""\nOriginal string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))
",True
589,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date between two specific month and year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df[(df['hire_date'] >='Jan-2005') & (df['hire_date'] <= 'Dec-2006')].head()
result
",True
590,Write a Python program to find the list of words that are longer than n from a given list of words. ,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	
print(long_words(3, ""The quick brown fox jumps over the lazy dog""))
",True
591,"Write a Python program to generate 26 text files named A.txt, B.txt, and so on up to Z.txt. ","import string, os
if not os.path.exists(""letters""):
   os.makedirs(""letters"")
for letter in string.ascii_uppercase:
   with open(letter + "".txt"", ""w"") as f:
       f.writelines(letter)
",True
592,Write a NumPy program to split a given text into lines and split the single line into array values. ,"import numpy as np 
student = """"""01	V	Debby Pramod
02	V	Artemiy Ellie
03	V	Baptist Kamal
04	V	Lavanya Davide
05	V	Fulton Antwan
06	V	Euanthe Sandeep
07	V	Endzela Sanda
08	V	Victoire Waman
09	V	Briar Nur
10	V	Rose Lykos""""""

print(""Original text:"") 
print(student)
text_lines = student.splitlines()
text_lines = [r.split('\t') for r in text_lines]
result = np.array(text_lines, dtype=np.str)
print(""\nArray from the said text:"")
print(result)
",True
593,Write a Numpy program to test whether numpy array is faster than Python list or not. ,"import time
import numpy as np 
SIZE = 200000 
list1 = range(SIZE)
list2 = range(SIZE)
arra1 = np.arange(SIZE)
arra2 = np.arange(SIZE)
start_list = time.time()
result=[(x,y) for x,y in zip(list1,list2)]
print(""Time to aggregates elements from each of the iterables:"")
print(""List:"")
print((time.time()-start_list)*1000)
start_array = time.time()
result = arra1 + arra2
print(""NumPy array:"")
print((time.time()-start_array)*1000)
",True
594,Write a Python program to insert an element in a given list after every nth position. ,"def insert_elemnt_nth(lst, ele, n):
    result = []
    for st_idx in range(0, len(lst), n):
        result.extend(lst[st_idx:st_idx+n])
        result.append(ele)
    result.pop()    
    return result

nums = [1,2,3,4,5,6,7,8,9,0]
print(""Original list:"")
print(nums)
i_ele = 'a'
i_ele_pos = 2
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""nd element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
i_ele = 'b'
i_ele_pos = 4
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""th element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
",True
595,"Write a NumPy program to create one-dimensional array of single, two and three digit numbers. ","import numpy as np  
nums = np.arange(1, 21)
print(""One-dimensional array of single digit numbers:"") 
print(nums)
nums = np.arange(10, 21)
print(""\nOne-dimensional array of two digit numbers:"") 
print(nums)
nums = np.arange(100, 201)
print(""\nOne-dimensional array of three digit numbers:"") 
print(nums)
",True
596,Write a NumPy program to create an array of all the even integers from 30 to 70. ,"import numpy as np
array=np.arange(30,71,2)
print(""Array of all the even integers from 30 to 70"")
print(array) 
",True
597,"Write a Python program to get the symmetric difference between two iterables, without filtering out duplicate values. ","def symmetric_difference(x, y):
  (_x, _y) = (set(x), set(y))
  return [item for item in x if item not in _y] + [item for item in y
          if item not in _x]
print(symmetric_difference([10, 20, 30], [10, 20, 40]))
",True
598,Write a Python program to create a file and write some text and rename the file name. ,"import glob
import os
with open('a.txt', 'w') as f:
   f.write('Python program to create a symbolic link and read it to decide the original file pointed by the link.')
print('\nInitial file/dir name:', os.listdir())
with open('a.txt', 'r') as f:
   print('\nContents of a.txt:', repr(f.read()))   
os.rename('a.txt', 'b.txt')
print('\nAfter renaming initial file/dir name:', os.listdir())
with open('b.txt', 'r') as f:
   print('\nContents of b.txt:', repr(f.read()))
",True
599,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '-'.join(
    sub(r""(\s|_|-)+"","" "",
    sub(r""[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+"",
    lambda mo: ' ' + mo.group(0).lower(), s)).split())
 
print(snake_case('JavaScript'))
print(snake_case('GDScript'))
print(snake_case('BTW...what *do* you call that naming style? snake_case? '))
",True
600,"Write a NumPy program to find rows of a given array of shape (8,3) that contain elements of each row of another given array of shape (2,2). ","import numpy as np
nums1 = np.random.randint(0,6,(6,4))
nums2 = np.random.randint(0,6,(2,3))
print(""Original arrays:"")
print(nums1)
print(""\n"",nums2)
temp = (nums1[..., np.newaxis, np.newaxis] == nums2)
rows = (temp.sum(axis=(1,2,3)) >= nums2.shape[1]).nonzero()[0]
print(""\nRows of a given array that contain elements of each row of another given array:"")
print(rows)
",True
601,Write a Python program to find a triplet in an array such that the sum is closest to a given number. Return the sum of the three integers. ,"
from bisect import bisect, bisect_left
class Solution:
    def threeSumClosest(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""
        nums = sorted(nums)
        
        top = [
            0,
            nums[-1],
            nums[-1] + nums[-2]
        ]
        min_diff = float('inf')
        three_sum = 0
        
        
        
        def closest(curr_target, curr_n, lo=0):
            if curr_n == 0:
                nonlocal min_diff, three_sum
                if abs(curr_target) < min_diff:
                    min_diff = abs(curr_target)
                    three_sum = target - curr_target
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i) - 1
            min_i = max(min_i, lo)

            for i in range(min_i, max_i + 1): 
                if min_diff == 0:
                    return
                if i == min_i or nums[i] != nums[i - 1]:
                    next_target = curr_target - nums[i]
                    closest(next_target, next_n, i + 1)

        closest(target, 3)
        return three_sum

s = Solution()
nums = [1, 2, 3, 4, 5, -6]
target = 14
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)

nums = [1, 2, 3, 4, -5, -6]
target = 5
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)
",True
602,Write a Python program to display the first and last colors from the following list. ,"color_list = [""Red"",""Green"",""White"" ,""Black""]
print( ""%s %s""%(color_list[0],color_list[-1]))
",True
603,"Write a Pandas program to create a plot of Open, High, Low, Close, Adjusted Closing prices and Volume of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
stock_data.plot(subplots = True, figsize = (8, 8));
plt.legend(loc = 'best')
plt.suptitle('Open,High,Low,Close,Adj Close prices & Volume of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
",True
604,Write a Python program to delete a node with the given key in a given Binary search tree (BST). ,"
class TreeNode(object):
    def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None

def delete_Node(root, key):
  
	if not root: 
		return root
	
	if root.val > key: 
		root.left = delete_Node(root.left, key)
	
	elif root.val < key: 
		root.right= delete_Node(root.right, key)
	
	else: 
	
		if not root.right:
			return root.left
	
		if not root.left:
			return root.right
  
  
  
		temp_val = root.right
		mini_val = temp_val.val
		while temp_val.left:
			temp_val = temp_val.left
			mini_val = temp_val.val
  
		root.right = deleteNode(root.right,root.val)
	return root

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   
    
root = TreeNode(5)  
root.left = TreeNode(3)  
root.right = TreeNode(6) 
root.left.left = TreeNode(2)  
root.left.right = TreeNode(4) 
root.left.right.left = TreeNode(7)  
print(""Original node:"")
print(preOrder(root))
result = delete_Node(root, 4)
print(""After deleting specified node:"")
print(preOrder(result))
",True
605,"Write a Python program to generate the running maximum, minimum value of the elements of an iterable. ","from itertools import accumulate
def running_max_product(iters):
    return accumulate(iters, max)

result = running_max_product([1,3,2,7,9,8,10,11,12,14,11,12,7])
print(""Running maximum value of a list:"")
for i in result:
    print(i)

result = running_max_product((1,3,3,7,9,8,10,9,8,14,11,15,7))
print(""Running maximum value of a Tuple:"")
for i in result:
    print(i)
def running_min_product(iters):
    return accumulate(iters, min)

result = running_min_product([3,2,7,9,8,10,11,12,1,14,11,12,7])
print(""Running minimum value of a list:"")
for i in result:
    print(i)

result = running_min_product((1,3,3,7,9,8,10,9,8,0,11,15,7))
print(""Running minimum value of a Tuple:"")
for i in result:
    print(i)
",True
606,Write a Pandas program to get the items which are not common of two given series. ,"import pandas as pd
import numpy as np
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of a given series not present in another given series:"")
sr11 = pd.Series(np.union1d(sr1, sr2))
sr22 = pd.Series(np.intersect1d(sr1, sr2))
result = sr11[~sr11.isin(sr22)]
print(result)
",True
607,"Write a Pandas program to filter all columns where all entries present, check which rows and columns has a NaN and finally drop rows with any NaNs from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind  all columns which all entries present:"")
print(w_a_con.loc[:, w_a_con.notnull().all()])
print(""\nRows and columns has a NaN:"")
print(w_a_con.loc[:,w_a_con.isnull().any()])
print(""\nDrop rows with any NaNs:"")
print(w_a_con.dropna(how='any'))  
",True
608,Write a Pandas program to compute the Euclidean distance between two given series. ,"import pandas as pd
import numpy as np
x = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = pd.Series([11, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(x)
print(y)
print(""\nEuclidean distance between two said series:"")
print(np.linalg.norm(x-y))
",True
609,Write a Pandas program to convert year and day of year into a single datetime column of a dataframe.,"import pandas as pd
data = {\
""year"": [2002, 2003, 2015, 2018],
""day_of_the_year"": [250, 365, 1, 140]
}
df = pd.DataFrame(data)
print(""Original DataFrame:"")
print(df)
df[""combined""] = df[""year""]*1000 + df[""day_of_the_year""]
df[""date""] = pd.to_datetime(df[""combined""], format = ""%Y%j"")
print(""\nNew DataFrame:"")
print(df)
",True
610,Write a Python program to sort unsorted numbers using non-parallelized implementation of odd-even transposition sort. ,"def odd_even_transposition(arr_nums: list) -> list:
    arr_size = len(arr_nums)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr_nums[i + 1] < arr_nums[i]:
                arr_nums[i], arr_nums[i + 1] = arr_nums[i + 1], arr_nums[i]

    return arr_nums
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
",True
611,Write a NumPy program to replace a specific character with another in a given array of string values. ,"import numpy as np 

str1 = np.array([['Python-NumPy-Exercises'],
              ['-Python-']])
print(""Original array of string values:"") 
print(str1)
print(""\nReplace '-' with '=' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', '==')))
print(""\nReplace '-' with ' ' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', ' ')))
",True
612,Write a Python program to convert a hexadecimal color code to a tuple of integers corresponding to its RGB components. ,"def hex_to_rgb(hex):
  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4)) 
print(hex_to_rgb('FFA501'))
print(hex_to_rgb('FFFFFF'))
print(hex_to_rgb('000000'))
print(hex_to_rgb('FF0000'))
print(hex_to_rgb('000080'))
print(hex_to_rgb('C0C0C0'))
",True
613,Write a Python program to convert a given list of tuples to a list of strings using map function. ,"def tuples_to_list_string(lst):
    result = list(map(' '.join, lst))
    return result   
colors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(colors))
names = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(names))
",True
614,Write a Python program to check if the elements of the first list are contained in the second one regardless of order. ,"def is_contained_in(l1, l2):
  for x in set(l1):
    if l1.count(x) > l2.count(x):
      return False
  return True
print(is_contained_in([1, 2], [2, 4, 1]))
print(is_contained_in([1], [2, 4, 1]))
print(is_contained_in([1, 1], [4, 2, 1]))
print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))
",True
615,Write a Python program to create a histogram from a given list of integers. ,"def histogram( items ):
    for n in items:
        output = ''
        times = n
        while( times > 0 ):
          output += '*'
          times = times - 1
        print(output)

histogram([2, 3, 6, 5])
",True
616,Write a Python program that prints each item and its corresponding type from the following list.,"datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{""class"":'V', ""section"":'A'}]
for item in datalist:
   print (""Type of "",item, "" is "", type(item))
   ",True
617,Write a Python program to find the index of the first element in the given list that satisfies the provided testing function. ,"def find_index(nums, fn):
  return next(i for i, x in enumerate(nums) if fn(x))
print(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))
",True
618,Write a Python program to sort a given dictionary by key. ,"color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}

for key in sorted(color_dict):
    print(""%s: %s"" % (key, color_dict[key]))
	",True
619,Write a Python program to chose specified number of colours from three different colours and generate the unique combinations. ,"from itertools import combinations 
def unique_combinations_colors(list_data, n):
    return ["" and "".join(items) for items in combinations(list_data, r=n)]
colors = [""Red"",""Green"",""Blue""]
print(""Original List: "",colors)
n=1
print(""\nn = 1"")
print(list(unique_combinations_colors(colors, n)))
n=2
print(""\nn = 2"")
print(list(unique_combinations_colors(colors, n)))
n=3
print(""\nn = 3"")
print(list(unique_combinations_colors(colors, n)))
",True
620,Write a Pandas program to Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. ,"import pandas as pd
df1 = pd.DataFrame({'A': [None, 0, None], 'B': [3, 4, 5]})
df2 = pd.DataFrame({'A': [1, 1, 3], 'B': [3, None, 3]})
df1.combine_first(df2)
print(""Original DataFrames:"")
print(df1)
print(""--------------------"")
print(df2)
print(""\nMerge two dataframes with different columns:"")
result = df1.combine_first(df2)
print(result)
",True
621,Write a NumPy program to multiply a matrix by another matrix of complex numbers and create a new matrix of complex numbers. ,"import numpy as np
x = np.array([1+2j,3+4j])
print(""First array:"")
print(x)
y = np.array([5+6j,7+8j])
print(""Second array:"")
print(y)
z = np.vdot(x, y)
print(""Product of above two arrays:"")
print(z)
",True
622,Write a Python program to add two strings as they are numbers (Positive integer values). Return a message if the numbers are string. ,"def test(n1, n2):
    n1, n2 = '0' + n1, '0' + n2
    if (n1.isnumeric() and n2.isnumeric()):
        return str(int(n1) + int(n2))
    else:
        return 'Error in input!'
print(test(""10"", ""32""))
print(test(""10"", ""22.6""))
print(test(""100"", ""-200"")) 
",True
623,Write a Python program to insert spaces between words starting with capital letters. ,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)

print(capital_words_spaces(""Python""))
print(capital_words_spaces(""PythonExercises""))
print(capital_words_spaces(""PythonExercisesPracticeSolution""))
",True
624,Write a Python program to print the following floating numbers upto 2 decimal places with a sign. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(y));
print()
",True
625,Write a Python program to initialize and fills a list with the specified value. ,"def initialize_list_with_values(n, val = 0):
  return [val for x in range(n)] 
print(initialize_list_with_values(7))
print(initialize_list_with_values(8,3))
print(initialize_list_with_values(5,-2))
print(initialize_list_with_values(5, 3.2))
",True
626,Write a Python program to convert a given array elements to a height balanced Binary Search Tree (BST). ,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def array_to_bst(array_nums):
    if not array_nums:
        return None
    mid_num = len(array_nums)//2
    node = TreeNode(array_nums[mid_num])
    node.left = array_to_bst(array_nums[:mid_num])
    node.right = array_to_bst(array_nums[mid_num+1:])
    return node

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   

array_nums = [1,2,3,4,5,6,7]

print(""Original array:"")
print(array_nums)
result = array_to_bst(array_nums)
print(""\nArray to a height balanced BST:"")
print(preOrder(result))
",True
627,Write a Pandas program to merge two given datasets using multiple join keys. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data:"")
merged_data = pd.merge(data1, data2, on=['key1', 'key2'])
print(merged_data)
",True
628,Write a Python program to create a deep copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nCopy of the second list (Deep copy):"")
print(nums_y)
nums = [[1, 2, 3], [4, 5, 6]]
deep_copy = copy.deepcopy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nDeep copy of the said list:"")
print(deep_copy)
print(""\nChange the value of some elements of the original list:"")
nums[0][2] = 55
nums[1][1] = 77
print(""\nOriginal list:"")
print(nums)
print(""\nSecond list (Deep copy):"")
print(deep_copy)
",True
629,Write a NumPy program to get the memory usage by NumPy arrays. ,"import numpy as np
from sys import getsizeof
x = [0] * 1024
y = np.array(x)
print(getsizeof(x))
",True
630,Write a Python program to find the first tag with a given attribute value in an html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, ""lxml"")
print(soup.find( href=""https://www.w3resource.com/css/CSS-tutorials.php""))
",True
631,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
",True
632,Write a Python program to swap comma and dot in a string. ,"amount = ""32.054,23""
maketrans = amount.maketrans
amount = amount.translate(maketrans(',.', '.,'))
print(amount)
",True
633,Write a Python program to find the shortest distance from a specified character in a given string. Return the shortest distances through a list and use itertools module to solve the problem. ,"import itertools as it

def char_shortest_distancer(str1, char1):
    result = [len(str1)] * len(str1)
    prev_char = -len(str1)
    for i in it.chain(range(len(str1)),reversed(range(len(str1)))):
        if str1[i] == char1:
            prev_char = i
        result[i] = min(result[i], abs(i-prev_char))
    return result

str1 = ""w3resource""
chr1='r'
print(""Original string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))

str1 = ""python exercises""
chr1='e'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))


str1 = ""JavaScript""
chr1='S'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))
",True
634,Write a Python program to check whether a file path is a file or a directory. ,"import os  
path=""abc.txt""  
if os.path.isdir(path):  
    print(""\nIt is a directory"")  
elif os.path.isfile(path):  
    print(""\nIt is a normal file"")  
else:  
    print(""It is a special file (socket, FIFO, device file)"" )
print()
",True
635,Write a Python program to create the smallest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=False,
                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))
    return result


nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
",True
636,Write a Python program to count the occurrence of each element of a given list. ,"from collections import Counter
colors = ['Green', 'Red', 'Blue', 'Red', 'Orange', 'Black', 'Black', 'White', 'Orange']
print(""Original List:"")
print(colors)
print(""Count the occurrence of each element of the said list:"")
result = Counter(colors)
print(result)
nums = [3,5,0,3,9,5,8,0,3,8,5,8,3,5,8,1,0,2]
print(""\nOriginal List:"")
print(nums)
print(""Count the occurrence of each element of the said list:"")
result = Counter(nums)
print(result)
",True
637,Write a NumPy program to extract all the elements of the second and third columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the second and third columns"")
print(arra_data[:,[1,2]])
",True
638,Write a Pandas program to check if a day is a business day (weekday) or not. ,"import pandas as pd
def is_business_day(date):
    return bool(len(pd.bdate_range(date, date)))
print(""Check busines day or not?"")
print('2020-12-01: ',is_business_day('2020-12-01'))
print('2020-12-06: ',is_business_day('2020-12-06'))
print('2020-12-07: ',is_business_day('2020-12-07'))
print('2020-12-08: ',is_business_day('2020-12-08'))
",True
639,Write a Python program to get the powerset of a given iterable. ,"from itertools import chain, combinations
def powerset(iterable):
  s = list(iterable)
  return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))
nums = [1, 2]
print(""Original list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
",True
640,Write a Python program to create a dictionary from a string. ,"from collections import defaultdict, Counter
str1 = 'w3resource' 
my_dict = {}
for letter in str1:
    my_dict[letter] = my_dict.get(letter, 0) + 1
print(my_dict)
",True
641,Write a Pandas program to convert a dictionary to a Pandas series. ,"import pandas as pd
d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}
print(""Original dictionary:"")
print(d1)
new_series = pd.Series(d1)
print(""Converted series:"")
print(new_series)
",True
642,Write a Python program that accepts a word from the user and reverse it. ,"word = input(""Input a word to reverse: "")

for char in range(len(word) - 1, -1, -1):
  print(word[char], end="""")
print(""\n"")
",True
643,Write a NumPy program to find the indices of the maximum and minimum values along the given axis of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""Original array: "",x)
print(""Maximum Values: "",np.argmax(x))
print(""Minimum Values: "",np.argmin(x))
",True
644,Write a Python program to replace a given tag with whatever's inside a given tag. ,"from bs4 import BeautifulSoup
markup = '<a href=""https://w3resource.com/"">Python exercises.<i>w3resource.com</i></a>'
soup = BeautifulSoup(markup, ""lxml"")
a_tag = soup.a
print(""Original markup:"")
print(a_tag)
a_tag.i.unwrap()
print(""\nAfter unwrapping:"")
print(a_tag)
",True
645,Write a Python program to map two lists into a dictionary. ,"keys = ['red', 'green', 'blue']
values = ['#FF0000','#008000', '#0000FF']
color_dictionary = dict(zip(keys, values))
print(color_dictionary)
",True
646,Write a Python program to get the length in bytes of one array item in the internal representation. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Length in bytes of one array item: ""+str(array_num.itemsize))
",True
647,Write a Pandas program to convert the first column of a DataFrame as a Series. ,"import pandas as pd
d = {'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]}
df = pd.DataFrame(data=d)
print(""Original DataFrame"")
print(df)
s1 = df.ix[:,0]
print(""\n1st column as a Series:"")
print(s1)
print(type(s1))
",True
648,Write a NumPy program to find the number of rows and columns of a given matrix. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(""Original matrix:"")
print(m)
print(""Number of rows and columns of the said matrix:"")
print(m.shape)
",True
649,Write a Python program to get all possible two digit letter combinations from a digit (1 to 9) string. ,"def letter_combinations(digits):
    if digits == """":
        return []
    string_maps = {
        ""1"": ""abc"",
        ""2"": ""def"",
        ""3"": ""ghi"",
        ""4"": ""jkl"",
        ""5"": ""mno"",
        ""6"": ""pqrs"",
        ""7"": ""tuv"",
        ""8"": ""wxy"",
        ""9"": ""z""
    }
    result = [""""]
    for num in digits:
        temp = []
        for an in result:
            for char in string_maps[num]:
                temp.append(an + char)
        result = temp
    return result

digit_string = ""47""
print(letter_combinations(digit_string))
digit_string = ""29""
print(letter_combinations(digit_string))
",True
650,Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters. ,"def to_uppercase(str1):
    num_upper = 0
    for letter in str1[:4]: 
        if letter.upper() == letter:
            num_upper += 1
    if num_upper >= 2:
        return str1.upper()
    return str1

print(to_uppercase('Python'))
print(to_uppercase('PyThon'))
",True
651,Write a Python program to split a string on the last occurrence of the delimiter. ,"str1 = ""w,3,r,e,s,o,u,r,c,e""
print(str1.rsplit(',', 1))
print(str1.rsplit(',', 2))
print(str1.rsplit(',', 5))
",True
652,Write a Python program to create a flat list of all the keys in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.keys())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the keys of the said flat dictionary:"")
print(test(students))
",True
653,Write a NumPy program to compute the inverse of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.inv(m)
print(""Inverse of the said matrix:"")
print(result)
",True
654,Write a Python program to calculate the sum of all digits of the base to the specified power. ,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])


print(power_base_sum(2, 100))
print(power_base_sum(8, 10))
",True
655,Write a Python program to start a new process replacing the current process. ,"import os
import sys
program = ""python""
arguments = [""hello.py""]
print(os.execvp(program, (program,) + tuple(arguments)))
print(""Goodbye"")
",True
656,Write a Pandas program to swap the cases of a specified character column in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nSwapp cases in comapny_code:"")
df['swapped_company_code'] = list(map(lambda x: x.swapcase(), df['company_code']))
print(df)
",True
657,"Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays. ","import numpy as np
x = np.array([3, 5])
y = np.array([2, 5])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - greater"")
print(np.greater(x, y))
print(""Comparison - greater_equal"")
print(np.greater_equal(x, y))
print(""Comparison - less"")
print(np.less(x, y))
print(""Comparison - less_equal"")
print(np.less_equal(x, y))
",True
658,"Write a Python program to build a list, using an iterator function and an initial seed value. ","def unfold(fn, seed):
  def fn_generator(val):
    while True: 
      val = fn(val[1])
      if val == False: break
      yield val[0]
  return [i for i in fn_generator([None, seed])]
f = lambda n: False if n > 40 else [-n, n + 10]
print(unfold(f, 10))
",True
659,"Write a Python program to remove the K'th element from a given list, print the new list. ","def remove_kth_element(n_list, L):
    return  n_list[:L-1] + n_list[L:]

n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
result = remove_kth_element(n_list, kth_position)
print(""\nAfter removing an element at the kth position of the said list:"")
print(result)
",True
660,Write a Python program to interleave multiple given lists of different lengths. ,"def interleave_diff_len_lists(list1, list2, list3, list4):
    result = []
    l1 = len(list1)
    l2 = len(list2)
    l3 = len(list3)
    l4 = len(list4)
    
    for i in range(max(l1, l2, l3, l4)):
        if i < l1:
            result.append(list1[i])
        if i < l2:
            result.append(list2[i])
        if i < l3:
            result.append(list3[i])
        if i < l4:
            result.append(list4[i])
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
",True
661,Write a NumPy program to combine a one and a two dimensional array together and display their elements. ,"import numpy as np
x = np.arange(4)
print(""One dimensional array:"")
print(x)
y = np.arange(8).reshape(2,4)
print(""Two dimensional array:"")
print(y)
for a, b in np.nditer([x,y]):
    print(""%d:%d"" % (a,b),)
",True
662,"Write a NumPy program to calculate hyperbolic sine, hyperbolic cosine, and hyperbolic tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(np.sinh(x))
print(np.cosh(x))
print(np.tanh(x))
",True
663,Write a NumPy program to calculate the Euclidean distance. ,"from scipy.spatial import distance
p1 = (1, 2, 3)
p2 = (4, 5, 6)
d = distance.euclidean(p1, p2)
print(""Euclidean distance: "",d)
",True
664,Write a Pandas program to find the Indexes of missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['ord_no'].isnull().to_numpy().nonzero()
print(result)
",True
665,Write a NumPy program to print all the values of an array. ,"import numpy as np
np.set_printoptions(threshold=np.nan)
x = np.zeros((4, 4))
print(x)
",True
666,Write a Python program to skip the headers of a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", ""r"")
reader = csv.reader(f)
next(reader)

for row in reader:
    print(row)
",True
667,Write a NumPy program to compute pearson product-moment correlation coefficients of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nPearson product-moment correlation coefficients of the said arrays:\n"",np.corrcoef(x, y))
",True
668,Write a Python program to get the frequency of the tuples in a given list. ,"from collections import Counter
nums = [(['1', '4'], ['4', '1'], ['3', '4'], ['2', '7'], ['6', '8'], ['5','8'], ['6','8'], ['5','7'], ['2','7'])]
print(""Original list of tuples:"")
print(nums)
result = Counter(tuple(sorted(i)) for i in nums[0])
print(""\nTuples"",""    "",""frequency"")
for key,val in result.items():
    print(key,"" "", val)
",True
669,Write a NumPy program to make the length of each element 15 of a given array and the string centered / left-justified / right-justified with paddings of _. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
centered = np.char.center(x, 15, fillchar='_')
left = np.char.ljust(x, 15, fillchar='_')
right = np.char.rjust(x, 15, fillchar='_')
print(""\nCentered ="", centered)
print(""Left ="", left)
print(""Right ="", right)
",True
670,"Write a NumPy program to find the set difference of two arrays. The set difference will return the sorted, unique values in array1 that are not in array2. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values in array1 that are not in array2:"")
print(np.setdiff1d(array1, array2))
",True
671,"Write a NumPy program to create a vector of size 10 with values ranging from 0 to 1, both excluded. ","import numpy as np
x = np.linspace(0,1,12,endpoint=True)[1:-1]
print(x)
",True
672,Write a NumPy program to evaluate Einstein's summation convention of two given multidimensional arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.einsum(""n,n"", a, b)
print(""Einstein’s summation convention of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.einsum(""mk,kn"", x, y)
print(""Einstein’s summation convention of the said arrays:"")
print(result)
",True
673,Write a Python program to remove the contents of a tag in a given html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
tag = soup.a
tag = tag.clear()
print(""\nAfter clearing the contents in the tag:"")
print(soup.a)
",True
674,Write a Python program to count the number of elements in a list within a specified range. ,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr

list1 = [10,20,30,40,40,40,70,80,99]
print(count_range_in_list(list1, 40, 100))

list2 = ['a','b','c','d','e','f']
print(count_range_in_list(list2, 'a', 'e'))
",True
675,Write a Python program to concatenate elements of a list. ,"color = ['red', 'green', 'orange']
print('-'.join(color))
print(''.join(color))
",True
676,Write a Python program to access multiple elements of specified index from a given list. ,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result


nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
list_index = [0,3,5,7,10]
print(""Index list:"")
print(list_index)
print(""\nItems with specified index of the said list:"")
print(access_elements(nums, list_index))
",True
677,Write a Python program to Zip two given lists of lists. ,"list1 = [[1, 3], [5, 7], [9, 11]] 
list2 = [[2, 4], [6, 8], [10, 12, 14]]   
print(""Original lists:"")
print(list1)
print(list2)
result = list(map(list.__add__, list1, list2)) 
print(""\nZipped list:\n"" +  str(result))
",True
678,Write a Pandas program to extract unique reporting dates of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nUnique reporting dates of UFO:"")
print(df[""Date_time""].map(lambda t: t.date()).unique())
",True
679,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 20, 55])
result = df.pivot_table('survived', index=['sex', age], columns='class')
print(result)
",True
680,Write a Python program to sort unsorted numbers using Pigeonhole sorting. ,"
def pigeonhole_sort(a):
    
    min_val = min(a)  
    max_val = max(a)  
    size = max_val - min_val + 1  
    
    holes = [0] * size
    
    for x in a:
        assert isinstance(x, int), ""integers only please""
        holes[x - min_val] += 1
    
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + min_val
            i += 1
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
",True
681,"Write a Python program to calculate the difference between two iterables, without filtering duplicate values. ","def difference(x, y):
  _y = set(y)
  return [item for item in x if item not in _y]
print(difference([1, 2, 3], [1, 2, 4]))
",True
682,Write a Python program to get the number of datasets currently listed on data.gov. ,"from lxml import html
import requests
response = requests.get('http://www.data.gov/')
doc_gov = html.fromstring(response.text)
link_gov = doc_gov.cssselect('small a')[0]
print(""Number of datasets currently listed on data.gov:"")
print(link_gov.text)
",True
683,"Write a NumPy program to add two arrays A and B of sizes (3,3) and (,3). ","import numpy as np
A = np.ones((3,3))
B = np.arange(3)
print(""Original array:"")
print(""Array-1"")
print(A)
print(""Array-2"")
print(B)
print(""A + B:"")
new_array = A + B
print(new_array)
",True
684,Write a Python program to detect the number of local variables declared in a function. ,"def abc():
    x = 1
    y = 2
    str1= ""w3resource""
    print(""Python Exercises"")

print(abc.__code__.co_nlocals)
",True
685,Write a Python program to that takes any number of iterable objects or objects with a length property and returns the longest one. ,"def longest_item(*args):
  return max(args, key = len)
print(longest_item('this', 'is', 'a', 'Green'))  
print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) 
print(longest_item([1, 2, 3, 4], 'Red'))
",True
686,Write a Python program that multiply each number of given list with a given number using lambda function. Print the result. ,"nums = [2, 4, 6, 9 , 11]
n = 2
print(""Original list: "", nums)
print(""Given number: "", n)
filtered_numbers=list(map(lambda number:number*n,nums))
print(""Result:"")
print(' '.join(map(str,filtered_numbers)))
",True
687,Write a Python program to convert list to list of dictionaries. ,"color_name = [""Black"", ""Red"", ""Maroon"", ""Yellow""]
color_code = [""#000000"", ""#FF0000"", ""#800000"", ""#FFFF00""]
print([{'color_name': f, 'color_code': c} for f, c in zip(color_name, color_code)])
",True
688,"Write a Python program to round a Decimal value to the nearest multiple of 0.10, unless already an exact multiple of 0.05. Use decimal.Decimal","from decimal import Decimal


def round_to_10_cents(x):
    remainder = x.remainder_near(Decimal('0.10'))
    if abs(remainder) == Decimal('0.05'):
        return x
    else:
        return x - remainder


for x in range(80, 120):
    y = Decimal(x) / Decimal('1E2')
    print(""{0} rounds to {1}"".format(y, round_to_10_cents(y)))
",True
689,Write a Pandas program to split the following given dataframe into groups based on school code and cast grouping as a list. ,"import pandas as pd
pd.set_option('display.max_rows', None)

student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(student_data)
print('\nCast grouping as a list:')
result = student_data.groupby(['school_code'])
print(list(result))
",True
690,Write a Python program to find the missing number in a given array of numbers between 10 and 20. ,"import array as arr
def test(nums):
    return sum(range(10, 21)) - sum(list(nums))

array_num = arr.array('i', [10, 11, 12, 13, 14, 16, 17, 18, 19, 20])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
 
array_num = arr.array('i', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
",True
691,"Write a Python program to map the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def map_dictionary(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(map_dictionary([1, 2, 3], lambda x: x * x))
",True
692,Write a Python program to check if there are duplicate values in a given flat list. ,"def has_duplicates(lst):
  return len(lst) != len(set(lst))
nums = [1, 2, 3, 4, 5, 6, 7]
print(""Original list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
nums = [1, 2, 3, 3, 4, 5, 5, 6, 7]
print(""\nOriginal list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
",True
693,Write a Python program to combine two given sorted lists using heapq module. ,"from heapq import merge
nums1 = [1, 3, 5, 7, 9, 11]
nums2 = [0, 2, 4, 6, 8, 10]
print(""Original sorted lists:"")
print(nums1)
print(nums2)
print(""\nAfter merging the said two sorted lists:"")
print(list(merge(nums1, nums2)))
",True
694,Write a Python program to find shortest list of values with the keys in a given dictionary. ,"def test(dictt):
    min_value=1
    result = [k for k, v in dictt.items() if len(v) == (min_value)] 
    return result    

dictt = {
 'V': [10, 12],
 'VI': [10],
 'VII': [10, 20, 30, 40],
 'VIII': [20],
 'IX': [10,30,50,70],
 'X': [80]
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nShortest list of values with the keys of the said dictionary:"")
print(test(dictt))
",True
695,"Write a Python program to check for access to a specified path. Test the existence, readability, writability and executability of the specified path. ","import os
print('Exist:', os.access('c:\\Users\\Public\\C programming library.docx', os.F_OK))
print('Readable:', os.access('c:\\Users\\Public\\C programming library.docx', os.R_OK))
print('Writable:', os.access('c:\\Users\\Public\\C programming library.docx', os.W_OK))
print('Executable:', os.access('c:\\Users\\Public\\C programming library.docx', os.X_OK))
",True
696,Write a Python program to sort a list of elements using Selection sort. ,"def selection_sort(nums):
    for i, n in enumerate(nums):
        mn = min(range(i,len(nums)), key=nums.__getitem__)
        nums[i], nums[mn] = nums[mn], n
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(selection_sort(nums))
",True
697,Write a Pandas program to split the following datasets into groups on customer_id to summarize purch_amt and calculate percentage of purch_amt in each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
gr_data = df.groupby(['customer_id','salesman_id']).agg({'purch_amt': 'sum'})
gr_data[""% (Purch Amt.)""] = gr_data.apply(lambda x:  100*x / x.sum())
print(""\nPercentage of purch_amt in each group of customer_id:"")
print(gr_data)
",True
698,Write a Python program to extract a tag or string from a given tree of html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
i_tag = soup.i.extract()
print(""\nExtract i tag from said html Markup:"")
print(i_tag)
",True
699,Write a Python program to remove consecutive duplicates of a given list. ,"from itertools import groupby
def compress(l_nums):
    return [key for key, group in groupby(l_nums)] 
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter removing consecutive duplicates:"")
print(compress(n_list)) 

",True
700,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"", aggfunc=np.sum))
",True
701,Write a Pandas program to find out the alcohol consumption details in the year '1986' where WHO region is 'Western Pacific' and country is 'VietNam' from the world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1986 where WHO region is Western Pacific and country is VietNam :"")
print(w_a_con[(w_a_con['Year']==1986) & (w_a_con['WHO region']=='Western Pacific') & (w_a_con['Country']=='Viet Nam')])
",True
702,"Write a Python function that checks whether a passed string is palindrome or not.
","def isPalindrome(string):
	left_pos = 0
	right_pos = len(string) - 1
	
	while right_pos >= left_pos:
		if not string[left_pos] == string[right_pos]:
			return False
		left_pos += 1
		right_pos -= 1
	return True
print(isPalindrome('aza')) 
",True
703,Write a Python program to count integer in a given mixed list. ,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr

list1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]

print(""Original list:"")
print(list1)

print(""\nNumber of integers in the said mixed list:"")
print(count_integer(list1))
",True
704,Write a Python program to check if first digit/character of each element in a given list is same or not. ,"def test(lst):
    result = all(str(x)[0] == str(lst[0])[0] for x in lst) 
    return result
nums = [1234, 122, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = [1234, 922, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'a']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'ha']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
",True
705,"Write a Python program to print four values decimal, octal, hexadecimal (capitalized), binary in a single line of a given integer. ","i = int(input(""Input an integer: ""))
o = str(oct(i))[2:]
h = str(hex(i))[2:]
h = h.upper()
b = str(bin(i))[2:]
d = str(i)
print(""Decimal Octal Hexadecimal (capitalized), Binary"")
print(d,'  ',o,' ',h,'                   ',b)
",True
706,Write a NumPy program to extract third and fourth elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third and fourth elements of the first and second rows "")
print(arra_data[0:2, 2:4])
",True
707,Write a NumPy program to create a record array from a (flat) list of arrays. ,"import numpy as np
a1=np.array([1,2,3,4])
a2=np.array(['Red','Green','White','Orange'])
a3=np.array([12.20,15,20,40])
result= np.core.records.fromarrays([a1, a2, a3],names='a,b,c')
print(result[0])
print(result[1])
print(result[2])
",True
708,Write a Python program to find palindromes in a given list of strings using Lambda. ,"texts = [""php"", ""w3r"", ""Python"", ""abcd"", ""Java"", ""aaa""]
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (x == """".join(reversed(x))), texts)) 
print(""\nList of palindromes:"")
print(result) 
",True
709,"Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter. ","import csv
csv.register_dialect('csv_dialect',
                    delimiter='|',
                    skipinitialspace=True,
                    quoting=csv.QUOTE_ALL)
with open('temp.csv', 'r') as csvfile:
   reader = csv.reader(csvfile, dialect='csv_dialect')
   for row in reader:
       print(row)
",True
710,Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(6,6))
plt.suptitle('Trading Volume of Alphabet Inc. stock,\n01-04-2020 to 30-04-2020', fontsize=16, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
df2['Volume'].plot(kind='bar');
plt.show()
",True
711,Write a Python program to delete all occurrences of a specified character in a given string. ,"def delete_all_occurrences(str1, ch):
     result = str1.replace(ch, """")
     return(result)

str_text = ""Delete all occurrences of a specified character in a given string""
print(""Original string:"")
print(str_text)
print(""\nModified string:"")
ch='a'
print(delete_all_occurrences(str_text, ch))
",True
712,"Write a Pandas program to create a Pivot table and find manager wise, salesman wise total sale and also display the sum of all sale amount at the bottom. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Manager"",""SalesMan""],values=[""Units"",""Sale_amt""],
               aggfunc=[np.sum],fill_value=0,margins=True)
print(table)
",True
713,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
",True
714,Write a Pandas program to get the items of a given series not present in another given series. ,"import pandas as pd
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of sr1 not present in sr2:"")
result = sr1[~sr1.isin(sr2)]
print(result)
",True
715,Write a Python program to create a new list dividing two given lists of numbers. ,"def dividing_two_lists(l1,l2):
    result = [x/y for x, y in zip(l1,l2)]
    return result 
nums1 = [7,2,3,4,9,2,3]
nums2 = [9,8,2,3,3,1,2]
print(""Original list:"")
print(nums1)
print(nums1)
print(dividing_two_lists(nums1, nums2))
",True
716,"Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s). ",print(abs.__doc__),True
717,"Write a Python program to count the even, odd numbers in a given array of integers using Lambda. ","array_nums = [1, 2, 3, 5, 7, 8, 9, 10]
print(""Original arrays:"")
print(array_nums)
odd_ctr = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
even_ctr = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
print(""\nNumber of even numbers in the above array: "", even_ctr)
print(""\nNumber of odd numbers in the above array: "", odd_ctr)
",True
718,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
",True
719,Write a Python program to check whether lowercase letters exist in a string. ,"str1 = 'A8238i823acdeOUEI'
print(any(c.islower() for c in str1))
",True
720,Write a Pandas program to split the following given dataframe into groups based on single column and multiple columns. Find the size of the grouped data. ,"import pandas as pd
pd.set_option('display.max_rows', None)

student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped_single = student_data.groupby(['school_code'])
print(""Size of the grouped data - single column"")
print(grouped_single.size())
print('\nSplit the said data on school_code and class wise:')

grouped_mul = student_data.groupby(['school_code', 'class'])
print(""Size of the grouped data - multiple columns:"")
print(grouped_mul.size())
",True
721,Write a Python program to create a new JSON file from an existing JSON file. ,"import json

with open('states.json') as f:
  state_data= json.load(f)

for state in state_data['states']:
  del state['area_codes']

with open('new_states.json', 'w') as f:
  json.dump(state_data, f, indent=2)
",True
722,Write a Python program to move spaces to the front of a given string. ,"def move_Spaces_front(str1):
  noSpaces_char = [ch for ch in str1 if ch!=' ']
  spaces_char = len(str1) - len(noSpaces_char)
  result = ' '*spaces_char
  result = '""'+result + ''.join(noSpaces_char)+'""'
  return(result)

print(move_Spaces_front(""w3resource .  com  ""))
print(move_Spaces_front(""   w3resource.com  ""))
",True
723,Write a Pandas program to check whether alpha numeric values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['Company','Company a001','Company 123', '1234', 'Company 12'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nWhether all characters in the string are alphanumeric?"")
df['name_code_is_alphanumeric'] = list(map(lambda x: x.isalnum(), df['name_code']))
print(df)
",True
724,Write a Python program to split a given dictionary of lists into list of dictionaries. ,"def list_of_dicts(marks):
    keys = marks.keys()
    vals = zip(*[marks[k] for k in keys])
    result = [dict(zip(keys, v)) for v in vals]
    return result

marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
",True
725,Write a Python program to read specific columns of a given CSV file and print the content of the columns. ,"import csv
with open('departments.csv', newline='') as csvfile:
 data = csv.DictReader(csvfile)
 print(""ID Department Name"")
 print(""---------------------------------"")
 for row in data:
   print(row['department_id'], row['department_name'])
",True
726,Write a Python program to create a list with infinite elements. ,"import itertools
c = itertools.count()
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
",True
727,Write a NumPy program to select indices satisfying multiple conditions in a NumPy array. ,"import numpy as np
a = np.array([97, 101, 105, 111, 117])
b = np.array(['a','e','i','o','u'])
print(""Original arrays"")
print(a)
print(b)
print(""Elements from the second array  corresponding to elements in the first array  that are greater than 100 and less than 110:"")
print(b[(100 < a) & (a < 110)])
",True
728,Write a Python program to invert a given dictionary with non-unique hashable values. ,"from collections import defaultdict
def test(students):
  obj = defaultdict(list)
  for key, value in students.items():
    obj[value].append(key)
  return dict(obj)
 
students = {
  'Ora Mckinney': 8,
  'Theodore Hollandl': 7,
  'Mae Fleming': 7,
  'Mathew Gilbert': 8,
  'Ivan Little': 7,  
}
print(test(students))
",True
729,Write a NumPy program to create an inner product of two arrays. ,"import numpy as np
x = np.arange(24).reshape((2,3,4))
print(""Array x:"")
print(x)
print(""Array y:"")
y = np.arange(4)
print(y)
print(""Inner of x and y arrays:"")
print(np.inner(x, y))
",True
730,Write a Pandas program to create a Pivot table and find the maximum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.max)
print(table)
",True
731,Write a Pandas program to convert index of a given dataframe into a column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nConvert index of the said dataframe into a column:"")
df.reset_index(level=0, inplace=True)
print(df)
",True
732,Write a Python program to sum a specific column of a list in a given list of lists. ,"def sum_column(nums, C):
    result = sum(row[C] for row in nums)
    return result

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
        ]
print(""Original list of lists:"")
print(nums)

column = 0
print(""\nSum: 1st column of the said list of lists:"")
print(sum_column(nums, column))
column = 1
print(""\nSum: 2nd column of the said list of lists:"")
print(sum_column(nums, column))
column = 3
print(""\nSum: 4th column of the said list of lists:"")
print(sum_column(nums, column))
",True
733,Write a Python program to add two given lists and find the difference between lists. Use map() function. ,"def addition_subtrction(x, y):
    return x + y, x - y
 
nums1 = [6, 5, 3, 9]
nums2 = [0, 1, 7, 7]
print(""Original lists:"")
print(nums1)
print(nums2)
result = map(addition_subtrction, nums1, nums2)
print(""\nResult:"")
print(list(result))
",True
734,Write a Pandas program to create a date range using a startpoint date and a number of periods. ,"import pandas as pd
date_range = pd.date_range('2020-01-01', periods=45)
print(""Date range of perods 45:"")
print(date_range)
",True
735,"Write a NumPy program to calculate inverse sine, inverse cosine, and inverse tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(""Inverse sine:"", np.arcsin(x))
print(""Inverse cosine:"", np.arccos(x))
print(""Inverse tangent:"", np.arctan(x))
",True
736,Write a Pandas program to create the mean and standard deviation of the data of a given Series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5,6,7,8,9,5,3])
print(""Original Data Series:"")
print(s)
print(""Mean of the said Data Series:"")
print(s.mean())
print(""Standard deviation of the said Data Series:"")
print(s.std())
",True
737,Write a Python program to remove duplicates from a list. ,"a = [10,20,30,20,10,50,60,40,80,50,40]

dup_items = set()
uniq_items = []
for x in a:
    if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)

print(dup_items)
",True
738,Write a Python program to find the latitude and longitude of a given location using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
ladd1 = ""27488 Stanford Avenue, North Dakota""
print(""Location address:"",ladd1)
location = geolocator.geocode(ladd1)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd2 = ""380 New York St, Redlands, CA 92373""
print(""\nLocation address:"",ladd2)
location = geolocator.geocode(ladd2)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd3 = ""1600 Pennsylvania Avenue NW""
print(""\nLocation address:"",ladd3)
location = geolocator.geocode(ladd3)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
",True
739,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
",True
740,Write a Python program to sort an unsorted array numbers using Wiggle sort. ,"def wiggle_sort(arra_nums):
    for i, _ in enumerate(arra_nums):
        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):
            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]

    return arra_nums

print(""Input the array elements: "")
arra_nums = list(map(int, input().split()))
print(""Original unsorted array:"")
print(arra_nums)
print(""The said array after applying Wiggle sort:"")
print(wiggle_sort(arra_nums))
",True
741,Write a NumPy program to compute the inner product of vectors for 1-D arrays (without complex conjugation) and in higher dimension. ,"import numpy as np
a = np.array([1,2,5])
b = np.array([2,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
print 
result = np.inner(a, b)
print(""Inner product of the said vectors:"")
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Higher dimension arrays:"")
print(x)
print(y)
result = np.inner(x, y)
print(""Inner product of the said vectors:"")
print(result)
",True
742,Write a Python program to find the pairs of maximum and minimum product from a given list. Use itertools module. ,"import itertools as it
def list_max_min_pair(nums):
    result_max = max(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    result_min = min(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    return result_max, result_min

nums = [2,5,8,7,4,3,1,9,10,1]   
print(""The original list: "") 
print(nums)
print(""\nPairs of maximum and minimum product from the said list:"")
print(list_max_min_pair(nums))
",True
743,Write a python program to check whether two lists are circularly identical. ,"list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0]

print('Compare list1 and list2')
print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))
print('Compare list1 and list3')
print(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))
",True
744," Write a NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal. ","import numpy as np
x = np.zeros((4, 4))
x[::2, 1::2] = 1
x[1::2, ::2] = 1
print(x)
",True
745,Write a Python program to convert a given list of integers and a tuple of integers in a list of strings. ,"nums_list = [1,2,3,4]
nums_tuple = (0, 1, 2, 3) 
print(""Original list and tuple:"")
print(nums_list)
print(nums_tuple)
result_list = list(map(str,nums_list))
result_tuple = tuple(map(str,nums_tuple))
print(""\nList of strings:"")
print(result_list)
print(""\nTuple of strings:"")
print(result_tuple)
",True
746,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def test(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'Carla ': {
    'name': {
      'first': 'Carla ',
      'last': 'Russell' 
    },
    'postIds': [1, 2, 3, 4, 5]
  }
}
print(test(users, ['Carla ', 'name', 'last']))
print(test(users, ['Carla ', 'postIds', 1]))
",True
747,Write a Python program to insert tags or strings immediately after specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, after inserting the text:"")
soup.b.string.insert_after(tag)
print(soup.b)
",True
748,Write a Python program to get all values from an enum class. ,"from enum import IntEnum
class Country(IntEnum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    Antarctica = 672
country_code_list = list(map(int, Country))
print(country_code_list)
",True
749,Write a Python program to create a list of random integers and randomly select multiple items from the said list. Use random.sample(),"import random 
print(""Create a list of random integers:"")
population = range(0, 100)
nums_list = random.sample(population, 10)
print(nums_list)
no_elements = 4
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
no_elements = 8
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
",True
750,Write a Python program to find tags by CSS class in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a class=""sister"" href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nTags by CSS class:"")
print(soup.select("".sister""))
",True
751,Write a Pandas program to create a plot to visualize daily percentage returns of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
daily_changes['Adj Close'].plot(figsize=(10,7),legend=True,linestyle='--',marker='o')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
",True
752,Write a Python program to count the most common words in a dictionary. ,"words = [
   'red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes',
   'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange',
   'white', ""black"", 'pink', 'green', 'green', 'pink', 'green', 'pink',
   'white', 'orange', ""orange"", 'red'
]
from collections import Counter
word_counts = Counter(words)
top_four = word_counts.most_common(4)
print(top_four)
",True
753,Write a NumPy program to get the values and indices of the elements that are bigger than 10 in a given array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array: "")
print(x)
print(""Values bigger than 10 ="", x[x>10])
print(""Their indices are "", np.nonzero(x > 10))
",True
754,Write a Python program that prints all the numbers from 0 to 6 except 3 and 6.,"for x in range(6):
    if (x == 3 or x==6):
        continue
    print(x,end=' ')
print(""\n"")
	",True
755,A Python Dictionary contains List as value. Write a Python program to clear the list values in the said dictionary. ,"def test(dictionary):
    for key in dictionary:
        dictionary[key].clear()
    return dictionary

dictionary = { 
               'C1' : [10,20,30], 
               'C2' : [20,30,40],
               'C3' : [12,34]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nClear the list values in the said dictionary:"")
print(test(dictionary)) 
",True
756,Write a Python program to find the maximum and minimum values in a given list within specified index range. ,"def reverse_list_of_lists(nums,lr,hr):
    temp = []
    for idx, el in enumerate(nums):
        if idx >= lr and idx < hr:
            temp.append(el)
    result_max = max(temp) 
    result_min = min(temp) 
    return result_max, result_min
nums = [4,3,0,5,3,0,2,3,4,2,4,3,5]
print(""Original list:"")
print(nums)
print(""\nIndex range:"")
lr = 3
hr = 8
print(lr,""to"",hr)
print(""\nMaximum and minimum values of the said given list within index range:"")
print(reverse_list_of_lists(nums,lr,hr))
",True
757,Write a Pandas program to get the positions of items of a given series in another given series. ,"import pandas as pd
series1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
series2 = pd.Series([1, 3, 5, 7, 10])
print(""Original Series:"")
print(series1)
print(series2)
result = [pd.Index(series1).get_loc(i) for i in series2]
print(""Positions of items of series2 in series1:"")
print(result)
",True
758,Write a Python program to count the frequency in a given dictionary. ,"from collections import Counter
def test(dictt):    
    result = Counter(dictt.values())
    return result    

dictt = {
 'V': 10,
 'VI': 10,
 'VII': 40,
 'VIII': 20,
 'IX': 70,
 'X': 80,
 'XI': 40,
 'XII': 20, 
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nCount the frequency of the said dictionary:"")
print(test(dictt))
",True
759,Write a Python program to insert values to a table from user input. ,"import  sqlite3
conn  =  sqlite3 . connect ( 'mydatabase.db' )
cursor  =  conn.cursor ()

cursor.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

s_id = input('Salesman ID:')
s_name = input('Name:')
s_city = input('City:')
s_commision = input('Commission:')
cursor.execute(""""""
INSERT INTO salesman(salesman_id, name, city, commission)
VALUES (?,?,?,?)
"""""", (s_id, s_name, s_city, s_commision))
conn.commit ()
print ( 'Data entered successfully.' )
conn . close ()
if (conn):
  conn.close()
  print(""\nThe SQLite connection is closed."")
",True
760,Write a Python program to find the length of the text of the first <h2> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Length of the text of the first <h2> tag:"")
print(len(soup.find('h2').text))

",True
761,Write a NumPy program to get the number of nonzero elements in an array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array:"")
print(x)
print(""Number of non zero elements in the above array:"")
print(np.count_nonzero(x))
",True
762,Write a Pandas program to replace more than one value with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace([""A"", ""D""], [""X"", ""Y""])
print(df)
",True
763,Write a NumPy program to compute the eigenvalues and right eigenvectors of a given square array. ,"import numpy as np
m = np.mat(""3 -2;1 0"")
print(""Original matrix:"")
print(""a\n"", m)
w, v = np.linalg.eig(m) 
print( ""Eigenvalues of the said matrix"",w)
print( ""Eigenvectors of the said matrix"",v)
",True
764,Write a Python program to chunk a given list into n smaller lists. ,"from math import ceil

def chunk_list_into_n(nums, n):
  size = ceil(len(nums) / n)
  return list(
    map(lambda x: nums[x * size:x * size + size],
    list(range(n)))
  )
print(chunk_list_into_n([1, 2, 3, 4, 5, 6, 7], 4))  
",True
765,Write a NumPy program to add a border (filled with 0's) around an existing array. ,"import numpy as np
x = np.ones((3,3))
print(""Original array:"")
print(x)
print(""0 on the border and 1 inside in the array"")
x = np.pad(x, pad_width=1, mode='constant', constant_values=0)
print(x)
",True
766,Write a Python program to create an array contains six integers. Also print all the members of the array. ,"from array import array
my_array = array('i', [10, 20, 30, 40, 50])
for i in my_array:
    print(i)
",True
767,Write a Python program to check whether all dictionaries in a list are empty or not. ,"my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))
",True
768,Write a NumPy program to place a specified element in specified time randomly in a specified 2D array. ,"import numpy as np
n = 4
i = 3
e = 10
array_nums1 = np.zeros((n,n))
print(""Original array:"")
print(array_nums1)
np.put(array_nums1, np.random.choice(range(n*n), i, replace=False), e)
print(""\nPlace a specified element in specified time randomly:"")
print(array_nums1)
",True
769,"Write a Python program to read a matrix from console and print the sum for each column. Accept matrix rows, columns and elements for each column separated with a space(for every row) as input from the user. ","rows = int(input(""Input rows: ""))
columns = int(input(""Input columns: ""))
matrix = [[0]*columns for row in range(rows)]
print('Input number of elements in a row (1, 2, 3): ')
for row in range(rows):
    lines = list(map(int, input().split()))
    for column in range(columns):
        matrix[row][column] = lines[column]

sum = [0]*columns
print(""sum for each column:"")
for column in range(columns):
    for row in range(rows):
        sum[column] += matrix[row][column]
    print((sum[column]), ' ', end = '')
",True
770,Write a Pandas program to select consecutive columns and also select rows with Index label 0 to 9 with some columns from world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect consecutive columns:"")
print(w_a_con.loc[:,""Country"":""Display Value""].head())
print(""\nAlternate command:"")
print(w_a_con.iloc[:,2:5].head())
print(""\nSelect rows with Index label 0 to 9 with specific columns:"")
print(w_a_con.loc[0:9,[""Year"",""Country"",""Display Value""]])
",True
771,rite a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle. ,"class Rectangle():
    def __init__(self, l, w):
        self.length = l
        self.width  = w

    def rectangle_area(self):
        return self.length*self.width

newRectangle = Rectangle(12, 10)
print(newRectangle.rectangle_area())
",True
772,Write a Pandas program to remove the html tags within the specified column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey <b>Avenue</b>','92 N. Bishop Avenue','9910 <br>Golden Star Avenue', '102 Dunbar <i></i>St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def remove_tags(string):
    result = re.sub('<.*?>','',string)
    return result
df['with_out_tags']=df['address'].apply(lambda cw : remove_tags(cw))
print(""\nSentences without tags':"")
print(df)
",True
773,Write a NumPy program to add a vector to each row of a given matrix. ,"import numpy as np
m = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 1, 0])
print(""Original vector:"")
print(v)
print(""Original matrix:"")
print(m)
result = np.empty_like(m) 
for i in range(4):
  result[i, :] = m[i, :] + v
print(""\nAfter adding the vector v to each row of the matrix m:"")
print(result)
",True
774,Write a Pandas program to find out the alcohol consumption of a given year from the world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1985:"")
print(w_a_con[w_a_con['Year']==1985].head(10))
print(""\nThe world alcohol consumption details in the year 1989:"")
print(w_a_con[w_a_con['Year']==1989].head(10))
",True
775,Write a Python program to compute average of two given lists. ,"def average_two_lists(nums1, nums2):
    result = sum(nums1 + nums2) / len(nums1 + nums2) 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]
print(""Original list:"")
print(nums1)
print(nums2)

print(""\nAverage of two lists:"")
print(average_two_lists(nums1, nums2))
",True
776,"Write a NumPy program to create 24 python datetime.datetime objects (single object for every hour), and then put it in a numpy array. ","import numpy as np
import datetime
start = datetime.datetime(2000, 1, 1)
dt_array = np.array([start + datetime.timedelta(hours=i) for i in range(24)])
print(dt_array)
",True
777,Write a Pandas program to import some excel data (coalpublic2013.xlsx ) skipping first twenty rows into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx', skiprows = 20)
df
",True
778,Write a Python program to append the same value /a list multiple times to a list/list-of-lists. ,"print(""Add a value(7), 5 times, to a list:"")
nums = []
nums += 5 * ['7']
print(nums)
nums1 = [1,2,3,4]
print(""\nAdd 5, 6 times, to a list:"")
nums1 += 6 * [5]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = []
nums1 += 4 * [[1,2,5]]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = [[5,6,7]]
nums1 += 4 * [[1,2,5]]
print(nums1)
",True
779,Write a NumPy program to replace all elements of NumPy array that are greater than specified array. ,"import numpy as np
x = np.array([[ 0.42436315, 0.48558583, 0.32924763], [ 0.7439979,0.58220701,0.38213418], [ 0.5097581,0.34528799,0.1563123 ]])
print(""Original array:"")
print(x)
print(""Replace all elements of the said array with .5 which are greater than .5"")
x[x > .5] = .5
print(x)
",True
780,Write a Python program to calculate the product of the unique numbers of a given list. ,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p
nums = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",nums)
print(""Product of the unique numbers of the said list: "",unique_product(nums))
",True
781,Write a Pandas program to create a heatmap (rectangular data as a color-encoded matrix) for comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nHeatmap for comparison of the top 10 years in which the UFO was sighted vs each month:"")
plt.figure(figsize=(10,8))
ax = sns.heatmap(month_vs_year, vmin=0, vmax=4)
ax.set_xlabel('Month').set_size(20)
ax.set_ylabel('Year').set_size(20)
",True
782,Write a Python program to remove existing indentation from all of the lines in a given text. ,"import textwrap
sample_text = '''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
print()
print(text_without_Indentation )
print()
",True
783,Write a Pandas program to import given excel data (employee.xlsx ) into a Pandas dataframe and sort based on multiple given columns. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values(by=['first_name','last_name'],ascending=[0,1])
result
",True
784,Write a Pandas program to start index with different value rather than 0 in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32]})
     
print(""Original DataFrame:"")
print(df)
print(""\nDefault Index Range:"")
print(df.index)
df.index += 10 
print(""\nNew Index Range:"")
print(df.index)
print(""\nDataFrame with new index:"")
print(df)
",True
785,"Write a Pandas program to create a bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot(kind='bar');
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
",True
786,Write a Pandas program to create a Pivot table and calculate how many women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], values='survived', aggfunc='count')
print(result)
",True
787,Write a Python program to find the maximum and minimum values in a given heterogeneous list. ,"def max_min_val(list_val):
     max_val = max(i for i in list_val if isinstance(i, int)) 
     min_val = min(i for i in list_val if isinstance(i, int))
     return(max_val, min_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum and Minimum values in the said list:"")
print(max_min_val(list_val))
",True
788,Write a Pandas program to split a given dataset using group by on specified column into two labels and ranges. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby(pd.cut(df['salesman_id'], 
                  bins=[0,5006,np.inf],  
                  labels=['S1', 'S2']))['sale_jan'].sum().reset_index()
print(""\nGroupBy with condition of  two labels and ranges:"")
print(result)
",True
789,Write a Python program to find common elements in a given list of lists. ,"def common_list_of_lists(lst):
    temp = set(lst[0]).intersection(*lst)
    return list(temp) 

nums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]
print(""Original list:"")
print(nums)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(nums))
chars = [['a','b','c'],['b','c','d'],['c','d','e']]
print(""\nOriginal list:"")
print(chars)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(chars))
",True
790,Write a Python program to check whether a list contains a sublist. ,"def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set

a = [2,4,3,5,7]
b = [4,3]
c = [3,7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))
",True
791,Write a Python program to count the number of each character of a given text of a text file. ,"import collections
import pprint
file_input = input('File Name: ')
with open(file_input, 'r') as info:
  count = collections.Counter(info.read().upper())
  value = pprint.pformat(count)
print(value)
",True
792,Write a NumPy program to concatenate two 2-dimensional arrays. ,"import numpy as np
a = np.array([[0, 1, 3], [5, 7, 9]])
b = np.array([[0, 2, 4], [6, 8, 10]])
c = np.concatenate((a, b), 1)
print(c)
",True
793,Write a Python program to remove None value from a given list using lambda function. ,"def remove_none(nums):
    result = filter(lambda v: v is not None, nums)
    return list(result)

nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
",True
794,Write a Python program to configure the rounding to round up and round down a given decimal value. Use decimal.Decimal,"import decimal
print(""Configure the rounding to round up:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_UP
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round down:"")
decimal.getcontext().prec = 3
decimal.getcontext().rounding = decimal.ROUND_DOWN
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round up:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP))
print(""\nConfigure the rounding to round down:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN))
",True
795,Write a Python program to find the highest 3 values of corresponding keys in a dictionary. ,"from heapq import nlargest
my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}  
three_largest = nlargest(3, my_dict, key=my_dict.get)
print(three_largest) 
",True
796,Write a Pandas program to convert a NumPy array to a Pandas series. ,"import numpy as np
import pandas as pd
np_array = np.array([10, 20, 30, 40, 50])
print(""NumPy array:"")
print(np_array)
new_series = pd.Series(np_array)
print(""Converted Pandas series:"")
print(new_series)
",True
797,"Write a NumPy program to get the number of items, array dimensions, number of array dimensions and the memory size of each element of a given array. ","import numpy as np
array_nums = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(""Original array:"")
print(array_nums)
print(""\nNumber of items of the said array:"")
print(array_nums.size) 
print(""\nArray dimensions:"")
print(array_nums.shape)
print(""\nNumber of array dimensions:"")
print(array_nums.ndim)
print(""\nMemory size of each element of the said array"")
print(array_nums.itemsize)
",True
798,Write a Python program to drop empty Items from a given Dictionary. ,"dict1 = {'c1': 'Red', 'c2': 'Green', 'c3':None}
print(""Original Dictionary:"")
print(dict1)
print(""New Dictionary after dropping empty items:"")
dict1 = {key:value for (key, value) in dict1.items() if value is not None}
print(dict1)
",True
799,Write a Pandas program to stack two given series vertically and horizontally. ,"import pandas as pd
series1 = pd.Series(range(10))
series2 = pd.Series(list('pqrstuvwxy'))
print(""Original Series:"")
print(series1)
print(series2)
series1.append(series2)
df = pd.concat([series1, series2], axis=1)
print(""\nStack two given series vertically and horizontally:"")
print(df)
",True
800,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.triu(np.arange(2, 14).reshape(4, 3), -1)
print(x)
",True
801,Write a NumPy program to find common values between two arrays. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [10, 30, 40]
print(""Array2: "",array2)
print(""Common values between two arrays:"")
print(np.intersect1d(array1, array2))
",True
802,Write a Pandas program to extract only number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.','920 N. Bishop Ave.','9910 Golden Star St.', '25 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def find_number(text):
    num = re.findall(r'[0-9]+',text)
    return "" "".join(num)
df['number']=df['address'].apply(lambda x: find_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
",True
803,Write a Python program to download and display the content of robot.txt for en.wikipedia.org. ,"import requests
response = requests.get(""https://en.wikipedia.org/robots.txt"")
test = response.text
print(""robots.txt for http://www.wikipedia.org/"")
print(""==================================================="")
print(test)
",True
804,Write a Python program to calculate the discriminant value. ,"def discriminant():
    x_value = float(input('The x value: '))
    y_value = float(input('The y value: '))
    z_value = float(input('The z value: '))
    discriminant = (y_value**2) - (4*x_value*z_value)
    if discriminant > 0:
        print('Two Solutions. Discriminant value is:', discriminant)
    elif discriminant == 0:
        print('One Solution. Discriminant value is:', discriminant)
    elif discriminant < 0:
        print('No Real Solutions. Discriminant value is:', discriminant)


discriminant()
",True
805,Write a Python program to compute the sum of non-zero groups (separated by zeros) of a given list of numbers. ,"def test(lst):
    result = []
    ele_val = 0
    for digit in lst:
        if digit == 0:
            if ele_val != 0:
                result.append(ele_val)
                ele_val = 0
        else:
            ele_val += digit 
    if ele_val>0:
        result.append(ele_val) 
    return result
nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1,0,0,0]
print(""\nOriginal list:"")
print(nums)
print(""\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:"")
print(test(nums))
",True
806,Write a Python program to generate all permutations of a list in Python. ,"import itertools
print(list(itertools.permutations([1,2,3])))
",True
807,Write a Python program to sort unsorted strings using natural sort. ,"
from __future__ import annotations
import re
def natural_sort(input_list: list[str]) -> list[str]:
    def alphanum_key(key):
        return [int(s) if s.isdigit() else s.lower() for s in re.split(""([0-9]+)"", key)]
    return sorted(input_list, key=alphanum_key)
strs = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =   ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs) 
",True
808,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in each column:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
",True
809,Write a Python program to find whether a given array of integers contains any duplicate element. Return true if any value appears at least twice in the said array and return false if every element is distinct. ,"def test_duplicate(array_nums):
    nums_set = set(array_nums)    
    return len(array_nums) != len(nums_set)     
print(test_duplicate([1,2,3,4,5]))
print(test_duplicate([1,2,3,4, 4]))
print(test_duplicate([1,1,2,2,3,3,4,4,5]))
",True
810,Write a NumPy program to create a white image of size 512x256. ,"from PIL import Image
import numpy as np

a = np.full((512, 256, 3), 255, dtype=np.uint8)
image = Image.fromarray(a, ""RGB"")
image.save(""white.png"", ""PNG"")
",True
811,Write a Python program to find the maximum and minimum values in a given list of tuples. ,"from operator import itemgetter

def max_min_list_tuples(class_students):
    return_max = max(class_students,key=itemgetter(1))[1] 
    return_min = min(class_students,key=itemgetter(1))[1] 
    return return_max, return_min
   
class_students = [('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
",True
812,Write a Python program to find the items starts with specific character from a given list. ,"def test(lst, char):
    result = [i for i in lst if i.startswith(char)]
    return result
text = [""abcd"", ""abc"", ""bcd"", ""bkie"", ""cder"", ""cdsw"", ""sdfsd"", ""dagfa"", ""acjd""]
print(""\nOriginal list:"")
print(text)
char = ""a""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""d""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""w""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
",True
813,Write a Python program to split a given list into two parts where the length of the first part of the list is given. ,"def split_two_parts(n_list, L):
    return n_list[:L], n_list[L:]
n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
first_list_length = 3
print(""\nLength of the first part of the list:"",first_list_length)
print(""\nSplited the said list into two parts:"")
print(split_two_parts(n_list, first_list_length))

",True
814,Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations. ,"import itertools
from functools import partial
X = [10, 20, 20, 20]
Y = [10, 20, 30, 40]
Z = [10, 30, 40, 20]
T = 70

def check_sum_array(N, *nums):
  if sum(x for x in nums) == N:
    return (True, nums)
  else:
      return (False, nums)
pro = itertools.product(X,Y,Z)
func = partial(check_sum_array, T)
sums = list(itertools.starmap(func, pro))

result = set()
for s in sums:
    if s[0] == True and s[1] not in result:
      result.add(s[1])
      print(result)
",True
815,Write a Python program to construct an infinite iterator that returns evenly spaced values starting with a specified number and step. ,"import itertools as it
start = 10
step = 1
print(""The starting number is "", start, ""and step is "",step)
my_counter = it.count(start, step)

print(""The said function print never-ending items:"")
for i in my_counter:    
    print(i)
",True
816,Write a NumPy program to create an array of equal shape and data type of a given array. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nNew array of equal shape and data type of the said array filled by 0:"")
print(np.zeros_like(nums))
",True
817,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style and border around the table and not around the rows. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style and border around the table and not around the rows:"")
df.style.set_table_styles([{'selector':'','props':[('border','4px solid #7a7')]}])
",True
818,rite a Python program which accepts a sequence of comma separated 4 digit binary numbers as its input and print the numbers that are divisible by 5 in a comma separated sequence. ,"items = []
num = [x for x in input().split(',')]
for p in num:
    x = int(p, 2)
    if not x%5:
        items.append(p)
print(','.join(items))
",True
819,Write a Python program to compute the sum of digits of each number of a given list. ,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,'b',70,'a']
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,-4,5,-70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
",True
820,Write a Pandas program to print the day after and before a specified date. Also print the days between two given dates. ,"import pandas as pd
import datetime
from datetime import datetime, date
today = datetime(2012, 10, 30)
print(""Current date:"", today)
tomorrow = today + pd.Timedelta(days=1)
print(""Tomorrow:"", tomorrow)
yesterday = today - pd.Timedelta(days=1)
print(""Yesterday:"", yesterday)
date1 = datetime(2016, 8, 2)
date2 = datetime(2016, 7, 19)
print(""\nDifference between two dates: "",(date1 - date2))
",True
821,Write a Pandas program to extract date (format: mm-dd-yyyy) from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
def find_valid_dates(dt):
    
    result = re.findall(r'\b(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/([0-9]{4})\b',dt)
    return result
df['valid_dates']=df['date_of_sale'].apply(lambda dt : find_valid_dates(dt))
print(""\nValid dates (format: mm-dd-yyyy):"")
print(df)
",True
822,Write a Python program to sort a list of elements using the quick sort algorithm. ,"def quickSort(data_list):
   quickSortHlp(data_list,0,len(data_list)-1)

def quickSortHlp(data_list,first,last):
   if first < last:

       splitpoint = partition(data_list,first,last)

       quickSortHlp(data_list,first,splitpoint-1)
       quickSortHlp(data_list,splitpoint+1,last)


def partition(data_list,first,last):
   pivotvalue = data_list[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = data_list[leftmark]
           data_list[leftmark] = data_list[rightmark]
           data_list[rightmark] = temp

   temp = data_list[first]
   data_list[first] = data_list[rightmark]
   data_list[rightmark] = temp


   return rightmark

data_list = [54,26,93,17,77,31,44,55,20]
quickSort(data_list)
print(data_list)
",True
823,"Write a Python program to check if a given list is strictly increasing or not. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true. ","
def almost_increasing_sequence(sequence):
    if len(sequence) < 3:
        return True

    a, b, *sequence = sequence
    skipped = 0
    for c in sequence:
        if a < b < c:  
            a, b = b, c
            continue
        elif b < c:    
            a, b = b, c
        elif a < c:    
            a, b = a, c
        skipped += 1
        if skipped == 2:
            return False
    return a < b

print(almost_increasing_sequence([]))
print(almost_increasing_sequence([1]))
print(almost_increasing_sequence([1, 2]))
print(almost_increasing_sequence([1, 2, 3]))
print(almost_increasing_sequence([3, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]))
print(almost_increasing_sequence([1, 2, 3, 0]))
print(almost_increasing_sequence([1, 2, 0, 3]))
print(almost_increasing_sequence([10, 1, 2, 3, 4, 5]))
print(almost_increasing_sequence([1, 2, 10, 3, 4]))
print(almost_increasing_sequence([1, 2, 3, 12, 4, 5]))

print(almost_increasing_sequence([3, 2, 1]))
print(almost_increasing_sequence([1, 2, 0, -1]))
print(almost_increasing_sequence([5, 6, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, -1]))
print(almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]))
",True
824,"Write a Python program to generate a random color hex, a random alphabetical string, random value between two integers (inclusive) and a random multiple of 7 between 0 and 70. Use random.randint()","import random
import string
print(""Generate a random color hex:"")
print(""#{:06x}"".format(random.randint(0, 0xFFFFFF)))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
s = """"
for i in range(random.randint(1, max_length)):
    s += random.choice(string.ascii_letters)
print(s)
print(""Generate a random value between two integers, inclusive:"")
print(random.randint(0, 10))
print(random.randint(-7, 7))
print(random.randint(1, 1))
print(""Generate a random multiple of 7 between 0 and 70:"")
print(random.randint(0, 10) * 7)
",True
825,Write a Python class which has two methods get_String and print_String. get_String accept a string from the user and print_String print the string in upper case. ,"class IOString():
    def __init__(self):
        self.str1 = """"

    def get_String(self):
        self.str1 = input()

    def print_String(self):
        print(self.str1.upper())

str1 = IOString()
str1.get_String()
str1.print_String()
",True
826,Write a Python program to get the Fibonacci series between 0 to 50. ,"x,y=0,1

while y<50:
    print(y)
    x,y = y,x+y
	",True
827,Write a Python program to convert a given dictionary into a list of lists. ,"def test(dictt):
    result = list(map(list, dictt.items()))
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))
",True
828,"Write a NumPy program to create two arrays with shape (300,400, 5), fill values using unsigned integer (0 to 255). Insert a new axis that will appear at the beginning in the expanded array shape. Now combine the said two arrays into one. ","import numpy as np 
nums1 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
nums2 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
print(""Array1:"") 
print(nums1) 
print(""\nArray2:"") 
print(nums2) 
nums1 = np.expand_dims(nums1, axis=0)
nums2 = np.expand_dims(nums2, axis=0)
nums = np.append(nums1, nums2, axis=0)
print(""\nCombined array:"")
print(nums)
",True
829,Write a Pandas program to create a Pivot table and find the minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.min)
print(table)
",True
830,Write a Python program to print all unique values in a dictionary. ,"L = [{""V"":""S001""}, {""V"": ""S002""}, {""VI"": ""S001""}, {""VI"": ""S005""}, {""VII"":""S005""}, {""V"":""S009""},{""VIII"":""S007""}]
print(""Original List: "",L)
u_value = set( val for dic in L for val in dic.values())
print(""Unique Values: "",u_value)
",True
831,Write a Python program to remove key values pairs from a list of dictionaries. ,"original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]
print(""Original List: "")
print(original_list)
new_list = [{k: v for k, v in d.items() if k != 'key1'} for d in original_list]
print(""New List: "")
print(new_list)
",True
832,Write a NumPy program to create a 5x5 matrix with row values ranging from 0 to 4. ,"import numpy as np
x = np.zeros((5,5))
print(""Original array:"")
print(x)
print(""Row values ranging from 0 to 4."")
x += np.arange(5)
print(x)
",True
833,"Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string. ","def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1
print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!'))
",True
834,Write a Python program to lowercase first n characters in a string. ,"str1 = 'W3RESOURCE.COM'
print(str1[:4].lower() + str1[4:])
",True
835,Write a Python program to find the first duplicate element in a given array of integers. Return -1 If there are no such elements. ,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate

print(find_first_duplicate([1, 2, 3, 4, 4, 5]))
print(find_first_duplicate([1, 2, 3, 4]))
print(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]))
",True
836,Write a Python program to interleave two given list into another list randomly using map() function. ,"import random
def randomly_interleave(nums1, nums2):
    result =  list(map(next, random.sample([iter(nums1)]*len(nums1) + [iter(nums2)]*len(nums2), len(nums1)+len(nums2))))
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
",True
837,Write a Python program to remove duplicate words from a given string. ,"def unique_list(text_str):
    l = text_str.split()
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return ' '.join(temp)

text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
print(unique_list(text_str))
",True
838,Write a Pandas program to get the index of an element of a given Series. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nIndex of 11 in the said series:"")
x = ds[ds == 11].index[0]
print(x)
",True
839,"Write a Python program to check if a given string contains an element, which is present in a list. ","def test(lst,str1):
    result = [el for el in lst if(el in str1)] 
    return bool(result)


str1 = ""https://www.w3resource.com/python-exercises/list/""
lst = ['.com', '.edu', '.tv']   
print(""The original string and list: "") 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
str1 = ""https://www.w3resource.net""
lst = ['.com', '.edu', '.tv']   
print(""\nThe original string and list: "" + str1) 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
",True
840,Write a Python program to insert a list of records into a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn, rows):
    cursorObj = conn.cursor()

    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    sqlite_insert_query = """"""INSERT INTO salesman
                          (salesman_id, name, city, commission) 
                          VALUES (?, ?, ?, ?);""""""    
    cursorObj.executemany(sqlite_insert_query, rows)
    conn.commit()      
    print(""Number of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
  

rows = [(5001,'James Hoog', 'New York', 0.15),
         (5002,'Nail Knite', 'Paris', 0.25),
         (5003,'Pit Alex', 'London', 0.15),
         (5004,'Mc Lyon', 'Paris', 0.35),
         (5005,'Paul Adam', 'Rome', 0.45)]
                   
sqllite_conn = sql_connection() 
sql_table(sqllite_conn, rows)
    
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
",True
841,Write a Python program to sort a list of elements using Pancake sort. ,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(pancake_sort(nums))
",True
842,Write a Python program to shift last element to first position and first element to last position in a given list. ,"def shift_first_last(lst):
    x = lst.pop(0)
    y = lst.pop()
    lst.insert(0, y)
    lst.insert(len(lst), x)
    return lst

nums = [1,2,3,4,5,6,7]
print(""Original list:"")
print(nums)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(nums))

chars = ['s','d','f','d','s','s','d','f']
print(""\nOriginal list:"")
print(chars)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(chars))
",True
843,Write a NumPy program to create a 5x5x5 cube of 1's. ,"import numpy as np
x = np.zeros((5, 5, 5)).astype(int) + 1
print(x)
",True
844,Write a NumPy program to display NumPy array elements of floating values with given precision. ,"import numpy as np
x=np.array([ 0.26153123, 0.52760141, 0.5718299, 0.5927067, 0.7831874, 0.69746349,             
  0.35399976, 0.99469633, 0.0694458, 0.54711478]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(precision=3)
print(x)
",True
845,"Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. ","import pandas as pd
import numpy as np
num_state = np.random.RandomState(100)
num_series = pd.Series(num_state.normal(10, 4, 20))
print(""Original Series:"")
print(num_series)
result = np.percentile(num_series, q=[0, 25, 50, 75, 100])
print(""\nMinimum, 25th percentile, median, 75th, and maximum of a given series:"")
print(result)
",True
846,Write a Python program to find the majority element from a given array of size n using Collections module. ,"import collections
class Solution(object):
    def majorityElement(self, nums):        
        count_ele=collections.Counter(nums)
        return count_ele.most_common()[0][0]

result = Solution().majorityElement([10,10,20,30,40,10,20,10])
print(result)
",True
847,Write a Python program to insert a new text within a url in a specified position. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""Original Markup:"")
print(tag.contents)
tag.insert(2, ""CSS"") 
print(""\nNew url after inserting the text:"")
print(tag.contents)
",True
848,Write a Python program to convert a given list of strings and characters to a single list of characters. ,"def l_strs_to_l_chars(lst):
    result = [i for element in lst for i in element]
    return result

colors = [""red"", ""white"", ""a"", ""b"", ""black"", ""f""]
print(""Original list:"")
print(colors)
print(""\nConvert the said list of strings and characters to a single list of characters:"")
print(l_strs_to_l_chars(colors))
",True
849,Write a Python program to perform a deep flattens a list. ,"from collections.abc import Iterable
def deep_flatten(lst):
  return ([a for i in lst for a in
          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])
nums = [1, [2], [[3], [4], 5], 6]
print(""Original list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
nums = [[[1, 2, 3], [4, 5]], 6]
print(""\nOriginal list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
",True
850,Write a Python program to insert a given string at the beginning of all items in a list. ,"num = [1,2,3,4]
print(['emp{0}'.format(i) for i in  num])
",True
851,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
",True
852,rite a NumPy program to create a null vector of size 10 and update sixth value to 11.,"
import numpy as np
x = np.zeros(10)
print(x)
print(""Update sixth value to 11"")
x[6] = 11
print(x)
",True
853,Write a Python program to concatenate the consecutive numbers in a given string. ,"import re
txt = ""Enter at 1 20 Kearny Street. The security desk can direct you to floor 1 6. Please have your identification ready.""
print(""Original string:"")
print(txt)
new_txt = re.sub(r""(?<=\d)\s(?=\d)"", '', txt)
print('\nAfter concatenating the consecutive numbers in the said string:')
print(new_txt)
",True
854,Write a Python program to sort unsorted numbers using Odd Even Transposition Parallel sort. ,"
from multiprocessing import Lock, Pipe, Process


processLock = Lock()
def oeProcess(position, value, LSend, RSend, LRcv, RRcv, resultPipe):
    global processLock

    
    
    
    for i in range(0, 10):

        if (i + position) % 2 == 0 and RSend is not None:
            
            processLock.acquire()
            RSend[1].send(value)
            processLock.release()

            
            processLock.acquire()
            temp = RRcv[0].recv()
            processLock.release()

            
            value = min(value, temp)
        elif (i + position) % 2 != 0 and LSend is not None:
            
            processLock.acquire()
            LSend[1].send(value)
            processLock.release()

            
            processLock.acquire()
            temp = LRcv[0].recv()
            processLock.release()

            
            value = max(value, temp)
    
    resultPipe[1].send(value)
def OddEvenTransposition(arr):
    processArray = []
    resultPipe = []
    
    for _ in arr:
        resultPipe.append(Pipe())
    
    
    
    tempRs = Pipe()
    tempRr = Pipe()
    processArray.append(
        Process(
            target=oeProcess,
            args=(0, arr[0], None, tempRs, None, tempRr, resultPipe[0]),
        )
    )
    tempLr = tempRs
    tempLs = tempRr

    for i in range(1, len(arr) - 1):
        tempRs = Pipe()
        tempRr = Pipe()
        processArray.append(
            Process(
                target=oeProcess,
                args=(i, arr[i], tempLs, tempRs, tempLr, tempRr, resultPipe[i]),
            )
        )
        tempLr = tempRs
        tempLs = tempRr

    processArray.append(
        Process(
            target=oeProcess,
            args=(
                len(arr) - 1,
                arr[len(arr) - 1],
                tempLs,
                None,
                tempLr,
                None,
                resultPipe[len(arr) - 1],
            ),
        )
    )
    
    for p in processArray:
        p.start()
    
    for p in range(0, len(resultPipe)):
        arr[p] = resultPipe[p][0].recv()
        processArray[p].join()
    return arr

def main():
    arr = list(range(10, 0, -1))
    print(""Initial List"")
    print(*arr)
    arr = OddEvenTransposition(arr)
    print(""\nSorted List:"")
    print(*arr)
if __name__ == ""__main__"":
    main()
",True
855,Write a NumPy program to rearrange columns of a given NumPy 2D array using given index positions. ,"import numpy as np
array1 = np.array([[11, 22, 33, 44, 55],
             [66,  77,  88,  99, 100]])
print(""Original arrays:"")
print(array1)
i = [1,3,0,4,2]
result = array1[:,i]
print(""New array:"")
print(result)
",True
856,Write a Python program to remove a specified dictionary from a given list. ,"def remove_dictionary(colors, r_id):
    colors[:] = [d for d in colors if d.get('id') != r_id]
    return colors

colors = [{""id"" : ""#FF0000"", ""color"" : ""Red""}, 
          {""id"" : ""#800000"", ""color"" : ""Maroon""}, 
          {""id"" : ""#FFFF00"", ""color"" : ""Yellow""}, 
          {""id"" : ""#808000"", ""color"" : ""Olive""}] 
print('Original list of dictionary:')
print(colors)
r_id = ""#FF0000""
print(""\nRemove id"",r_id,""from the said list of dictionary:"")
print(remove_dictionary(colors, r_id))
",True
857,Write a Pandas program to extract only punctuations from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001.','c000,2','c0003', 'c0003#', 'c0004,'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_punctuations(text):
    result = re.findall(r'[!""\$%&\'()*+,\-.\/:;=#@?\[\\\]^_`{|}~]*', text)
    string="""".join(result)
    return list(string)
df['nonalpha']=df['company_code'].apply(lambda x: find_punctuations(x))
print(""\nExtracting punctuation:"")
print(df)
",True
858,Write a NumPy program to extract all the elements of the second row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second row"")
print(arra_data[1,:])
",True
859,Write a NumPy program to convert cartesian coordinates to polar coordinates of a random 10x2 matrix representing cartesian coordinates. ,"import numpy as np
z= np.random.random((10,2))
x,y = z[:,0], z[:,1]
r = np.sqrt(x**2+y**2)
t = np.arctan2(y,x)
print(r)
print(t)
",True
860,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in last two columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in last two columns:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['D', 'E']])
",True
861,Write a Python program to check if all items of a given list of strings is equal to a given string. ,"color1 = [""green"", ""orange"", ""black"", ""white""]
color2 = [""green"", ""green"", ""green"", ""green""]

print(all(c == 'blue' for c in color1))
print(all(c == 'green' for c in color2))
",True
862,Write a Python program to convert the values of RGB components to a hexadecimal color code. ,"def rgb_to_hex(r, g, b):
  return ('{:02X}' * 3).format(r, g, b)
 
print(rgb_to_hex(255, 165, 1))
print(rgb_to_hex(255, 255, 255))
print(rgb_to_hex(0, 0, 0))
print(rgb_to_hex(0, 0, 128))
print(rgb_to_hex(192, 192, 192))
",True
863,Write a NumPy program to compute the determinant of an array. ,"import numpy as np
a = np.array([[1,2],[3,4]])
print(""Original array:"")
print(a)
result =  np.linalg.det(a)
print(""Determinant of the said array:"")
print(result)
",True
864,Write a Python program to find the first occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left   
def Binary_Search(a, x): 
    i = bisect_left(a, x) 
    if i != len(a) and a[i] == x: 
        return i 
    else: 
        return -1

nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8 
num_position = Binary_Search(nums, x) 
if num_position == -1: 
    print(x, ""is not present."") 
else: 
    print(""First occurrence of"", x, ""is present at index"", num_position)
",True
865,Write a Python program to get the frequency of the elements in a list. ,"import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)
",True
866,Write a Pandas program to count the number of missing values of a specified column in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['purch_amt'].value_counts(dropna=False).loc[np.nan]
print(result)
",True
867,rite a Python program to display the current date and time.,"import datetime
now = datetime.datetime.now()
print (""Current date and time : "")
print (now.strftime(""%Y-%m-%d %H:%M:%S""))
",True
868,"Write a NumPy program to test element-wise of a given array for finiteness (not infinity or not Not a Number), positive or negative infinity, for NaN, for NaT (not a time), for negative infinity, for positive infinity. ","import numpy as np
print(""\nTest element-wise for finiteness (not infinity or not Not a Number):"")
print(np.isfinite(1))
print(np.isfinite(0))
print(np.isfinite(np.nan))
print(""\nTest element-wise for positive or negative infinity:"")
print(np.isinf(np.inf))
print(np.isinf(np.nan))
print(np.isinf(np.NINF))
print(""Test element-wise for NaN:"")
print(np.isnan([np.log(-1.),1.,np.log(0)]))
print(""Test element-wise for NaT (not a time):"")
print(np.isnat(np.array([""NaT"", ""2016-01-01""], dtype=""datetime64[ns]"")))
print(""Test element-wise for negative infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isneginf(x, y))
print(""Test element-wise for positive infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isposinf(x, y))
",True
869,Write a NumPy program to sum and compute the product of a NumPy array elements. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
print(""Sum of the array elements:"")
print(x.sum())
print(""Product of the array elements:"")
print(x.prod())
",True
870,Write a Python program to interleave multiple given lists of different lengths using itertools module. ,"from itertools import chain, zip_longest
def interleave_diff_len_lists(list1, list2, list3, list4):
    return [x for x in chain(*zip_longest(list1, list2, list3, list4)) if x is not None]    
    
nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
",True
871,Write a Python program to find the maximum value in a given heterogeneous list using lambda. ,"def max_val(list_val):
     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  
     return(max_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum values in the said list using lambda:"")
print(max_val(list_val))
",True
872,"Write a NumPy program to find the set exclusive-or of two arrays. Set exclusive-or will return the sorted, unique values that are in only one (not both) of the input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values that are in only one (not both) of the input arrays:"")
print(np.setxor1d(array1, array2))
",True
873,Write a NumPy program to stack arrays in sequence vertically. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.vstack((x,y))
print(""\nStack arrays in sequence vertically:"")
print(new_array)
",True
874,Write a Python program to get the n maximum elements from a given list of numbers. ,"def max_n_nums(nums, n = 1):
  return sorted(nums, reverse = True)[:n]
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Maximum values of the said list:"", max_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee maximum values of the said list:"", max_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums, 2))
",True
875,Write a NumPy program to test element-wise for positive or negative infinity. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for positive or negative infinity:"")
print(np.isinf(a))
",True
876,"Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference. ","def difference(n):
    if n <= 17:
        return 17 - n
    else:
        return (n - 17) * 2 

print(difference(22))
print(difference(14))
",True
877,Write a NumPy program to remove all rows in a NumPy array that contain non-numeric values. ,"import numpy as np
x = np.array([[1,2,3], [4,5,np.nan], [7,8,9], [True, False, True]])
print(""Original array:"")
print(x)
print(""Remove all non-numeric elements of the said array"")
print(x[~np.isnan(x).any(axis=1)])
",True
878,Write a Pandas program to find the indexes of rows of a specified value of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nIndex of rows where specified column matches certain value:"")
print(df.index[df['school_code']=='s001'].tolist())
",True
879,Write a Python program to calculate arc length of an angle. ,"def arclength():
    pi=22/7
    diameter = float(input('Diameter of circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    arc_length = (pi*diameter) * (angle/360)
    print(""Arc Length is: "", arc_length)

arclength()
",True
880,Write a NumPy program to create a Cartesian product of two arrays into single array of 2D points. ,"import numpy as np
x = np.array([1,2,3])
y = np.array([4,5])
result = np.transpose([np.tile(x, len(y)), np.repeat(y, len(x))])
print(result)
",True
881,Write a NumPy program to find the missing data in a given array. ,"import numpy as np 
 
nums = np.array([[3, 2, np.nan, 1],
              [10, 12, 10, 9],
              [5, np.nan, 1, np.nan]])

print(""Original array:"") 
print(nums)
print(""\nFind the missing data of the said array:"")
print(np.isnan(nums))
",True
882,Write a Python program to add more number of elements to a deque object from an iterable object. ,"import collections
even_nums = (2, 4, 6, 8, 10)
even_deque = collections.deque(even_nums)
print(""Even numbers:"")
print(even_deque)
more_even_nums = (12, 14, 16, 18, 20)
even_deque.extend(more_even_nums)
print(""More even numbers:"")
print(even_deque)
",True
883,Write a Python program to print content of elements that contain a specified string of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nContent of elements that contain 'Python' string:"")
str1 = soup.find_all(string=re.compile('Python'))
for txt in str1:
    print("" "".join(txt.split()))
",True
884,Write a Python program to get an array buffer information. ,"from array import array
a = array(""I"", (12,25))
print(""Array buffer start address in memory and number of elements."")
print(a.buffer_info())
",True
885,Write a Python program to count the number of lines in a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
no_lines= len(list(reader))
print(no_lines)
",True
886,Write a Python program to sort an odd-even sort or odd-even transposition sort. ,"def odd_even_transposition(arr: list) -> list:
    arr_size = len(arr)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr[i + 1] < arr[i]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]

    return arr
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
",True
887,"Write a Python program to display a number in left, right and center aligned of width 10. ","x = 22
print(""\nOriginal Number: "", x)
print(""Left aligned (width 10)   :""+""{:< 10d}"".format(x));
print(""Right aligned (width 10)  :""+""{:10d}"".format(x));
print(""Center aligned (width 10) :""+""{:^10d}"".format(x));
print()
",True
888,Write a Python program to determine whether variable is defined or not. ,"try:
  x = 1
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
try:
  y
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
  ",True
889,Write a NumPy program to replace the negative values in a NumPy array with 0. ,"import numpy as np
x = np.array([-1, -4, 0, 2, 3, 4, 5, -6])
print(""Original array:"")
print(x)
print(""Replace the negative values of the said array with 0:"")
x[x < 0] = 0
print(x)
",True
890,"Write a Pandas program to create a stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.bar(stacked=True);
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
",True
891,Write a Python program to find missing and additional values in two lists. ,"list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
print('Missing values in second list: ', ','.join(set(list1).difference(list2)))
print('Additional values in second list: ', ','.join(set(list2).difference(list1)))
",True
892,rite a Python program to remove spaces from a given string. ,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1
    
print(remove_spaces(""w 3 res ou r ce""))
print(remove_spaces(""a b c""))
",True
893,Write a Pandas program to create a Pivot table and find the region wise Television and Home Theater sold. ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"")
print(table.query('Item == [""Television"",""Home Theater""]'))
",True
894,Write a Python program to update all the values of a specific column of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()

    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate all commision to .55:"")
    sql_update_query = """"""Update salesman set commission = .55""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
",True
895,Write a Python program to swap two variables. ,"a = 30
b = 20
print(""\nBefore swap a = %d and b = %d"" %(a, b))
a, b = b, a
print(""\nAfter swaping a = %d and b = %d"" %(a, b))
print()
",True
896,Write a Pandas program to join two dataframes using keys from right dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data1, data2, how='right', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data2, data1, how='right', on=['key1', 'key2'])
print(merged_data)
",True
897,Write a NumPy program to compute the inner product of two given vectors. ,"import numpy as np
x = np.array([4, 5])
y = np.array([7, 10])
print(""Original vectors:"")
print(x)
print(y)
print(""Inner product of said vectors:"")
print(np.dot(x, y))
",True
898,Write a Pandas program to calculate all Thursdays between two given days. ,"import pandas as pd
thursdays  = pd.date_range('2020-01-01', 
                           '2020-12-31', freq=""W-THU"")
print(""All Thursdays between 2020-01-01 and 2020-12-31:\n"")
print(thursdays.values)
",True
899,Write a Python program to print all permutations of a given string (including duplicates). ,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list

print(permute_string('ABCD'));
",True
900,Write a Python program to extract values from a given dictionaries and create a list of lists from those values. ,"def test(dictt,keys):
    return [list(d[k] for k in keys) for d in dictt] 

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]

print(""\nOriginal Dictionary:"")
print(students)
print(""\nExtract values from the said dictionarie and create a list of lists using those values:"")
print(""\n"",test(students,('student_id', 'name', 'class')))
print(""\n"",test(students,('student_id', 'name')))
print(""\n"",test(students,('name', 'class')))
",True
901,Write a NumPy program to calculate the sum of all columns of a 2D NumPy array. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = arr1.sum(axis=0)
print(""\nSum of all columns:"")
print(result)
",True
902,Write a Python program to remove the n,"def remove_char(str, n):
      first_part = str[:n] 
      last_part = str[n+1:]
      return first_part + last_part
print(remove_char('Python', 0))
print(remove_char('Python', 3))
print(remove_char('Python', 5))
",True
903,Write a Python program to remove duplicate characters of a given string. ,"from collections import OrderedDict
def remove_duplicate(str1):
  return """".join(OrderedDict.fromkeys(str1))
     
print(remove_duplicate(""python exercises practice solution""))
print(remove_duplicate(""w3resource""))
",True
904,Write a NumPy program to create a record array from a given regular array. ,"import numpy as np
arra1 = np.array([(""Yasemin Rayner"", 88.5, 90),
                 (""Ayaana Mcnamara"", 87, 99),
             (""Jody Preece"", 85.5, 91)])
print(""Original arrays:"")
print(arra1)
print(""\nRecord array;"")
result = np.core.records.fromarrays(arra1.T,
                              names='col1, col2, col3',
                              formats = 'S80, f8, i8')
print(result)
",True
905,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
",True
906,Write a Python program to input two integers in a single line. ,"print(""Input the value of x & y"")
x, y = map(int, input().split())
print(""The value of x & y are: "",x,y)
",True
907,"Write a Python program to find out, if the given number is abundant. ","def is_abundant(n):
    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctr_sum > n
print(is_abundant(12))
print(is_abundant(13))
",True
908,Write a NumPy program to create a random vector of size 10 and sort it. ,"import numpy as np
x = np.random.random(10)
print(""Original array:"")
print(x)
x.sort()
print(""Sorted array:"")
print(x)
",True
909,"Write a NumPy program to create to concatenate two given arrays of shape (2, 2) and (2,1). ","import numpy as np 
nums1 = np.array([[4.5, 3.5],
                 [5.1, 2.3]])
nums2 = np.array([[1],
                  [2]])
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nConcatenating the said two arrays:"")
print(np.concatenate((nums1, nums2), axis=1))
",True
910,Write a Python program to find the first repeated character in a given string. ,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""

print(first_repeated_char(""abcdabcd""))
print(first_repeated_char(""abcd""))
",True
911,Write a python program to find the longest words. ,"def longest_word(filename):
    with open(filename, 'r') as infile:
              words = infile.read().split()
    max_len = len(max(words, key=len))
    return [word for word in words if len(word) == max_len]

print(longest_word('test.txt'))
",True
912,"Write a Python program to display your details like name, age, address in three different lines. ","def personal_details():
    name, age = ""Simon"", 19
    address = ""Bangalore, Karnataka, India""
    print(""Name: {}\nAge: {}\nAddress: {}"".format(name, age, address))

personal_details()
",True
913,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. Use itertools module. ,"from itertools import groupby
def count_same_pair(nums):
    result = [sum(1 for _ in group) for _, group in groupby(nums)]
    return result

nums = [1,1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)
print(""\nFrequency of the consecutive duplicate elements:"")
print(count_same_pair(nums))
",True
914,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
",True
915,Write a Pandas program to construct a series using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a series using the said MultiIndex levels: "")
s = pd.Series(np.random.randn(8), index = sales_index)
print(s)
",True
916,Write a Python program to write dictionaries and a list of dictionaries to a given CSV file. Use csv.reader,"import csv
print(""Write dictionaries to a CSV file:"")
fw = open(""test.csv"", ""w"", newline='')
writer = csv.DictWriter(fw, fieldnames=[""Name"", ""Class""])
writer.writeheader()
writer.writerow({""Name"": ""Jasmine Barrett"", ""Class"": ""V""})
writer.writerow({""Name"": ""Garry Watson"", ""Class"": ""V""})
writer.writerow({""Name"": ""Courtney Caldwell"", ""Class"": ""VI""})
fw.close()
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
",True
917,Write a Python program to find the first non-repeating character in given string. ,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None

print(first_non_repeating_character('abcdef'))
print(first_non_repeating_character('abcabcdef'))
print(first_non_repeating_character('aabbcc'))
",True
918,Write a Python program to merge more than one dictionary in a single expression. ,"import collections as ct
def merge_dictionaries(color1,color2):
    merged_dict = dict(ct.ChainMap({}, color1, color2))
    return merged_dict
color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
print(""Original dictionaries:"")
print(color1,' ',color2)
print(""\nMerged dictionary:"")
print(merge_dictionaries(color1, color2))

def merge_dictionaries(color1,color2, color3):
    merged_dict = dict(ct.ChainMap({}, color1, color2, color3))
    return merged_dict

color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
color3 = { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" }

print(""\nOriginal dictionaries:"")
print(color1,' ',color2, color3)
print(""\nMerged dictionary:"")

print(merge_dictionaries(color1, color2, color3))
",True
919,Write a Python program to shuffle the elements of a given list. Use random.shuffle(),"import random 
nums = [1, 2, 3, 4, 5]
print(""Original list:"")
print(nums)
random.shuffle(nums)
print(""Shuffle list:"")
print(nums)
words = ['red', 'black', 'green', 'blue']
print(""\nOriginal list:"")
print(words)
random.shuffle(words)
print(""Shuffle list:"")
print(words)
",True
920,"Write a Pandas program to filter those records where WHO region matches with multiple values (Africa, Eastern Mediterranean, Europe) from world alcohol consumption dataset. ","import pandas as pd

new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nFilter by matching multiple values in a given dataframe:"")
flt_wine = new_w_a_con[""WHO region""].isin([""Africa"", ""Eastern Mediterranean"", ""Europe""])
print(new_w_a_con[flt_wine])
",True
921,Write a Python program to sort a given matrix in ascending order according to the sum of its rows. ,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
",True
922,"Write a Python code to send a request to a web page, and print the JSON value of the response. Also print each key value of the response. ","import requests
r = requests.get('https://api.github.com/')
response = r.json()
print(""JSON value of the said response:"")
print(r.json())
print(""\nEach key of the response:"")
print(""Current user url:"",response['current_user_url'])
print(""Current user authorizations html url:"",response['current_user_authorizations_html_url'])
print(""Authorizations url:"",response['authorizations_url'])
print(""code_search_url:"",response['code_search_url'])
print(""commit_search_url:"",response['commit_search_url'])
print(""Emails url:"",response['emails_url'])
print(""Emojis url:"",response['emojis_url'])
print(""Events url:"",response['events_url'])
print(""Feeds url:"",response['feeds_url'])
print(""Followers url:"",response['followers_url'])
print(""Following url:"",response['following_url'])
print(""Gists url:"",response['gists_url'])
print(""Issue search url:"",response['issue_search_url'])
print(""Issues url:"",response['issues_url'])
print(""Keys url:"",response['keys_url'])
print(""label search url:"",response['label_search_url'])
print(""Notifications url:"",response['notifications_url'])
print(""Organization url:"",response['organization_url'])
print(""Organization repositories url:"",response['organization_repositories_url'])
print(""Organization teams url:"",response['organization_teams_url'])
print(""Public gists url:"",response['public_gists_url'])
print(""Rate limit url:"",response['rate_limit_url'])
print(""Repository url:"",response['repository_url'])
print(""Repository search url:"",response['repository_search_url'])
print(""Current user repositories url:"",response['current_user_repositories_url'])
print(""Starred url:"",response['starred_url'])
print(""Starred gists url:"",response['starred_gists_url'])
print(""User url:"",response['user_url'])
print(""User organizations url:"",response['user_organizations_url'])
print(""User repositories url:"",response['user_repositories_url'])
print(""User search url:"",response['user_search_url'])
",True
923,Write a Python program to insert a new item before the second element in an existing array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Insert new value 4 before 3:"")
array_num.insert(1, 4)
print(""New array: ""+str(array_num))
",True
924,Write a NumPy program to save as text a matrix which has in each row 2 float and 1 string at the end. ,"import numpy as np
matrix = [[1, 0, 'aaa'], [0, 1, 'bbb'], [0, 1, 'ccc']]
np.savetxt('test', matrix, delimiter='  ', header='string', comments='', fmt='%s')
",True
925,Write a Python program to check whether multiple variables have the same value. ,"x = 20
y = 20
z = 20
if x == y == z == 20:
    print(""All variables have same value!"")  
	",True
926,"Write a Python program to write a string to a buffer and retrieve the value written, at the end discard buffer memory. ","import io

output = io.StringIO()
output.write('Python Exercises, Practice, Solution')

print(output.getvalue())

output.close()
",True
927,Write a Python program to copy the contents of a file to another file . ,"from shutil import copyfile
copyfile('test.py', 'abc.py')
",True
928,Write a NumPy program to merge three given NumPy arrays of same shape. ,"import numpy as np
arr1 = np.random.random(size=(25, 25, 1))
arr2 = np.random.random(size=(25, 25, 1))
arr3 = np.random.random(size=(25, 25, 1))
print(""Original arrays:"")
print(arr1)
print(arr2)
print(arr3)
result = np.concatenate((arr1, arr2, arr3), axis=-1)
print(""\nAfter concatenate:"")
print(result) 
",True
929,Write a NumPy program to interchange two axes of an array. ,"import numpy as np
x = np.array([[1,2,3]])
print(x)
y =  np.swapaxes(x,0,1)
print(y)
",True
930,Write a Python program to decapitalize the first letter of a given string. ,"def decapitalize_first_letter(s, upper_rest = False):
  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) 
print(decapitalize_first_letter('Java Script'))
print(decapitalize_first_letter('Python'))
",True
931,"Write a Pandas program to select first 2 rows, 2 columns and specific two columns from World alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect first 2 rows:"")
print(w_a_con.iloc[:2])
print(""\nSelect first 2 columns:"")
print(w_a_con.iloc[:,:2].head())
print(""\nSelect 2 specific columns:"")
print(w_a_con[['Display Value', 'Year']])
",True
932,Write a NumPy program to compute e,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\ne^x, element-wise of the said:"")
r = np.exp(x)
print(r)
",True
933,Write a Python program to move the specified number of elements to the start of the given list. ,"def move_start(nums, offset):
  return nums[-offset:] + nums[:-offset] 
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))
",True
934,Write a Python program to find and print all li tags of a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.w3resource.com/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nFind and print all li tags:\n"")
for tag in soup.find_all(""li""):
    print(""{0}: {1}"".format(tag.name, tag.text))
",True
935,Write a Pandas program to add summation to a row of the given excel file. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
sum_row=df[[""Production"", ""Labor_Hours""]].sum()
df_sum=pd.DataFrame(data=sum_row).T
df_sum=df_sum.reindex(columns=df.columns)
df_sum
",True
936,"Write a Python program to make a chain of function decorators (bold, italic, underline etc.) in Python. ","def make_bold(fn):
    def wrapped():
        return ""<b>"" + fn() + ""</b>""
    return wrapped

def make_italic(fn):
    def wrapped():
        return ""<i>"" + fn() + ""</i>""
    return wrapped

def make_underline(fn):
    def wrapped():
        return ""<u>"" + fn() + ""</u>""
    return wrapped
@make_bold
@make_italic
@make_underline
def hello():
    return ""hello world""
print(hello()) 
",True
937,Write a Python program to remove an element from a given list. ,"student = ['Ricky Rivera', 98, 'Math', 90, 'Science']
print(""Original list:"")
print(student)
print(""\nAfter deleting an element:, using index of the element:"")
del(student[0])
print(student)
",True
938,Write a Python program to count repeated characters in a string. ,"import collections
str1 = 'thequickbrownfoxjumpsoverthelazydog'
d = collections.defaultdict(int)
for c in str1:
    d[c] += 1

for c in sorted(d, key=d.get, reverse=True):
  if d[c] > 1:
      print('%s %d' % (c, d[c]))
",True
939,Write a Pandas program to check if a specified column starts with a specified string in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nIf a specified column starts with a specified string?"")
df['company_code_starts_with'] = list(
    map(lambda x: x.startswith('ze'), df['company_code']))
print(df)
",True
940,Write a NumPy program to replace all the nan (missing values) of a given array with the mean of another array. ,"import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
array_nums2 = np.array([[1,2,np.nan],[4,5,6],[np.nan, 7, np.nan]])
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
print(""\nAll the nan of array_nums2 replaced by the mean of array_nums1:"")
array_nums2[np.isnan(array_nums2)]= np.nanmean(array_nums1)
print(array_nums2)
",True
941,Write a Python program to execute a string containing Python code. ,"mycode = 'print(""hello world"")'
code = """"""
def mutiply(x,y):
    return x*y

print('Multiply of 2 and 3 is: ',mutiply(2,3))
""""""
exec(mycode)
exec(code)
",True
942,Write a Python program to check whether an integer fits in 64 bits. ,"int_val = 30
if int_val.bit_length() <= 63:
    print((-2 ** 63).bit_length())
    print((2 ** 63).bit_length())
	",True
943,Write a Python program to calculate the sum of the numbers in a list between the indices of a specified range. ,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   

nums = [2,1,5,6,8,3,4,9,10,11,8,12]
print(""Original list:"")
print(nums)
m = 8
n = 10
print(""Range:"",m,"","",n) 
print(""\nSum of the specified range:"")
print(sum_Range_list(nums, m, n))
",True
944,Write a Pandas program to convert year-month string to dates adding a specified day of the month. ,"import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['Jan 2015', 'Feb 2016', 'Mar 2017', 'Apr 2018', 'May 2019'])
print(""Original Series:"")
print(date_series)
print(""\nNew dates:"")
result = date_series.map(lambda d: parse('11 ' + d))
print(result)
",True
945,Write a NumPy program to convert numpy datetime64 to Timestamp. ,"import numpy as np
from datetime import datetime
dt = datetime.utcnow()
print(""Current date:"")
print(dt)
dt64 = np.datetime64(dt)
ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')
print(""Timestamp:"")
print(ts)
print(""UTC from Timestamp:"")
print(datetime.utcfromtimestamp(ts))
",True
946,Write a Pandas program to rename all and only some of the column names from world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nRename all the column names:"")
w_a_con.columns = ['year','who_region','country','beverage_types','display_values']
print(w_a_con.head())
print(""\nRenaming only some of the column names:"")
new_w_a_con.rename(columns = {""WHO region"":""WHO_region"",""Display Value"":""Display_Value"" },inplace = True)
print(new_w_a_con.head()) 
",True
947,Write a Python program to get the n minimum elements from a given list of numbers. ,"def min_n_nums(nums, n = 1):
  return sorted(nums, reverse = False)[:n]

nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Minimum values of the said list:"", min_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee minimum values of the said list:"", min_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums, 2))
",True
948,Write a Pandas program to create a dataframe and set a title or name of the index column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
                                index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
df.index.name = 'Index_name'
print(""\nSaid DataFrame with a title or name of the index column:"")
print(df)
",True
949,Write a Pandas program to join the two dataframes with matching records from both sides where available. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='outer')
print(""Merged data (outer join):"")
print(merged_data)
",True
950,Write a Python program to create a symbolic link and read it to decide the original file pointed by the link. ,"import os
path = '/tmp/' + os.path.basename(__file__)
print('Creating link {} -> {}'.format(path, __file__))
os.symlink(__file__, path)
stat_info = os.lstat(path)
print('\nFile Permissions:', oct(stat_info.st_mode))
print('\nPoints to:', os.readlink(path))

os.unlink(path)
",True
951,Write a Python program to reverse strings in a given list of string values. ,"def reverse_strings_list(string_list):
    result = [x[::-1] for x in string_list]
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
",True
952,Write a Pandas program to convert integer or float epoch times to Timestamp and DatetimeIndex. ,"import pandas as pd
dates1 = pd.to_datetime([1329806505, 129806505, 1249892905,
                1249979305, 1250065705], unit='s')
print(""Convert integer or float epoch times to Timestamp and DatetimeIndex upto second:"")
print(dates1)
print(""\nConvert integer or float epoch times to Timestamp and DatetimeIndex upto milisecond:"")
dates2 = pd.to_datetime([1249720105100, 1249720105200, 1249720105300,
                1249720105400, 1249720105500], unit='ms')
print(dates2)
",True
953,Write a Python program to convert more than one list to nested dictionary. ,"def nested_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result

student_id = [""S001"", ""S002"", ""S003"", ""S004""] 
student_name = [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] 
student_grade = [85, 98, 89, 92]
print(""Original strings:"")
print(student_id)
print(student_name)
print(student_grade)
print(""\nNested dictionary:"")
ch='a'
print(nested_dictionary(student_id, student_name, student_grade))
",True
954,Write a Python program to find a first even and odd number in a given list of numbers. ,"def first_even_odd(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    first_odd = next((el for el in nums if el%2!=0),-1)
    return first_even,first_odd

nums= [1,3,5,7,4,1,6,8]
print(""Original list:"")
print(nums)
print(""\nFirst even and odd number of the said list of numbers:"")
print(first_even_odd(nums))
",True
955,Write a Python program to sort a list of lists by a given index of the inner list. ,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
",True
956,Write a Python program to generate a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit. ,"def arithmetic_progression(n, x):
  return list(range(n, x + 1, n))

print(arithmetic_progression(1, 15))
print(arithmetic_progression(3, 37))
print(arithmetic_progression(5, 25))
",True
957,Write a NumPy program to sort an given array by the n,"import numpy as np
print(""Original array:\n"")
nums = np.random.randint(0,10,(3,3))
print(nums)
print(""\nSort the said array by the nth column: "")
print(nums[nums[:,1].argsort()])
",True
958,Write a Python program to sort a list of elements using Bogosort sort. ,"import random

def bogosort(nums):
    def isSorted(nums):
        if len(nums) < 2:
            return True
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                return False
        return True

    while not isSorted(nums):
        random.shuffle(nums)
    return nums
num1 = input('Input  comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(bogosort(nums))
",True
959,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
",True
960,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
",True
961,Write a NumPy program to append values to the end of an array. ,"import numpy as np
x = [10, 20, 30]
print(""Original array:"")
print(x)
x = np.append(x, [[40, 50, 60], [70, 80, 90]])
print(""After append values to the end of the array:"")
print(x)
",True
962,Write a Python program to convert a string to a list. ,"import ast
color =""['Red', 'Green', 'White']""
print(ast.literal_eval(color))
",True
963,"Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. ","color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
color = [x for (i,x) in enumerate(color) if i not in (0,4,5)]
print(color)
",True
964,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

print(snake_case('JavaScript'))
print(snake_case('Foo-Bar'))
print(snake_case('foo_bar'))
print(snake_case('--foo.bar'))
print(snake_case('Foo-BAR'))
print(snake_case('fooBAR'))
print(snake_case('foo bar'))
",True
965,Write a Python program to find common element(s) in a given nested lists. ,"def common_in_nested_lists(nested_list):
    result = list(set.intersection(*map(set, nested_list)))
    return result
nested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
print(""\nOriginal lists:"")
print(nested_list)
print(""\nCommon element(s) in nested lists:"")
print(common_in_nested_lists(nested_list))
",True
966,Write a NumPy program to remove nan values from a given array. ,"import numpy as np
x = np.array([200, 300, np.nan, np.nan, np.nan ,700])
y = np.array([[1, 2, 3], [np.nan, 0, np.nan] ,[6,7,np.nan]] )
print(""Original array:"")
print(x)
print(""After removing nan values:"")
result = x[np.logical_not(np.isnan(x))]
print(result)
print(""\nOriginal array:"")
print(y)
print(""After removing nan values:"")
result = y[np.logical_not(np.isnan(y))]
print(result)
",True
967,"Write a Pandas program to create a plot of adjusted closing prices, thirty days and forty days simple moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['SMA_40_days'] = stock_data.iloc[:,4].rolling(window=40).mean()
plt.figure(figsize=[10,8])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days simple moving average', color='red')
plt.plot(stock_data['SMA_40_days'],label='40 days simple moving average', color='green')
plt.legend(loc=2)
plt.show()
",True
968,Write a NumPy program to create a 3x4 matrix filled with values from 10 to 21. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(m)
",True
969,Write a NumPy program to extract second and third elements of the second and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and third elements of the second and third rows"")
print(arra_data[1:3, 1:3])
",True
970,Write a Pandas program to create a Pivot table and find survival rate by gender on various classes. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class')
print(result)
",True
971,Write a NumPy program to calculate percentiles for a sequence or single-dimensional NumPy array. ,"import numpy as np
nums = np.array([1,2,3,4,5])
print(""50th percentile (median):"")
p = np.percentile(nums, 50)
print(p)
print(""40th percentile:"")
p = np.percentile(nums, 40)
print(p)
print(""90th percentile:"")
p = np.percentile(nums, 90)
print(p)
",True
972,Write a Python program to break a given list of integers into sets of a given positive number. Return true or false. ,"import collections as clt
def check_break_list(nums, n):
    coll_data = clt.Counter(nums)
    for x in sorted(coll_data.keys()):
        for index in range(1, n):
            coll_data[x+index] = coll_data[x+index]  - coll_data[x]
            if coll_data[x+index] < 0:
                return False
    return True

nums = [1,2,3,4,5,6,7,8]
n = 4
print(""Original list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
nums = [1,2,3,4,5,6,7,8]
n = 3
print(""\nOriginal list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
",True
973,Write a Python program to sort a list of elements using the insertion sort algorithm. ,"def insertionSort(nlist):
   for index in range(1,len(nlist)):

     currentvalue = nlist[index]
     position = index

     while position>0 and nlist[position-1]>currentvalue:
         nlist[position]=nlist[position-1]
         position = position-1

     nlist[position]=currentvalue

nlist = [14,46,43,27,57,41,45,21,70]
insertionSort(nlist)
print(nlist)
",True
974,"Write a Python program to find the numbers of a given string and store them in a list, display the numbers which are bigger than the length of the list in sorted form. Use lambda function to solve the problem. ","str1 = ""sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5""
print(""Original string: "",str1)
str_num=[i for i in str1.split(' ')]
lenght=len(str_num)
numbers=sorted([int(x) for x in str_num if x.isdigit()])
print('Numbers in sorted form:')
for i in ((filter(lambda x:x>lenght,numbers))):
    print(i,end=' ')
",True
975,Write a Pandas program to merge two given dataframes with different columns. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerge two dataframes with different columns:"")
result = pd.concat([data1,data2], axis=0, ignore_index=True)
print(result)
",True
976,Write a Pandas program to drop those rows from a given DataFrame in which specific columns have missing values. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop those rows in which specific columns have missing values:"")
result = df.dropna(subset=['ord_no', 'customer_id'])
print(result)
",True
977,Write a Python program to find the difference between elements (n+1th - nth) of a given list of numeric values. ,"def elements_difference(nums):
    result = [j-i for i, j in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2,4,6,8]

print(""Original list:"")
print(nums1)
print(""\nDfference between elements (n+1th – nth) of the said list :"")
print(elements_difference(nums1))
print(""\nOriginal list:"")
print(nums2)
print(""\nDfference between elements (n+1th – nth) of the said list :"")
print(elements_difference(nums2))

",True
978,Write a Pandas program to create a time-series from a given list of dates as strings. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date 
dates = ['2014-08-01','2014-08-02','2014-08-03','2014-08-04']
time_series = pd.Series(np.random.randn(4), dates)
print(time_series)
",True
979,Write a Pandas program to convert a series of date strings to a timeseries. ,"import pandas as pd
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
print(""\nSeries of date strings to a timeseries:"")
print(pd.to_datetime(date_series))
",True
980,"Write a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement. ","import numpy as np 
nums = np.random.randint(10, size=(90, 30))
print(""Original array:"")
print(nums)
print(""\nIncrease the number of items (10 edge elements) shown by the print statement:"")
np.set_printoptions(edgeitems=10)
print(nums)
",True
981,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the minimum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_min(s):
    '''
    highlight the minimum in a Series red.
    '''
    is_max = s == s.min()
    return ['background-color: red' if v else '' for v in is_max]

print(""\nHighlight the minimum value in each column:"")
df.style.apply(highlight_min,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
",True
982,Write a Pandas program to split the following dataframe into groups and calculate quarterly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nQuartly purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='Q')).agg({'purch_amt':sum})
print(result)
",True
983,Write a NumPy program to sort a given array by row and column in ascending order. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nSort the said array by row in ascending order:"")
print(np.sort(nums))
print(""\nSort the said array by column in ascending order:"")
print(np.sort(nums, axis=0))
",True
984,Write a Python program that reads a given expression and evaluates it. ,"
import re
print(""Input number of data sets:"")
class c(int):
    def __add__(self,n):
        return c(int(self)+int(n))
    def __sub__(self,n):
        return c(int(self)-int(n))
    def __mul__(self,n):
        return c(int(self)*int(n))
    def __truediv__(self,n):
        return c(int(int(self)/int(n)))
   
for _ in range(int(input())):
  print(""Input an expression:"")
  print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))
",True
985,"Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0. ","import numpy as np
x = np.ones((10, 10))
x[1:-1, 1:-1] = 0
print(x)
",True
986,Write a Python program to pack consecutive duplicates of a given list elements into sublists. ,"from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list)) 

",True
987,Write a Python program to remove additional spaces in a given list. ,"def test(lst):
    result =[]
    for i in lst:
        j = i.replace(' ','')
        result.append(j)
    return result

text = ['abc ', '  ', ' ', 'sdfds ', ' ', '     ', 'sdfds ', 'huy']
print(""\nOriginal list:"")
print(text)
print(""Remove additional spaces from the said list:"")
print(test(text))
",True
988,Write a NumPy program to compute the 80th percentile for all elements in a given array along the second axis. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 = np.percentile(x, 80, 1)
print(""\n80th percentile for all elements of the said array along the second axis:"")
print(r1)
",True
989,Write a NumPy program to multiply a 5x3 matrix by a 3x2 matrix and create a real matrix product. ,"import numpy as np
x = np.random.random((5,3))
print(""First array:"")
print(x)
y = np.random.random((3,2))
print(""Second array:"")
print(y)
z = np.dot(x, y)
print(""Dot product of two arrays:"")
print(z)
",True
990,Write a Pandas program to subtract two timestamps of same time zone or different time zone. ,"import pandas as pd
print(""Subtract two timestamps of same time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-04-01 07:00', tz='US/Eastern')
print(""Difference: "", (date2-date1))
print(""\nSubtract two timestamps of different time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-03-01 07:00', tz='US/Pacific')

print(""Difference: "", (date1.tz_localize(None) - date2.tz_localize(None)))
",True
991,Write a Python program to get the weighted average of two or more numbers. ,"def weighted_average(nums, weights):
  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)
nums1 = [10, 50, 40]
nums2 = [2, 5, 3]
print(""Original list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
nums1 = [82, 90, 76, 83]
nums2 = [.2, .35, .45, 32]
print(""\nOriginal list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
",True
992,Write a Python program to form Bigrams of words in a given list of strings. ,"def bigram_sequence(text_lst):
    result = [a for ls in text_lst for a in zip(ls.split("" "")[:-1], ls.split("" "")[1:])]
    return result
text = [""Sum all the items in a list"", ""Find the second smallest number in a list""]
print(""Original list:"")
print(text)
print(""\nBigram sequence of the said list:"")
print(bigram_sequence(text))
",True
993,Write a Python program to delete the last item from a singly linked list. ,"class Node:
    
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the last item from the list:"")
items.delete_item('Java')
for val in items.iterate_item():
    print(val)
",True
994,Write a Pandas program to filter words from a given series that contain atleast two vowels. ,"import pandas as pd
from collections import Counter
color_series = pd.Series(['Red', 'Green', 'Orange', 'Pink', 'Yellow', 'White'])
print(""Original Series:"")
print(color_series)
print(""\nFiltered words:"")
result = mask = color_series.map(lambda c: sum([Counter(c.lower()).get(i, 0) for i in list('aeiou')]) >= 2)
print(color_series[result])
",True
995,Write a Python program to add leading zeroes to a string. ,"str1='122.22'
print(""Original String: "",str1)
print(""\nAdded trailing zeros:"")
str1 = str1.ljust(8, '0')
print(str1)
str1 = str1.ljust(10, '0')
print(str1)
print(""\nAdded leading zeros:"")
str1='122.22'
str1 = str1.rjust(8, '0')
print(str1)
str1 = str1.rjust(10, '0')
print(str1)
",True
996,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Mine Name"" starts with ""P"". ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Mine_Name""].map(lambda x: x.startswith('P'))].head()
",True
997,"Write a NumPy program to calculate round, floor, ceiling, truncated and round (to the given number of decimals) of the input, element-wise of a given array. ","import numpy as np
x = np.array([3.1, 3.5, 4.5, 2.9, -3.1, -3.5, -5.9])
print(""Original array: "")
print(x)
r1 = np.around(x)
r2 = np.floor(x)
r3 = np.ceil(x)
r4 = np.trunc(x)
r5 = [round(elem) for elem in x]

print(""\naround:   "", r1)
print(""floor:    "",r2)
print(""ceil:     "",r3)
print(""trunc:    "",r4)
print(""round:    "",r5)
",True
998,Write a NumPy program to create a vector of length 10 with values evenly distributed between 5 and 50. ,"import numpy as np
v = np.linspace(10, 49, 5)
print(""Length 10 with values evenly distributed between 5 and 50:"")
print(v)
",True
999,Write a Python program to check whether any word in a given sting contains duplicate characrters or not. Return True or False. ,"def duplicate_letters(text):
	word_list = text.split()
	for word in word_list:
		if len(word) > len(set(word)):
			return False
	return True
text = ""Filter out the factorials of the said list.""
print(""Original text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""Python Exercise.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""The wait is over.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
",True
1000,Write a Python program to find the maximum and minimum value of the three given lists. ,"nums1 = [2,3,5,8,7,2,3]
nums2 = [4,3,9,0,4,3,9]
nums3 = [2,1,5,6,5,5,4]
print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""Maximum value of the said three lists:"")
print(max(nums1+nums2+nums3))
print(""Minimum value of the said three lists:"")
print(min(nums1+nums2+nums3)) 
",True
1001,Write a Pandas program to rename names of columns and specific labels of the Main Index of the MultiIndex dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nRename the columns name of the said dataframe"")
df1 = df.rename(columns={0: ""col1"", 1: ""col2"", 2:""col3"", 3:""col4"", 4:""col5""})
print(df1)
print(""\nRename specific labels of the main index of the DataFrame"")
df2 = df1.rename(index={""sale2"": ""S2"", ""city2"": ""C2""})
print(df2)
",True
1002,Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(5,5))
plt.suptitle('Stock prices of Alphabet Inc.,\n01-04-2020 to 30-09-2020', \
                 fontsize=18, color='black')
plt.xlabel(""Date"",fontsize=16, color='black')
plt.ylabel(""$ price"", fontsize=16, color='black')
 
df2['Close'].plot(color='green');
plt.show()
",True
1003,Write a NumPy program to join a sequence of arrays along a new axis. ,"import numpy as np    
x = np.array([1, 2, 3])
y = np.array([2, 3, 4])
print(""Original arrays:"")
print(x)
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
x = np.array([[1], [2], [3]])
y = np.array([[2], [3], [4]])
print(""\nOriginal arrays:"")
print(x)
print()
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
",True
1004,Write a Python program to rotate a given list by specified number of items to the right or left direction. ,"nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""original List:"")
print(nums1)
print(""\nRotate the said list in left direction by 4:"")
result = nums1[3:] + nums1[:4]
print(result)
print(""\nRotate the said list in left direction by 2:"")
result = nums1[2:] + nums1[:2]
print(result)
print(""\nRotate the said list in Right direction by 4:"")
result = nums1[-3:] + nums1[:-4]
print(result)
print(""\nRotate the said list in Right direction by 2:"")
result = nums1[-2:] + nums1[:-2]
print(result)
",True
1005,Write a Python program to get the last part of a string before a specified character. ,"str1 = 'https://www.w3resource.com/python-exercises/string'
print(str1.rsplit('/', 1)[0])
print(str1.rsplit('-', 1)[0])
",True
1006,Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values. ,"import numpy as np
x = np.random.random((5,5))
print(""Original Array:"")
print(x) 
xmin, xmax = x.min(), x.max()
print(""Minimum and Maximum Values:"")
print(xmin, xmax)
",True
1007,Write a NumPy program to find the 4th element of a specified array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
e1 = x.flat[3]
print(""Forth e1ement of the array:"")
print(e1)
",True
1008,Write a Python program to find the list with maximum and minimum length. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )
    max_list = max(input_list, key = len)
    return(max_length, max_list)
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )
    min_list = min(input_list, key = len)
    return(min_length, min_list)
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[0], [1, 3], [5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[12], [1, 3], [1, 34, 5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
",True
1009,Write a Python program to extract and display all the header tags from en.wikipedia.org/wiki/Main_Page. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
import re

html = urlopen('https://en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer)')
bs = BeautifulSoup(html, 'html.parser')
images = bs.find_all('img', {'src':re.compile('.jpg')})
for image in images: 
    print(image['src']+'\n')
",True
1010,Write a Python program to select an item randomly from a list. ,"import random
color_list = ['Red', 'Blue', 'Green', 'White', 'Black']
print(random.choice(color_list))
",True
1011,Write a NumPy program to build an array of all combinations of three NumPy arrays. ,"import numpy as np
x = [1, 2, 3]
y = [4, 5]
z = [6, 7]
print(""Original arrays:"")
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
print(""Array-3"")
print(z)
new_array = np.array(np.meshgrid(x, y, z)).T.reshape(-1,3)
print(""Combine array:"")
print(new_array)
",True
1012,Write a Python program to count the number of groups of non-zero numbers separated by zeros of a given list of numbers. ,"def test(lst):
    previous_digit = 0
    ctr = 0
    for digit in lst:
        if previous_digit==0 and digit!=0:
            ctr+=1
        previous_digit = digit
    return ctr

nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,5,9,9,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1]

print(""\nOriginal list:"")
print(nums)
print(""\nNumber of groups of non-zero numbers separated by zeros of the said list:"")
print(test(nums)) 
",True
1013,Write a Python program to create a copy of its own source code. ,"def file_copy(src, dest):
    with open(src) as f, open(dest, 'w') as d:
        d.write(f.read())
        file_copy(""untitled0.py"", ""z.py"")
        with open('z.py', 'r') as filehandle:
            for line in filehandle:
                print(line, end = '')
",True
1014,"Write a Python code to send a request to a web page, and print the response text and content. Also get the raw socket response from the server. ","import requests
res = requests.get('https://www.google.com/')
print(""Response text of https://google.com/:"")
print(res.text)
print(""\n=============================================================================="")
print(""\nContent of the said url:"")
print(res.content)
print(""\n=============================================================================="")
print(""\nRaw data of the said url:"")
r = requests.get('https://api.github.com/events', stream = True)
print(r.raw)
print(r.raw.read(15))
",True
1015,Write a Pandas program to split the following dataframe into groups based on customer id and create a list of order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby('customer_id')['ord_date'].apply(list)
print(""\nGroup on 'customer_id' and display the list of order dates in group wise:"")
print(result)
",True
1016,"Write a Pandas program to create a Pivot table and find number of adult male, adult female and children. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('sex',  'who', aggfunc = 'count')
print(result)
",True
1017,Write a Python program to clone or copy a list. ,"original_list = [10, 22, 44, 23, 4]
new_list = list(original_list)
print(original_list)
print(new_list)
",True
1018,Write a NumPy program to calculate the absolute value element-wise. ,"import numpy as np
x = np.array([-10.2, 122.2, .20])
print(""Original array:"")
print(x)
print(""Element-wise absolute value:"")
print(np.absolute(x))
",True
1019,"Write a NumPy program to check whether each element of a given array is composed of digits only, lower case letters only and upper case letters only. ","import numpy as np
x = np.array(['Python', 'PHP', 'JS', 'Examples', 'html5', '5'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r1 = np.char.isdigit(x)
r2 = np.char.islower(x)
r3 = np.char.isupper(x)
print(""Digits only ="", r1)
print(""Lower cases only ="", r2)
print(""Upper cases only ="", r3)
",True
1020,"Write a Pandas program to extract year, month, day, hour, minute, second and weekday from unidentified flying object (UFO) reporting date. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nYear:"")
print(df.Date_time.dt.year.head())
print(""\nMonth:"")
print(df.Date_time.dt.month.head())
print(""\nDay:"")
print(df.Date_time.dt.day.head())
print(""\nHour:"")
print(df.Date_time.dt.hour.head())
print(""\nMinute:"")
print(df.Date_time.dt.minute.head())
print(""\nSecond:"")
print(df.Date_time.dt.second.head())
print(""\nWeekday:"")
print(df.Date_time.dt.weekday_name.head())
",True
1021,Write a Python program to wrap an element in the specified tag and create the new wrapper. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<p>Python exercises.</p>"", ""lxml"")
print(""Original Markup:"")
print(soup.p.string.wrap(soup.new_tag(""i"")))
print(""\nNew Markup:"")
print(soup.p.wrap(soup.new_tag(""div"")))
",True
1022,Write a NumPy program to find unique rows in a NumPy array. ,"import numpy as np
x = np.array([[20, 20, 20, 0],
              [0, 20, 20, 20],
              [0, 20, 20, 20],
              [20, 20, 20, 0],
              [10, 20, 20,20]])
print(""Original array:"")
print(x)
y = np.ascontiguousarray(x).view(np.dtype((np.void, x.dtype.itemsize * x.shape[1])))
_, idx = np.unique(y, return_index=True)

unique_result = x[idx]
print(""Unique rows of the above array:"")
print(unique_result)
",True
1023,"Write a NumPy program to sort a given complex array using the real part first, then the imaginary part. ","import numpy as np
complex_num = [1 + 2j, 3 - 1j, 3 - 2j, 4 - 3j, 3 + 5j]
print(""Original array:"")
print(complex_num)
print(""\nSorted a given complex array using the real part first, then the imaginary part."")
print(np.sort_complex(complex_num))
",True
1024,Write a Pandas program to get a time series with the last working days of each month of a specific year. ,"import pandas as pd
s = pd.date_range('2021-01-01', periods=12, freq='BM')
df = pd.DataFrame(s, columns=['Date'])
print('last working days of each month of a specific year:')
print(df)
",True
1025,Write a Python program to check whether the n-th element exists in a given list. ,"x = [1, 2, 3, 4, 5, 6]
xlen = len(x)-1
print(x[xlen])
",True
1026,"Write a Pandas program to create a plot of adjusted closing prices, 30 days simple moving average and exponential moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['EMA_20_days'] = stock_data.iloc[:,4].ewm(span=20,adjust=False).mean()
plt.figure(figsize=[15,10])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days Simple moving average', color='red')
plt.plot(stock_data['EMA_20_days'],label='20 days Exponential moving average', color='green')
plt.legend(loc=2)
plt.show()
",True
1027,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
",True
1028,"Write a NumPy program to create a 4x4 array with random values, now create a new array from the said array swapping first and last rows. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last rows of the said array:"")
new_nums = nums[::-1]
print(new_nums)
",True
1029,"Write a Python program to create a Beautiful Soup parse tree into a nicely formatted Unicode string, with a separate line for each HTML/XML tag and string. ","from bs4 import BeautifulSoup
str1 = ""<p>Some<b>bad<i>HTML Code</i></b></p>""
print(""Original string:"")
print(str1)
soup = BeautifulSoup(""<p>Some<b>bad<i>HTML Code</i></b></p>"", ""xml"")
print(""\nFormatted Unicode string:"")
print(soup.prettify())
",True
1030,Write a Python program to find the indexes of all elements in the given list that satisfy the provided testing function. ,"def find_index_of_all(lst, fn):
  return [i for i, x in enumerate(lst) if fn(x)]
print(find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1))
",True
1031,Write a Pandas program to join the two given dataframes along rows and merge with another dataframe along the common column id. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

exam_data = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13'],
        'exam_id': [23, 45, 12, 67, 21, 55, 33, 14, 56, 83, 88, 12]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
print(exam_data)

print(""\nJoin first two said dataframes along rows:"")
result_data = pd.concat([student_data1, student_data2])
print(result_data)

print(""\nNow join the said result_data and df_exam_data along student_id:"")
final_merged_data = pd.merge(result_data, exam_data, on='student_id')
print(final_merged_data)
",True
1032,Write a Pandas program to remove the duplicates from 'WHO region' column of World alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())

print(""\nAfter removing the duplicates of WHO region column:"")
print(w_a_con.drop_duplicates('WHO region'))
",True
1033,Write a Pandas program to import three datasheets from a given excel data (coalpublic2013.xlsx ) and combine in to a single dataframe. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
print(df)
",True
1034,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",True
1035,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
",True
1036,Write a NumPy program to compute the natural logarithm of one plus each element of a given array in floating-point accuracy. ,"import numpy as np
x = np.array([1e-99, 1e-100])
print(""Original array: "")
print(x)
print(""\nNatural logarithm of one plus each element:"")
print(np.log1p(x))
",True
1037,A Python Dictionary contains List as value. Write a Python program to update the list values in the said dictionary. ,"def test(dictionary):
    dictionary['Math'] = [x+1 for x in dictionary['Math']]
    dictionary['Physics'] = [x-2 for x in dictionary['Physics']]
    return dictionary

dictionary = { 
               'Math' : [88, 89, 90], 
               'Physics' : [92, 94, 89],
               'Chemistry' : [90, 87, 93]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nUpdate the list values of the said dictionary:"")
print(test(dictionary))
",True
1038,Write a NumPy program to calculate averages without NaNs along a given array. ,"import numpy as np
arr1 = np.array([[10, 20 ,30], [40, 50, np.nan], [np.nan, 6, np.nan], [np.nan, np.nan, np.nan]])
print(""Original array:"")
print(arr1)
temp = np.ma.masked_array(arr1,np.isnan(arr1))
result = np.mean(temp, axis=1)
print(""Averages without NaNs along the said array:"")
print(result.filled(np.nan))
",True
1039,Write a Python program to create a dictionary with the unique values of a given list as keys and their frequencies as the values. ,"from collections import defaultdict
def frequencies(lst):
  freq = defaultdict(int)
  for val in lst:
    freq[val] += 1
  return dict(freq) 
print(frequencies(['a', 'b', 'f', 'a', 'c', 'e', 'a', 'a', 'b', 'e', 'f'])) 
print(frequencies([3,4,7,5,9,3,4,5,0,3,2,3]))
",True
1040,Write a Python program to find the most common element of a given list. ,"from collections import Counter
language = ['PHP', 'PHP', 'Python', 'PHP', 'Python', 'JS', 'Python', 'Python','PHP', 'Python']
print(""Original list:"")
print(language)
cnt = Counter(language)
print(""\nMost common element of the said list:"")
print(cnt.most_common(1)[0][0])
",True
1041,Write a python program to access environment variables and value of the environment variable. ,"import os
print(""Access all environment variables:"")
print('*----------------------------------*')
print(os.environ)
print('*----------------------------------*')
print(""Access a particular environment variable:"")
print(os.environ['HOME'])
print('*----------------------------------*')
print(os.environ['PATH'])
print('*----------------------------------*')
print('Value of the environment variable key:')
print(os.getenv('JAVA_HOME'))
print(os.getenv('PYTHONPATH'))
",True
1042,Write a Python program to round every number of a given list of numbers and print the total sum multiplied by the length of the list. ,"nums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]
print(""Original list: "", nums)
print(""Result:"")
lenght=len(nums)
print(sum(list(map(round,nums))* lenght)) 
",True
1043,Write a Python program to retrieve all descendants of the body tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nDescendants of the body tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.descendants if e.name is not None]
print(root_childs)

",True
1044,Write a Pandas program to capitalize all the string values of specified columns of a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['alberto','gino','ryan', 'Eesha', 'syed'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nAfter capitalizing name column:"")
df['name'] = list(map(lambda x: x.capitalize(), df['name']))
print(df)
",True
1045,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
",True
1046,Write a Python program to get variable unique identification number or string. ,"x = 100
print(format(id(x), 'x'))
s = 'w3resource'
print(format(id(s), 'x')) 
",True
1047,Write a Python program to calculate number of days between two dates.,"from datetime import date
f_date = date(2014, 7, 2)
l_date = date(2014, 7, 11)
delta = l_date - f_date
print(delta.days)
",True
1048,Write a Python program to create a string from two given strings concatenating uncommon characters of the said strings. ,"def uncommon_chars_concat(s1, s2):   
     
     set1 = set(s1) 
     set2 = set(s2) 
  
     common_chars = list(set1 & set2) 
     result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars] 
     return(''.join(result))

s1 = 'abcdpqr'
s2 = 'xyzabcd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nAfter concatenating uncommon characters:"")
print(uncommon_chars_concat(s1, s2))
",True
1049,Write a Pandas program to create a Pivot table and find the item wise unit sold. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Item""], values=""Units"", aggfunc=np.sum))
",True
1050,Write a NumPy program to test whether all elements in an array evaluate to True. ,"import numpy as np
print(np.all([[True,False],[True,True]]))
print(np.all([[True,True],[True,True]]))
print(np.all([10, 20, 0, -50]))
print(np.all([10, 20, -50]))
",True
1051,Write a Python program to remove leading zeros from an IP address. ,"def remove_zeros_from_ip(ip_add):
  new_ip_add = ""."".join([str(int(i)) for i in ip_add.split(""."")])  
  return new_ip_add ;

print(remove_zeros_from_ip(""255.024.01.01""))
print(remove_zeros_from_ip(""127.0.0.01 ""))
",True
1052,Write a NumPy program to convert specified inputs to arrays with at least one dimension. ,"import numpy as np
x= 12.0
print(np.atleast_1d(x))
x = np.arange(6.0).reshape(2, 3)
print(np.atleast_1d(x))
print(np.atleast_1d(1, [3, 4]))
",True
1053,Write a Python program to split a given list into specified sized chunks using itertools module. ,"from itertools import islice
def split_list(lst, n):
    lst = iter(lst)
    result = iter(lambda: tuple(islice(lst, n)), ())
    return list(result)

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
",True
1054,Write a Python program to find all the link tags and list the first ten from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('a')[0:10])

",True
1055,Write a Pandas program to check inequality over the index axis of a given dataframe and a given series. ,"import pandas as pd
df_data = pd.DataFrame({'W':[68,75,86,80,None],'X':[78,75,None,80,86], 'Y':[84,94,89,86,86],'Z':[86,97,96,72,83]});
sr_data = pd.Series([68, 75, 86, 80, None]) 
print(""Original DataFrame:"")
print(df_data)
print(""\nOriginal Series:"")
print(sr_data)
print(""\nCheck for inequality of the said series & dataframe:"")
print(df_data.ne(sr_data, axis = 0))
",True
1056,Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). ,"def insert_end(str):
	sub_str = str[-2:]
	return sub_str * 4

print(insert_end('Python'))
print(insert_end('Exercises'))
",True
1057,"Write a Python program to display vertically each element of a given list, list of lists. ","text = [""a"", ""b"", ""c"", ""d"",""e"", ""f""]
print(""Original list:"")
print(text)
print(""\nDisplay each element vertically of the said list:"")
for i in text:
       print(i)
nums = [[1, 2, 5], [4, 5, 8], [7, 3, 6]] 
print(""Original list:"")
print(nums)
print(""\nDisplay each element vertically of the said list of lists:"")
for a,b,c in zip(*nums): 
    print(a, b, c)
",True
1058,Write a Python program to check if the elements of a given list are unique or not. ,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True

nums1 = [1,2,4,6,8,2,1,4,10,12,14,12,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums1)) 

nums2 = [2,4,6,8,10,12,14]
print (""\nOriginal list:"")
print(nums2)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums2))
",True
1059,Write a Python program to check if a nested list is a subset of another nested list. ,"def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 

list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,6]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 
list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,7]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
",True
1060,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot comparing year, MSHA ID, Production and Labor_hours of first ten records. ","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.head(10).plot(kind='bar', figsize=(20,8))
plt.show()
",True
1061,"Write a NumPy program to add elements in a matrix. If an element in the matrix is 0, we will not add the element below this element. ","import numpy as np
def sum_matrix_Elements(m):
    arra = np.array(m)   
    element_sum = 0  
    for p in range(len(arra)):  
        for q in range(len(arra[p])):  
            if arra[p][q] == 0 and p < len(arra)-1: 
                arra[p+1][q] = 0  
            element_sum += arra[p][q]  
    return element_sum
m = [[1, 1, 0, 2],
          [0, 3, 0, 3], 
          [1, 0, 4, 4]]
print(""Original matrix:"")
print(m)
print(""Sum:"")
print(sum_matrix_Elements(m))
",True
1062,"Write a Python program to get the minimum value of a list, after mapping each element to a value using a given function. ","def min_by(lst, fn):
  return min(map(fn, lst)) 
print(min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
",True
1063,"Write a NumPy program to find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements. ","import numpy as np
x = np.array([1,2,3], dtype=np.float64)
print(""Size of the array: "", x.size)
print(""Length of one array element in bytes: "", x.itemsize)
print(""Total bytes consumed by the elements of the array: "", x.nbytes)
",True
1064,Create two arrays of six elements. Write a NumPy program to count the number of instances of a value occurring in one array on the condition of another array. ,"import numpy as np
x = np.array([10,-10,10,-10,-10,10])
y = np.array([.85,.45,.9,.8,.12,.6])
print(""Original arrays:"")
print(x)
print(y)
result = np.sum((x == 10) & (y > .5))
print(""\nNumber of instances of a value occurring in one array on the condition of another array:"")
print(result)
",True
1065,Write a Python program to count the number 4 in a given list. ,"def list_count_4(nums):
  count = 0  
  for num in nums:
    if num == 4:
      count = count + 1

  return count

print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))",True
1066,Write a Python script to merge two Python dictionaries. ,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
",True
1067,Write a Pandas program to convert unix/epoch time to a regular time stamp in UTC. Also convert the said timestamp in to a given time zone. ,"import pandas as pd
epoch_t = 1621132355
time_stamp = pd.to_datetime(epoch_t, unit='s')


print(""Regular time stamp in UTC:"")
print(time_stamp)
print(""\nConvert the said timestamp in to US/Pacific:"")
print(time_stamp.tz_localize('UTC').tz_convert('US/Pacific'))
print(""\nConvert the said timestamp in to Europe/Berlin:"")
print(time_stamp.tz_localize('UTC').tz_convert('Europe/Berlin'))
",True
1068,Write a NumPy program to create random vector of size 15 and replace the maximum value by -1. ,"import numpy as np
x = np.random.random(15)
print(""Original array:"")
print(x)
x[x.argmax()] = -1
print(""Maximum value replaced by -1:"")
print(x)
",True
1069,"Write a Python program to generate a random integer between 0 and 6 - excluding 6, random integer between 5 and 10 - excluding 10, random integer between 0 and 10, with a step of 3 and random date between two dates. Use random.randrange()","import random
import datetime
print(""Generate a random integer between 0 and 6:"")
print(random.randrange(5))
print(""Generate random integer between 5 and 10, excluding 10:"")
print(random.randrange(start=5, stop=10))
print(""Generate random integer between 0 and 10, with a step of 3:"")
print(random.randrange(start=0, stop=10, step=3))
print(""\nRandom date between two dates:"")
start_dt = datetime.date(2019, 2, 1)
end_dt = datetime.date(2019, 3, 1)
time_between_dates = end_dt - start_dt
days_between_dates = time_between_dates.days
random_number_of_days = random.randrange(days_between_dates)
random_date = start_dt + datetime.timedelta(days=random_number_of_days)
print(random_date)
",True
1070,Write a Pandas program to create a conversion between strings and datetime. ,"from datetime import datetime
from dateutil.parser import parse
print(""Convert datatime to strings:"")
stamp=datetime(2019,7,1)
print(stamp.strftime('%Y-%m-%d'))
print(stamp.strftime('%d/%b/%y'))
print(""\nConvert strings to datatime:"")
print(parse('Sept 17th 2019'))
print(parse('1/11/2019'))
print(parse('1/11/2019', dayfirst=True))
",True
1071,Write a Python program to solve (x + y) * (x + y). ,"x, y = 4, 3
result = x * x + 2 * x * y + y * y
print(""({} + {}) ^ 2) = {}"".format(x, y, result))
",True
1072,Write a Python program to get 90 days of visits broken down by browser for all sites on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen(""https://en.wikipedia.org/wiki/Python"")
bsObj = BeautifulSoup(html)
for link in bsObj.findAll(""a""):
  if 'href' in link.attrs:
    print(link.attrs['href'])
",True
1073,Write a Pandas program to extract only phone number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'company_phone_no': ['Company1-Phone no. 4695168357','Company2-Phone no. 8088729013','Company3-Phone no. 6204658086', 'Company4-Phone no. 5159530096', 'Company5-Phone no. 9037952371']
    })
print(""Original DataFrame:"")
print(df)
def find_phone_number(text):
    ph_no = re.findall(r""\b\d{10}\b"",text)
    return """".join(ph_no)
df['number']=df['company_phone_no'].apply(lambda x: find_phone_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
",True
1074,Write a Pandas program to split a given dataframe into groups and display target column as a list of unique values. ,"import pandas as pd
df = pd.DataFrame( {'id' : ['A','A','A','A','A','A','B','B','B','B','B'], 
                    'type' : [1,1,1,1,2,2,1,1,1,2,2], 
                    'book' : ['Math','Math','English','Physics','Math','English','Physics','English','Physics','English','English']})

print(""Original DataFrame:"")
print(df)
new_df = df[['id', 'type', 'book']].drop_duplicates()\
                         .groupby(['id','type'])['book']\
                         .apply(list)\
                         .reset_index()

new_df['book'] = new_df.apply(lambda x: (','.join([str(s) for s in x['book']])), axis = 1)
print(""\nList all unique values in a group:"")
print(new_df)
",True
1075,Write a Python program to sort a given matrix in ascending order according to the sum of its rows using lambda. ,"def sort_matrix(M):
    result = sorted(M, key=lambda matrix_row: sum(matrix_row)) 
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
",True
1076,Write a Python program to group a sequence of key-value pairs into a dictionary of lists. ,"from collections import defaultdict
class_roll = [('v', 1), ('vi', 2), ('v', 3), ('vi', 4), ('vii', 1)]
d = defaultdict(list)
for k, v in class_roll:
    d[k].append(v)
print(sorted(d.items()))
",True
1077,Write a Pandas program to drop the columns where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the columns where at least one element is missing:"")
result = df.dropna(axis='columns')
print(result)
",True
1078,Write a Python program to get the maximum and minimum value in a dictionary. ,"my_dict = {'x':500, 'y':5874, 'z': 560}

key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))

print('Maximum Value: ',my_dict[key_max])
print('Minimum Value: ',my_dict[key_min])
",True
1079,Write a NumPy program to split of an array of shape 4x4 it into two arrays along the second axis. ,"import numpy as np
x = np.arange(16).reshape((4, 4))
print(""Original array:"",x)
print(""After splitting horizontally:"")
print(np.hsplit(x, [2, 6]))
",True
1080,Write a Pandas program to split a given dataframe into groups and create a new column with count from GroupBy. ,"import pandas as pd
pd.set_option('display.max_rows', None)
df = pd.DataFrame({
'book_name':['Book1','Book2','Book3','Book4','Book1','Book2','Book3','Book5'],
'book_type':['Math','Physics','Computer','Science','Math','Physics','Computer','English'],
'book_id':[1,2,3,4,1,2,3,5]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nNew column with count from groupby:"")
result = df.groupby([""book_name"", ""book_type""])[""book_type""].count().reset_index(name=""count"")
print(result)
",True
1081,"Write a Pandas program to create a Pivot table and find the probability of survival by class, gender, solo boarding and port of embarkation. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', ['sex' , 'alone' ], [ 'embark_town', 'class' ])
print(result)

",True
1082,"Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself. ","def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))
",True
1083,Write a NumPy program to create two arrays of size bigger and smaller than a given array. ,"import numpy as np    
x = np.arange(16).reshape(4,4)
print(""Original arrays:"")
print(x)
print(""\nArray with size 2x2 from the said array:"")
new_array1 = np.resize(x,(2,2))
print(new_array1)
print(""\nArray with size 6x6 from the said array:"")
new_array2 = np.resize(x,(6,6))
print(new_array2)
",True
1084,"Write a Pandas program to find out the records where consumption of beverages per person average >=4 and Beverage Types is Beer, Wine, Spirits from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=4 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 4) & ((w_a_con['Beverage Types'] == 'Beer') | (w_a_con['Beverage Types'] == 'Wine')| (w_a_con['Beverage Types'] == 'Spirits'))].head(10))
",True
1085,"Write a NumPy program to create a three-dimension array with shape (300,400,5) and set to a variable. Fill the array elements with values using unsigned integer (0 to 255). ","import numpy as np   
np.random.seed(32) 
nums = np.random.randint(low=0, high=256, size=(300, 400, 5), dtype=np.uint8)
print(nums)
",True
1086,Write a Python program to check a dictionary is empty or not. ,"my_dict = {}

if not bool(my_dict):
    print(""Dictionary is empty"")
	",True
1087,"Write a NumPy program to count the number of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Number of ‘P’:"")
r = np.char.count(x1, ""P"")
print(r)
",True
1088,"Write a Python program to calculate the sum of a list, after mapping each element to a value using the provided function. ","def sum_by(lst, fn):
  return sum(map(fn, lst))
print(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))
",True
1089,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd

df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
print(month_vs_year.head(10))
",True
1090,Write a NumPy program to remove single-dimensional entries from a specified shape. ,"import numpy as np
x = np.zeros((3, 1, 4))
print(np.squeeze(x).shape)
",True
1091,Write a Python code to send cookies to a given server and access cookies from the response of a server. ,"import requests
url = 'http://httpbin.org/cookies'

my_cookies = dict(cookies_are='Cookies parameter use to send cookies to the server')
r = requests.get(url, cookies = my_cookies)
print(r.text)





",True
1092,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)

orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
result = orders_data.groupby('customer_id').agg({'purch_amt': ['mean', 'min', 'max']})
print(""\nMean, min, and max values of purchase amount (purch_amt) group by customer id  (customer_id)."")
print(result)
",True
1093,Write a Python program to sort a tuple by its float element. ,"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print( sorted(price, key=lambda x: float(x[1]), reverse=True))
",True
1094,Write a NumPy program to get the element-wise remainder of an array of division. ,"import numpy as np
x = np.arange(7)
print(""Original array:"")
print(x)
print(""Element-wise remainder of division:"")
print(np.remainder(x, 5))
",True
1095,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
",True
1096,Write a Python program to remove a specified column from a given nested list. ,"def remove_column(nums, n):
   for i in nums: 
    del i[n] 
   return nums

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""After removing 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""After removing 3rd column:"")
print(remove_column(list2, n))
",True
1097,Write a Python program to count the frequency of words in a file. ,"from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print(""Number of words in the file :"",word_count(""test.txt""))
",True
1098,Write a Python program to chunk a given list into smaller lists of a specified size. ,"from math import ceil
def chunk_list(lst, size):
  return list(
    map(lambda x: lst[x * size:x * size + size],
      list(range(ceil(len(lst) / size)))))
print(chunk_list([1, 2, 3, 4, 5, 6, 7, 8], 3))
",True
1099,"Write a NumPy program to create a 4x4 array, now create a new array from the said array swapping first and last, second and third columns. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last columns of the said array:"")
new_nums = nums[:, ::-1]
print(new_nums)
",True
1100,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
",True
1101,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
",True
1102,Write a Python program to capitalize first and last letters of each word of a given string. ,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  
     
print(capitalize_first_last_letters(""python exercises practice solution""))
print(capitalize_first_last_letters(""w3resource""))
",True
1103,Write a Python program to find if a given string starts with a given character using Lambda. ,"starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Python'))
starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Java'))
",True
1104,Write a Python program to read a given string character by character and compress repeated character by storing the length of those character(s). ,"from itertools import groupby
def encode_str(input_str):
    return [(len(list(n)), m) for m,n in groupby(input_str)]
 
str1 = ""AAASSSSKKIOOOORRRREEETTTTAAAABBBBBBDDDDD"" 
print(""Original string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))

str1 = ""jjjjiiiiooooosssnssiiiiwwwweeeaaaabbbddddkkkklll"" 
print(""\nOriginal string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))
",True
1105,Write a NumPy program to create a 3x3x3 array filled with arbitrary values. ,"import numpy as np
x = np.random.random((3, 3, 3))
print(x)
",True
1106,Write a Python program to print a variable without spaces between values. ,"x = 30
print('Value of x is ""{}""'.format(x))
",True
1107,Write a Python function to reverses a string if it's length is a multiple of 4. ,"def reverse_string(str1):
    if len(str1) % 4 == 0:
       return ''.join(reversed(str1))
    return str1

print(reverse_string('abcd'))
print(reverse_string('python'))
",True
1108,Write a NumPy program to convert angles from radians to degrees for all elements in a given array. ,"import numpy as np
x = np.array([-np.pi, -np.pi/2, np.pi/2, np.pi])
r1 = np.degrees(x)
r2 = np.rad2deg(x)
assert np.array_equiv(r1, r2)
print(r1)
",True
1109,Write a NumPy program to extract all the contiguous 4x4 blocks from a given random 12x12 matrix. ,"import numpy as np
arra1 = np.random.randint(0,5,(12,12))
print(""Original arrays:"")
print(arra1)
n = 4
i = 1 + (arra1.shape[0]-4)
j = 1 + (arra1.shape[1]-4)
result = np.lib.stride_tricks.as_strided(arra1, shape=(i, j, n, n), strides = arra1.strides + arra1.strides)
print(""\nContiguous 4x4 blocks:"")
print(result)
",True
1110,Write a Python program to compute the greatest common divisor (GCD) of two positive integers. ,"def gcd(x, y):
   gcd = 1   
   if x % y == 0:
       return y   
   for k in range(int(y / 2), 0, -1):
       if x % k == 0 and y % k == 0:
           gcd = k
           break 
   return gcd
print(""GCD of 12 & 17 ="",gcd(12, 17))
print(""GCD of 4 & 6 ="",gcd(4, 6))
print(""GCD of 336 & 360 ="",gcd(336, 360))
",True
1111,"Write a NumPy program to change the sign of a given array to that of a given array, element-wise. ","import numpy as np
x1 = np.array([-1, 0, 1, 2])
print(""Original array: "")
print(x1)
x2 = -2.1
print(""\nSign of x1 to that of x2, element-wise:"")
print(np.copysign(x1, x2))
",True
1112,Write a Python program to sort a given list of lists by length and value. ,"def sort_sublists(input_list):
    input_list.sort()  
    input_list.sort(key=len)
    return input_list

list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
",True
1113,Write a Python program to calculate the average value of the numbers in a given tuple of tuples using lambda. ,"def average_tuple(nums):
    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))
    return result

nums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))
print (""Original Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))
nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))
print (""\nOriginal Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))

",True
1114,Write a NumPy program to change the dimension of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""6 rows and 0 columns"")
print(x.shape)

y = np.array([[1, 2, 3],[4, 5, 6],[7,8,9]])
print(""(3, 3) -> 3 rows and 3 columns "")
print(y)

x = np.array([1,2,3,4,5,6,7,8,9])
print(""Change array shape to (3, 3) -> 3 rows and 3 columns "")
x.shape = (3, 3)
print(x)
",True
1115,Write a Pandas program to replace missing white spaces in a given string with the least frequent character. ,"import pandas as pd
str1 = 'abc def abcdef icd'
print(""Original series:"")
print(str1)
ser = pd.Series(list(str1))
element_freq = ser.value_counts()
print(element_freq)
current_freq = element_freq.dropna().index[-1]
result = """".join(ser.replace(' ', current_freq))
print(result)
",True
1116,Write a Pandas program to remove the time zone information from a Time series data. ,"import pandas as pd
date1 = pd.Timestamp('2019-01-01', tz='Europe/Berlin')
date2 = pd.Timestamp('2019-01-01', tz='US/Pacific')
date3 = pd.Timestamp('2019-01-01', tz='US/Eastern')
print(""Time series data with time zone:"")
print(date1)
print(date2)
print(date3)
print(""\nTime series data without time zone:"")
print(date1.tz_localize(None))
print(date2.tz_localize(None))
print(date3.tz_localize(None))
",True
1117,Write a Python program to print the calendar of a given month and year.,"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))",True
1118,Write a Python program to count the number of lines in a text file. ,"def file_lengthy(fname):
        with open(fname) as f:
                for i, l in enumerate(f):
                        pass
        return i + 1
print(""Number of lines in the file: "",file_lengthy(""test.txt""))
",True
1119,Write a NumPy program to check element-wise True/False of a given array where signbit is set. ,"import numpy as np
x = np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4])
print(""Original array: "")
print(x)
r1 = np.signbit(x)
r2 = x < 0
assert np.array_equiv(r1, r2)
print(r1)
",True
1120,"Write a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum. ","def sum_thrice(x, y, z):

     sum = x + y + z
  
     if x == y == z:
      sum = sum * 3
     return sum

print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))
",True
1121,Write a Python program to sort unsorted numbers using Patience sorting. ,"
from bisect import bisect_left
from functools import total_ordering
from heapq import merge
@total_ordering
class Stack(list):
    def __lt__(self, other):
        return self[-1] < other[-1]
    def __eq__(self, other):
        return self[-1] == other[-1]
def patience_sort(collection: list) -> list:
    stacks = []
    
    for element in collection:
        new_stacks = Stack([element])
        i = bisect_left(stacks, new_stacks)
        if i != len(stacks):
            stacks[i].append(element)
        else:
            stacks.append(new_stacks)

    
    collection[:] = merge(*[reversed(stack) for stack in stacks])
    return collection            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
",True
1122,Write a Pandas program to filter those records which not appears in a given list from world alcohol consumption dataset. ,"import pandas as pd

new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nSelect all rows which not appears in a given list:"")
who_region = [""Africa"", ""Eastern Mediterranean"", ""Europe""]
flt_wine = ~new_w_a_con[""WHO region""].isin(who_region)
print(new_w_a_con[flt_wine])
",True
1123,"Write a Pandas program to create a Pivot table and count survival by gender, categories wise age of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex',age], columns='pclass', aggfunc='count')
print(result)
",True
1124,Write a NumPy program to round elements of the array to the nearest integer. ,"import numpy as np
x = np.array([-.7, -1.5, -1.7, 0.3, 1.5, 1.8, 2.0])
print(""Original array:"")
print(x)
x = np.rint(x)
print(""Round elements of the array to the nearest integer:"")
print(x)
",True
1125,Write a Pandas program to count the missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nTotal missing values in a dataframe:"")
tot_missing_vals = df.isnull().sum().sum()
print(tot_missing_vals)
",True
1126,Write a Python program to remove all the values except integer values from a given array of mixed values. ,"def test(lst):
    return [lst for lst in lst if isinstance(lst, int)]
mixed_list = [34.67, 12, -94.89, ""Python"", 0, ""C#""]
print(""Original list:"", mixed_list)
print(""After removing all the values except integer values from the said array of mixed values:"")
print(test(mixed_list)) 
",True
1127,Write a Python program to calculate the sum of two lowest negative numbers of a given array of integers. ,"def test(nums):
    result = sorted([item for item in nums if item < 0])
    return result[0]+result[1]

nums = [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print(""Original list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
nums = [-4, 5, -2, 0, 3, -1, 4 , 9]
print(""\nOriginal list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
",True
1128,Write a Python program to convert a given list of lists to a dictionary. ,"def test(lst):
    result = {item[0]: item[1:] for item in lst}
    return result

students = [[1, 'Jean Castro', 'V'], [2, 'Lula Powell', 'V'], [3, 'Brian Howell', 'VI'], [4, 'Lynne Foster', 'VI'], [5, 'Zachary Simon', 'VII']]

print(""\nOriginal list of lists:"")
print(students)
print(""\nConvert the said list of lists to a dictionary:"")
print(test(students))
",True
1129,Write a Python program to extract a given number of randomly selected elements from a given list. ,"import random
def random_select_nums(n_list, n):
        return random.sample(n_list, n)
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
selec_nums = 3
result = random_select_nums(n_list, selec_nums)
print(""\nSelected 3 random numbers of the above list:"")
print(result) 
",True
1130," Write a Python program to that retrieves an arbitary Wikipedia page of ""Python"" and creates a list of links on that page. ","from urllib.request import urlopen
from urllib.error import HTTPError
from bs4 import BeautifulSoup
def getTitle(url):
    try:
        html = urlopen(url)
    except HTTPError as e:
        return None
    try:
        bsObj = BeautifulSoup(html.read(), ""lxml"")
        title = bsObj.body.h1
    except AttributeError as e:
        return None
    return title
    
    title = getTitle(url)
    if title == None:
      return ""Title could not be found""
    else:
      return title

print(getTitle(""https://www.w3resource.com/""))
print(getTitle(""http://www.example.com/""))
",True
1131,Write a Python program to alter the owner and the group id of a specified file. ,"import os
fd = os.open( ""/tmp"", os.O_RDONLY )
os.fchown( fd, 100, -1)
os.fchown( fd, -1, 50)
print(""Changed ownership successfully.."")
os.close( fd )
",True
1132,"Write a NumPy program to create a two-dimensional array with shape (8,5) of random numbers. Select random numbers from a normal distribution (200,7). ","import numpy as np 
np.random.seed(20) 
cbrt = np.cbrt(7)
nd1 = 200 
print(cbrt * np.random.randn(10, 4) + nd1) 
",True
1133,Write a Python program to multiply two integers without using the * operator in python. ,"def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

print(multiply(3, 5));
",True
1134,Write a Pandas program to extract email from a specified column of string type of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'name_email': ['Alberto Franco [email protected]','Gino Mcneill [email protected]','Ryan Parkes [email protected]', 'Eesha Hinton', 'Gino Mcneill [email protected]']
    })
print(""Original DataFrame:"")
print(df)
def find_email(text):
    email = re.findall(r'[\w\.-][email protected][\w\.-]+',str(text))
    return "","".join(email)
df['email']=df['name_email'].apply(lambda x: find_email(x))
print(""\Extracting email from dataframe columns:"")
print(df)
",True
1135,Write a Python program to read a given CSV files with initial spaces after a delimiter and remove those initial spaces. ,"import csv
print(""\nWith initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=False)
   for row in data:
     print(', '.join(row))
print(""\n\nWithout initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=True)
   for row in data:
     print(', '.join(row))
",True
1136,"Write a Pandas program to split a given dataset, group by one column and remove those groups if all the values of a specific columns are not available. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'weight': [173, 192, 186, 167, 151, 159],
    'height': [35, None, 33, 30, None, 32]},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by one column and remove those groups if all the values of a specific columns are not available:"")
result = df[(~df['height'].isna()).groupby(df['school_code']).transform('any')]
print(result)
",True
1137,Write a Python program to check whether a string starts with specified characters.,"string = ""w3resource.com""
print(string.startswith(""w3r""))
",True
1138,Write a NumPy program to get the largest integer smaller or equal to the division of the inputs. ,"import numpy as np
x = [1., 2., 3., 4.]
print(""Original array:"")
print(x)
print(""Largest integer smaller or equal to the division of the inputs:"")
print(np.floor_divide(x, 1.5))
",True
1139,Write a Python program to calculate the maximum aggregate from the list of tuples (pairs). ,"from collections import defaultdict
def max_aggregate(st_data):
    temp = defaultdict(int)
    for name, marks in st_data:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])


students = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]
print(""Original list:"")
print(students)
print(""\nMaximum aggregate value of the said list of tuple pair:"")
print(max_aggregate(students))
",True
1140,"Write a NumPy program to create a random array with 1000 elements and compute the average, variance, standard deviation of the array elements. ","import numpy as np
x = np.random.randn(1000)
print(""Average of the array elements:"")
mean = x.mean()
print(mean)
print(""Standard deviation of the array elements:"")
std = x.std()
print(std)
print(""Variance of the array elements:"")
var = x.var()
print(var)
",True
1141,Write a NumPy program to split array into multiple sub-arrays along the 3rd axis. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(2, 2, 4)
print(x)
new_array1 = np.dsplit(x, 2)
print(""\nsplit array into multiple sub-arrays along the 3rd axis:"")
print(new_array1)
",True
1142,Write a NumPy program to change the data type of an array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
print(""Data type of the array x is:"",x.dtype)

y = x.astype(float)
print(""New Type: "",y.dtype)
print(y)
",True
1143,"Write a NumPy program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive. ","import numpy as np
x = np.linspace(2.5, 6.5, 30)
print(x)
",True
1144,Write a Pandas program to drop the rows where all elements are missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[np.nan,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': [np.nan,'2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[np.nan,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where all elements are missing:"")
result = df.dropna(how='all')
print(result)
",True
1145,Write a Pandas program to remove repetitive characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'text_code': ['t0001.','t0002','t0003', 't0004'],
    'text_lang': ['She livedd a long life.', 'How oold is your father?', 'What is tthe problem?','TThhis desk is used by Tom.']
    })
print(""Original DataFrame:"")
print(df)
def rep_char(str1):
    tchr = str1.group(0)
    if len(tchr) > 1:
        return tchr[0:1] 
def unique_char(rep, sent_text):
    convert = re.sub(r'(\w)\1+', rep, sent_text) 
    return convert
df['normal_text']=df['text_lang'].apply(lambda x : unique_char(rep_char,x))
print(""\nRemove repetitive characters:"")
print(df)
",True
1146,Write a Python program to remove the specific item from a given list of lists. ,"import copy	
def remove_list_of_lists(color, N):
    for x in color:
        del x[N]
    return color

nums = [
        [""Red"",""Maroon"",""Yellow"",""Olive""],
        [""#FF0000"", ""#800000"", ""#FFFF00"", ""#808000""],
        [""rgb(255,0,0)"",""rgb(128,0,0)"",""rgb(255,255,0)"",""rgb(128,128,0)""]
       ]
nums1 =  copy.deepcopy(nums)
nums2 =  copy.deepcopy(nums)
nums3 =  copy.deepcopy(nums)

print(""Original list of lists:"")
print(nums)
N = 0
print(""\nRemove 1st item from the said list of lists:"")
print(remove_list_of_lists(nums1, N))
N = 1
print(""\nRemove 2nd item from the said list of lists:"")
print(remove_list_of_lists(nums2, N))
N = 3
print(""\nRemove 4th item from the said list of lists:"")
print(remove_list_of_lists(nums3, N))
",True
1147,Write a Pandas program to convert a given Series to an array. ,"import pandas as pd
import numpy as np
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Series to an array"")
a = np.array(s1.values.tolist())
print (a)
",True
1148,Write a NumPy program to split the element of a given array with spaces. ,"import numpy as np
x = np.array(['Python PHP Java C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.split(x)
print(""\nSplit the element of the said array with spaces: "")
print(r)
",True
1149,Write a Python program to find the item with maximum frequency in a given list. ,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum frequency of the said list:"")
print(max_occurrences(nums))
",True
1150,Write a Python program to check if a given element occurs at least n times in a list. ,"def check_element_in_list(lst, x, n):
    t = 0
    try:
        for _ in range(n):
            t = lst.index(x, t) + 1
        return True
    except ValueError:
        return False

nums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]
print(""Original list:"")
print(nums)
x = 3
n = 4
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 0
n = 5
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 8
n = 3
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
",True
1151,Write a Python program to find maximum length of consecutive 0's in a given binary string. ,"def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")
print(max_consecutive_0(str1))
str1 = '111000111'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")
print(max_consecutive_0(str1))
",True
1152,Write a python program to find the next smallest palindrome of a specified number. ,"import sys
def Next_smallest_Palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i

print(Next_smallest_Palindrome(99));
print(Next_smallest_Palindrome(1221));
",True
1153,Write a Python program to generate an infinite cycle of elements from an iterable. ,"import itertools as it
def cycle_data(iter):
    return it.cycle(iter)


result = cycle_data(['A','B','C','D'])
print(""The said function print never-ending items:"")
for i in result:
    print(i)


result = cycle_data('Python itertools')
print(""The said function print never-ending items:"")
for i in result:
    print(i)
",True
1154,Write a NumPy program to test whether any of the elements of a given array is non-zero. ,"import numpy as np
x = np.array([1, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
x = np.array([0, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
",True
1155,Write a Python program to get the array size of types unsigned integer and float. ,"from array import array
a = array(""I"", (12,25))
print(a.itemsize)
a = array(""f"", (12.236,36.36))
print(a.itemsize)
",True
1156,Write a Python program to print the index of the character in a string. ,"str1 = ""w3resource""
for index, char in enumerate(str1):
    print(""Current character"", char, ""position at"", index )
",True
1157,Write a Python program to parse a given CSV string and get the list of lists of string values. Use csv.reader,"import csv
csv_string = """"""1,2,3
4,5,6
7,8,9
""""""
print(""Original string:"")
print(csv_string)
lines = csv_string.splitlines()
print(""List of CSV formatted strings:"")
print(lines)
reader = csv.reader(lines)
parsed_csv = list(reader)
print(""\nList representation of the CSV file:"")
print(parsed_csv)
",True
1158,"Write a Pandas program to filter all records starting from the 'Year' column, access every other column from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFrom the 'Year' column, access every other column:"")
print(w_a_con.loc[:,'Year'::2].head(10))
print(""\nAlternate solution:"")
print(w_a_con.iloc[:,0::2].head(10))
",True
1159,"Write a Pandas program to get the current date, oldest date and number of days between Current date and oldest date of Ufo dataset. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date of Ufo dataset:"")
print(df.Date_time.max())
print(""\nOldest date of Ufo dataset:"")
print(df.Date_time.min())
print(""\nNumber of days between Current date and oldest date of Ufo dataset:"")
print((df.Date_time.max() - df.Date_time.min()).days)
",True
1160,Write a Python program to filter even numbers from a given dictionary values. ,"def test(dictt):
    result = {key: [idx for idx in val if not idx % 2]  
          for key, val in dictt.items()}   
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5], 'VII' : [2, 7, 9]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))
",True
1161,Write a Pandas program to split the following dataset using group by on first column and aggregate over multiple lists on second column. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'student_id': ['S001','S001','S002','S002','S003','S003'],
    'marks': [[88,89,90],[78,81,60],[84,83,91],[84,88,91],[90,89,92],[88,59,90]]})
print(""Original DataFrame:"")
print(df)
print(""\nGroupby and aggregate over multiple lists:"")
result = df.set_index('student_id')['marks'].groupby('student_id').apply(list).apply(lambda x: np.mean(x,0))
print(result)
",True
1162,Write a NumPy program to calculate the arithmetic means of corresponding elements of two given arrays of same size. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nArithmetic means of corresponding elements of said two arrays:"")
print(np.divide(np.add(nums1, nums2), 2))
",True
1163,Write a Python program to count the number of sublists contain a particular element. ,"def count_element_in_list(input_list, x): 
    ctr = 0
    for i in range(len(input_list)): 
        if x in input_list[i]: 
            ctr+= 1
          
    return ctr
      

list1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]] 
print(""Original list:"")
print(list1)
print(""\nCount 1 in the said list:"")
print(count_element_in_list(list1, 1)) 
print(""\nCount 7 in the said list:"")
print(count_element_in_list(list1, 7)) 


list1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] 
print(""\nOriginal list:"")
print(list1)
print(""\nCount 'A' in the said list:"")
print(count_element_in_list(list1, 'A')) 
print(""\nCount 'E' in the said list:"")
print(count_element_in_list(list1, 'E'))
",True
1164,"Write a NumPy program to create a three-dimension array with shape (3,5,4) and set to a variable. ","import numpy as np  
nums = np.array([[[1, 5, 2, 1],
               [4, 3, 5, 6],
               [6, 3, 0, 6],
               [7, 3, 5, 0],
               [2, 3, 3, 5]],
              
              [[2, 2, 3, 1],
               [4, 0, 0, 5],
               [6, 3, 2, 1],
               [5, 1, 0, 0],               
               [0, 1, 9, 1]],
              
              [[3, 1, 4, 2],
               [4, 1, 6, 0],
               [1, 2, 0, 6],
               [8, 3, 4, 0],               
               [2, 0, 2, 8]]]) 
print(""Array:"")
print(nums)
",True
1165,Write a NumPy program to create random set of rows from 2D array. ,"import numpy as np
new_array = np.random.randint(5, size=(5,3))
print(""Random set of rows from 2D array array:"")
print(new_array)
",True
1166,"Write a Python program to get the difference between two given lists, after applying the provided function to each list element of both. ","def difference_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) not in _b]
from math import floor
print(difference_by([2.1, 1.2], [2.3, 3.4], floor)) 
print(difference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))
",True
1167,Write a Pandas program to create a Pivot table and calculate number of women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], aggfunc='count')
print(result)
",True
1168,"Write a Python program to get a new string from a given string where ""Is"" has been added to the front. If the given string already begins with ""Is"" then return the string unchanged. ","def new_string(str):
  if len(str) >= 2 and str[:2] == ""Is"":
    return str
  return ""Is"" + str

print(new_string(""Array""))
print(new_string(""IsEmpty""))
",True
1169,Write a Python program to remove all elements from a given list present in another list. ,"def index_on_inner_list(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result

list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]

print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)

print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
",True
1170,Write a Python program to concatenate all elements in a list into a string and return it. ,"def concatenate_list_data(list):
    result= ''
    for element in list:
        result += str(element)
    return result

print(concatenate_list_data([1, 5, 12, 2]))
",True
1171,Write a Pandas program to select a specific row of given series/dataframe by integer index. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nPrint specified row from the said series using location based indexing:"")
print(""\nThird row:"")
print(ds.iloc[[2]])
print(""\nFifth row:"")
print(ds.iloc[[4]])
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]})

print(""Original DataFrame with single index:"")
print(df)
print(""\nPrint specified row from the said DataFrame using location based indexing:"")
print(""\nThird row:"")
print(df.iloc[[2]])
print(""\nFifth row:"")
print(df.iloc[[4]])
",True
1172,"Write a Python program to check if a function is a user-defined function or not. Use types.FunctionType, types.LambdaType()","import types
def func(): 
    return 1

print(isinstance(func, types.FunctionType))
print(isinstance(func, types.LambdaType))
print(isinstance(lambda x: x, types.FunctionType))
print(isinstance(lambda x: x, types.LambdaType))
print(isinstance(max, types.FunctionType))
print(isinstance(max, types.LambdaType))
print(isinstance(abs, types.FunctionType))
print(isinstance(abs, types.LambdaType))
",True
1173,Write a Python program to match key values in two dictionaries. ,"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
    print('%s: %s is present in both x and y' % (key, value))
	",True
1174,Write a Python program to add a prefix text to all of the lines in a string. ,"import textwrap
sample_text ='''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)

final_result = textwrap.indent(wrapped, '> ')
print()
print(final_result)
print()
",True
1175,Write a Python program to move a specified element in a given list. ,"def group_similar_items(seq,el):
    seq.append(seq.pop(seq.index(el)))
    return seq 

colors = ['red','green','white','black','orange']
print(""Original list:"")
print(colors)
el = ""white""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""red""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""black""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))
",True
1176,"Write a NumPy program to create a 2-D array whose diagonal equals [4, 5, 6, 8] and 0's elsewhere. ","import numpy as np
x =  np.diagflat([4, 5, 6, 8])
print(x)
",True
1177,Write a Python program to computing square roots using the Babylonian method. ,"def BabylonianAlgorithm(number):
    if(number == 0):
        return 0;

    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;

    return g;
print('The Square root of 0.3 =', BabylonianAlgorithm(0.3));
",True
1178,Write a Python program to find  the greatest common divisor (gcd) of two integers. ,"def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)
print(Recurgcd(12,14))
",True
1179,Write a Pandas program to create a DataFrame using intervals as an index. ,"import pandas as pd
print(""Create an Interval Index using IntervalIndex.from_breaks:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},
                            index = pd.IntervalIndex.from_breaks(
                            [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3, 3.5]))    
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_tuples:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_tuples(
                            [(0, .5), (.5, 1), (1, 1.5), (1.5, 2), (2, 2.5), (2.5, 3), (3, 3.5)]))
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_arrays:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_arrays(
                            [0, .5, 1, 1.5, 2, 2.5, 3], [.5, 1, 1.5, 2, 2.5, 3, 3.5]))
print(df_interval)
print(df_interval.index) 
",True
1180,Write a NumPy program to divide each row by a vector element. ,"import numpy as np
x = np.array([[20,20,20],[30,30,30],[40,40,40]])
print(""Original array:"")
print(x)
v = np.array([20,30,40])
print(""Vector:"")
print(v)
print(x / v[:,None])
",True
1181,Write a Python program to print the following 'here document'. ,"print(""""""
a string that you ""don't"" have to escape
This
is a  ....... multi-line
heredoc string --------> example
"""""")
",True
1182,Write a Python program to print the element(s) that has a specified id of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nelement(s) that has #python-network id:\n"")
print(soup.select_one(""#python-network""))
",True
1183,Write a Python program to get a string which is n (non-negative integer) copies of a given string. ,"def larger_string(str, n):
   result = """"
   for i in range(n):
      result = result + str
   return result

print(larger_string('abc', 2))
print(larger_string('.py', 3))
",True
1184,Write a Python program to split a list based on first character of word. ,"from itertools import groupby
from operator import itemgetter

word_list = ['be','have','do','say','get','make','go','know','take','see','come','think',
     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']

for letter, words in groupby(sorted(word_list), key=itemgetter(0)):
    print(letter)
    for word in words:
        print(word)
",True
1185,Write a NumPy program to extract all the elements of the third column from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third column"")
print(arra_data[:,2])
",True
1186,Write a Python program to format a specified string limiting the length of a string. ,"str_num = ""1234567890""
print(""Original string:"",str_num)
print('%.6s' % str_num)
print('%.9s' % str_num)
print('%.10s' % str_num)
",True
1187,Write a Python program to check whether a given string is number or not using Lambda. ,"is_num = lambda q: q.replace('.','',1).isdigit()
print(is_num('26587'))
print(is_num('4.2365'))
print(is_num('-12547'))
print(is_num('00'))
print(is_num('A001'))
print(is_num('001'))
print(""\nPrint checking numbers:"")
is_num1 = lambda r: is_num(r[1:]) if r[0]=='-' else is_num(r)
print(is_num1('-16.4'))
print(is_num1('-24587.11'))
",True
1188,Write a Python program to count the number occurrence of a specific character in a string. ,"s = ""The quick brown fox jumps over the lazy dog.""  
print(""Original string:"")
print(s)
print(""Number of occurrence of 'o' in the said string:"")
print(s.count(""o""))
",True
1189,"Write a NumPy program to create a 1-D array of 20 element spaced evenly on a log scale between 2. and 5., exclusive. ","import numpy as np
x =  np.logspace(2., 5., 20, endpoint=False)
print(x)
",True
1190,"Write a NumPy program to broadcast on different shapes of arrays where a(,3) + b(3). ","import numpy as np    
p = np.array([[0], [10], [20]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
",True
1191,"Write a Python program to configure the rounding to round to the floor, ceiling. Use decimal.ROUND_FLOOR, decimal.ROUND_CEILING","import decimal
print(""Configure the rounding to round to the floor:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_FLOOR
print(decimal.Decimal(20) / decimal.Decimal(6))
print(""\nConfigure the rounding to round to the ceiling:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_CEILING
print(decimal.Decimal(20) / decimal.Decimal(6))
",True
1192,Write a Python program to read and display the content of a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
for row in reader:
    print(row)
",True
1193,Write a Python program that will accept the base and height of a triangle and compute the area. ,"b = int(input(""Input the base : ""))
h = int(input(""Input the height : ""))

area = b*h/2

print(""area = "", area)
",True
1194,Write a NumPy program to compute the sum of the diagonal element of a given array. ,"import numpy as np
m = np.arange(6).reshape(2,3)
print(""Original matrix:"")
print(m)
result =  np.trace(m)
print(""Condition number of the said matrix:"")
print(result)
",True
1195,Write a Python program to find three integers which gives the sum of zero in a given array of integers using Binary Search (bisect). ,"from bisect import bisect, bisect_left
from collections import Counter
class Solution:
    def three_Sum(self, nums):        
        triplets = []
        if len(nums) < 3:
            return triplets
        num_freq = Counter(nums)
        nums = sorted(num_freq)  
        max_num = nums[-1]
        for i, v in enumerate(nums):
            if num_freq[v] >= 2:
                complement =  -2 * v
                if complement in num_freq:
                    if complement != v or num_freq[v] >= 3:
                        triplets.append([v] * 2 + [complement])

            
            if v < 0:  
                two_sum = -v

                
                lb = bisect_left(nums, two_sum - max_num, i + 1)
                ub = bisect(nums, two_sum // 2, lb)                       
                for u in nums[lb : ub]:
                    complement = two_sum - u
                    if complement in num_freq and u != complement:
                        triplets.append([v, u, complement])
        return triplets
nums = [-20, 0, 20, 40, -20, -40, 80]
s = Solution()
result = s.three_Sum(nums)
print(result)
nums = [1, 2, 3, 4, 5, -6]
result = s.three_Sum(nums)
print(result)
",True
1196,Write a Python program to find the items that are parity outliers in a given list. ,"from collections import Counter
def find_parity_outliers(nums):
  return [
    x for x in nums
    if x % 2 != Counter([n % 2 for n in nums]).most_common()[0][0]
  ] 
print(find_parity_outliers([1, 2, 3, 4, 6]))  
print(find_parity_outliers([1, 2, 3, 4, 5, 6, 7]))
",True
1197,Write a Python program to convert an array to an array of machine values and return the bytes representation. ,"from array import *
print(""Bytes to String: "")
x = array('b', [119, 51, 114, 101,  115, 111, 117, 114, 99, 101])
s = x.tobytes()
print(s)
",True
1198,Write a Python program to retrieve children of the html tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nChildren of the html tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.children if e.name is not None]
print(root_childs)

",True
1199,Write a Pandas program to append a list of dictioneries or series to a existing DataFrame and display the combined data. ,"import pandas as pd
student_data1  = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

s6 = pd.Series(['S6', 'Scarlette Fisher', 205], index=['student_id', 'name', 'marks'])


dicts = [{'student_id': 'S6', 'name': 'Scarlette Fisher', 'marks': 203},
         {'student_id': 'S7', 'name': 'Bryce Jensen', 'marks': 207}]

print(""Original DataFrames:"")
print(student_data1)
print(""\nDictionary:"")
print(s6)
combined_data =  student_data1.append(dicts, ignore_index=True, sort=False)
print(""\nCombined Data:"")
print(combined_data)
",True
1200,Write a Python program to sort a list of elements using shell sort algorithm. ,"def shellSort(alist):
    sublistcount = len(alist)//2
    while sublistcount > 0:
      for start_position in range(sublistcount):
        gap_InsertionSort(alist, start_position, sublistcount)

      print(""After increments of size"",sublistcount, ""The list is"",nlist)

      sublistcount = sublistcount // 2

def gap_InsertionSort(nlist,start,gap):
    for i in range(start+gap,len(nlist),gap):

        current_value = nlist[i]
        position = i

        while position>=gap and nlist[position-gap]>current_value:
            nlist[position]=nlist[position-gap]
            position = position-gap

        nlist[position]=current_value


nlist = [14,46,43,27,57,41,45,21,70]
shellSort(nlist)
print(nlist)
",True
1201,Write a Python NumPy program to compute the weighted average along the specified axis of a given flattened array. ,"import numpy as np
a = np.arange(9).reshape((3,3))
print(""Original flattened array:"")
print(a)
print(""Weighted average along the specified axis of the above flattened array:"")
print(np.average(a, axis=1, weights=[1./4, 2./4, 2./4]))
",True
1202,Write a Python program to multiply all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
result=1
for key in my_dict:    
    result=result * my_dict[key]

print(result)
",True
1203,Write a Python program to count number of substrings with same first and last characters of a given string. ,"def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result 
str1 = input(""Input a string: "")
print(no_of_substring_with_equalEnds(str1))
",True
1204,Write a Python program to create a list of empty dictionaries. ,"n = 5
l = [{} for _ in range(n)]
print(l)
",True
1205,Write a Python program to test whether a number is within 100 of 1000 or 2000. ,"def near_thousand(n):
      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))
print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))   
print(near_thousand(2200))
",True
1206,Write a Python program to sort unsorted numbers using Random Pivot Quick Sort. Picks the random index as the pivot. ,"
import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1
def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (
            A[left],
            A[pivot],
        )  
        pivot_index = partition(A, left, right)
        quick_sort_random(
            A, left, pivot_index
        )  
        quick_sort_random(
            A, pivot_index + 1, right
        )  
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 1, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 2, len(nums))
print(nums)
",True
1207,"Write a NumPy program to compute natural, base 10, and base 2 logarithms for all elements in a given array. ","import numpy as np
x = np.array([1, np.e, np.e**2])
print(""Original array: "")
print(x)
print(""\nNatural log ="", np.log(x))
print(""Common log ="", np.log10(x))
print(""Base 2 log ="", np.log2(x))
",True
1208,Write a NumPy program to find the roots of the following polynomials. ,"import numpy as np
print(""Roots of the first polynomial:"")
print(np.roots([1, -2, 1]))
print(""Roots of the second polynomial:"")
print(np.roots([1, -12, 10, 7, -10]))
",True
1209,"Write a Python program to generate a float between 0 and 1, inclusive and generate a random float within a specific range. Use random.uniform()","import random 
print(""Generate a float between 0 and 1, inclusive:"")
print(random.uniform(0, 1))
print(""\nGenerate a random float within a range:"")
random_float = random.uniform(1.0, 3.0)
print(random_float)
",True
1210,Write a Python program to print number with commas as thousands separators(from right side). ,"print(""{:,}"".format(1000000))
print(""{:,}"".format(10000))
",True
1211,Write a NumPy program to create a 10x4 array filled with random floating point number values with and set the array values with specified precision. ,"import numpy as np 
nums = np.random.randn(10, 4)
print(""Original arrays:"")
print(nums)
print(""Set the array values with specified precision:"")
np.set_printoptions(precision=4)
print(nums)
",True
1212,Write a Python program to generate all sublists of a list. ,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs


l1 = [10, 20, 30, 40]
l2 = ['X', 'Y', 'Z']
print(""Original list:"")
print(l1)
print(""S"")
print(sub_lists(l1))
print(""Sublists of the said list:"")
print(sub_lists(l1))
print(""\nOriginal list:"")
print(l2)
print(""Sublists of the said list:"")
print(sub_lists(l2))
",True
1213,Write a Python program to split a given list into specified sized chunks. ,"def split_list(lst, n):
    result = list((lst[i:i+n] for i in range(0, len(lst), n)))
    return result
nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
",True
1214,Write a Python program to strip a set of characters from a string. ,"def strip_chars(str, chars):
    return """".join(c for c in str if c not in chars)

print(""\nOriginal String: "")
print(""The quick brown fox jumps over the lazy dog."")
print(""After stripping a,e,i,o,u"")      
print(strip_chars(""The quick brown fox jumps over the lazy dog."", ""aeiou""))
print()
",True
1215,Write a Python program to find the nested lists elements which are present in another list. ,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
",True
1216,Write a NumPy program to take values from a source array and put them at specified indices of another array. ,"import numpy as np
x = np.array([10, 10, 20, 30, 30], float)
print(x)
print(""Put 0 and 40 in first and fifth position of the above array"")
y = np.array([0, 40, 60], float) 
x.put([0, 4], y)
print(""Array x, after putting two values:"")
print(x)
",True
1217,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. ,"def grouping_dictionary(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
",True
1218,Write a Python program to find files and skip directories of a given directory. ,"import os
print([f for f in os.listdir('/home/students') if os.path.isfile(os.path.join('/home/students', f))])
",True
1219,Write a NumPy program to check two random arrays are equal or not. ,"import numpy as np
x = np.random.randint(0,2,6)
print(""First array:"")
print(x)
y = np.random.randint(0,2,6)
print(""Second array:"")
print(y)
print(""Test above two arrays are equal or not!"")
array_equal = np.allclose(x, y)
print(array_equal)
",True
1220,Write a Python program to find the minimum window in a given string which will contain all the characters of another given string. ,"import collections
def min_window(str1, str2):
    result_char, missing_char = collections.Counter(str2), len(str2)
    i = p = q = 0
    for j, c in enumerate(str1, 1):
        missing_char -= result_char[c] > 0
        result_char[c] -= 1
        if not missing_char:
            while i < q and result_char[str1[i]] < 0:
                result_char[str1[i]] += 1
                i += 1
            if not q or j - i <= q - p:
                p, q = i, j
    return str1[p:q]
           
str1 = ""PRWSOERIUSFK""
str2 = ""OSU""
print(""Original Strings:\n"",str1,""\n"",str2)
print(""Minimum window:"")
print(min_window(str1,str2))
",True
1221,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days). ,"import pandas as pd
import datetime
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
duration = datetime.timedelta(days=365*40)
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
print(""\nSighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days):"")
df =  df[now - df['Date_time'] <= duration]
print(df.head())
",True
1222,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
",True
1223,Write a Python program to convert a list of characters into a string. ,"s = ['a', 'b', 'c', 'd']
str1 = ''.join(s)
print(str1)
",True
1224,"Write a Python program to map the values of a given list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def test(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(test([1, 2, 3, 4], lambda x: x * x))
",True
1225,Write a NumPy program to remove specific elements in a NumPy array. ,"import numpy as np
x = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
index = [0, 3, 4]
print(""Original array:"")
print(x)
print(""Delete first, fourth and fifth elements:"")
new_x = np.delete(x, index)
print(new_x)
",True
1226,Write a Pandas program to get the difference (in days) between documented date and reporting date of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nDifference (in days) between documented date and reporting date of UFO:"")
df['Difference'] = (df['date_documented'] - df['Date_time']).dt.days
print(df)
",True
1227,Write a Pandas program to check whether alphabetic values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001','Company 123', 'abcd', 'Company 12'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nWhether Alphabetic values present in company_code column?"")
df['company_code_is_alpha'] = list(map(lambda x: x.isalpha(), df['company_code']))
print(df)
",True
1228,Write a Python program to convert a given unicode list to a list contains strings. ,"def unicode_to_str(lst):
    result = [str(x) for x in lst]
    return result
students =  [u'S001', u'S002', u'S003', u'S004']
print(""Original lists:"")
print(students)
print("" Convert the said unicode list to a list contains strings:"")
print(unicode_to_str(students))
",True
1229,"Write a Python program to round the numbers of a given list, print the minimum and maximum numbers and multiply the numbers by 5. Print the unique numbers in ascending order separated by space. ","nums = [22.4, 4.0, 16.22, 9.10, 11.00, 12.22, 14.20, 5.20, 17.50]
print(""Original list:"", nums)
numbers=list(map(round,nums))
print(""Minimum value: "",min(numbers))
print(""Maximum value: "",max(numbers))
numbers=list(set(numbers))
numbers=(sorted(map(lambda n:n*5,numbers)))
print(""Result:"")
for numb in numbers:
    print(numb,end=' ')
",True
1230,Write a Python program to get a dictionary from an object's fields. ,"class dictObj(object):
     def __init__(self):
         self.x = 'red'
         self.y = 'Yellow'
         self.z = 'Green'
     def do_nothing(self):
         pass
test = dictObj()
print(test.__dict__)
",True
1231,Write a Python program to find the longest common sub-string from two given strings. ,"from difflib import SequenceMatcher 
  
def longest_Substring(s1,s2): 
  
     seq_match = SequenceMatcher(None,s1,s2) 
  
     match = seq_match.find_longest_match(0, len(s1), 0, len(s2)) 
  
     
     if (match.size!=0): 
          return (s1[match.a: match.a + match.size])  
     else: 
          return ('Longest common sub-string not present')  

s1 = 'abcdefgh'
s2 = 'xswerabcdwd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nCommon longest sub_string:"")
print(longest_Substring(s1,s2))
",True
1232,Write a Pandas program to keep the rows with at least 2 NaN values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the rows with at least 2 NaN values of the said DataFrame:"")
result = df.dropna(thresh=2)
print(result)
",True
1233,Write a Python program to calculate the value of 'a' to the power 'b'. ,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)

print(power(3,4))
",True
1234,Write a Python program to find the factorial of a number using itertools module. ,"import itertools as it
import operator as op

def factorials_nums(n):
    result = list(it.accumulate(it.chain([1], range(1, 1 + n)), op.mul))
    return result;
    
 
print(""Factorials of 5 :"", factorials_nums(5))
print(""Factorials of 9 :"", factorials_nums(9))
",True
1235,"Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged. ","def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))
",True
1236,"Write a Python program to compute the square of first N Fibonacci numbers, using map function and generate a list of the numbers. ","import itertools
n = 10
def fibonacci_nums(x=0, y=1):
    yield x
    while True:
        yield y
        x, y = y, x + y
print(""First 10 Fibonacci numbers:"")
result = list(itertools.islice(fibonacci_nums(), n))
print(result)
square = lambda x: x * x 
print(""\nAfter squaring said numbers of the list:"")
print(list(map(square, result)))
",True
1237,Write a NumPy program to compute an element-wise indication of the sign for all elements in a given array. ,"import numpy as np
x = np.array([1, 3, 5, 0, -1, -7, 0, 5])
print(""Original array;"")
print(x)
r1 = np.sign(x)
r2 = np.copy(x)
r2[r2 > 0] = 1
r2[r2 < 0] = -1
assert np.array_equal(r1, r2)
print(""Element-wise indication of the sign for all elements of the said array:"")
print(r1)
",True
1238,Write a Python program to create a naïve (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
",True
1239,Write a Python program to extract a list of values from a given list of dictionaries. ,"def test(lst, marks):
    result = [d[marks] for d in lst if marks in d]
 
    return result

marks = [{'Math': 90, 'Science': 92}, 
         {'Math': 89, 'Science': 94}, 
         {'Math': 92, 'Science': 88}]

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Science""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Math""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))
",True
1240,"a href=""#EDITOR"">Go to the editor</a>","def pascal_triangle(n):
   trow = [1]
   y = [0]
   for x in range(max(n,0)):
      print(trow)
      trow=[l+r for l,r in zip(trow+y, y+trow)]
   return n>=1
pascal_triangle(6) 
",True
1241,Write a Python function that takes two lists and returns True if they have at least one common member. ,"def common_data(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result
print(common_data([1,2,3,4,5], [5,6,7,8,9]))
print(common_data([1,2,3,4,5], [6,7,8,9]))
",True
1242,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates with more bins. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=200)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
",True
1243,"Write a Python program to combine two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values. The values of the first list need to be unique and hashable. ","def test(keys, values):
  return dict(zip(keys, values))

l1 = ['a', 'b', 'c', 'd', 'e', 'f']
l2 = [1, 2, 3, 4, 5]     
print(""Original lists:"")
print(l1)
print(l2)
print(""\nCombine the values of the said two lists into a dictionary:"")
print(test(l1, l2))
",True
1244,Write a Python program to replace the last element in a list with another list. ,"num1 = [1, 3, 5, 7, 9, 10]
num2 = [2, 4, 6, 8]
num1[-1:] = num2
print(num1)
",True
1245,Write a Python program to sort a list of elements using Topological sort. ,"





edges = {'a': ['c', 'b'], 'b': ['d', 'e'], 'c': [], 'd': [], 'e': []}
vertices = ['a', 'b', 'c', 'd', 'e']
def topological_sort(start, visited, sort):    
    current = start
    
    visited.append(current)
    neighbors = edges[current]
    for neighbor in neighbors:
        
        if neighbor not in visited:
            sort = topological_sort(neighbor, visited, sort)
    
    sort.append(current)
    
    if len(visited) != len(vertices):
        for vertice in vertices:
            if vertice not in visited:
                sort = topological_sort(vertice, visited, sort)
    
    return sort

sort = topological_sort('a', [], [])
print(sort)
",True
1246,Write a Pandas program to change the data type of given a column or a Series. ,"import pandas as pd
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Change the said data type to numeric:"")
s2 = pd.to_numeric(s1, errors='coerce')
print(s2)
",True
1247,Write a NumPy program to convert a Python dictionary to a NumPy ndarray. ,"import numpy as np
from ast import literal_eval
udict = """"""{""column0"":{""a"":1,""b"":0.0,""c"":0.0,""d"":2.0},
   ""column1"":{""a"":3.0,""b"":1,""c"":0.0,""d"":-1.0},
   ""column2"":{""a"":4,""b"":1,""c"":5.0,""d"":-1.0},
   ""column3"":{""a"":3.0,""b"":-1.0,""c"":-1.0,""d"":-1.0}
  }""""""
t = literal_eval(udict)
print(""\nOriginal dictionary:"")
print(t)
print(""Type: "",type(t))
result_nparra = np.array([[v[j] for j in ['a', 'b', 'c', 'd']] for k, v in t.items()])
print(""\nndarray:"")
print(result_nparra)
print(""Type: "",type(result_nparra))
",True
1248,"Write a Python program to get the maximum value of a list, after mapping each element to a value using a given function. ","def max_by(lst, fn):
  return max(map(fn, lst))
print(max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
",True
1249,"Write a Python program to check the priority of the four operators (+, -, *, /). ","from collections import deque
import re

__operators__ = ""+-/*""
__parenthesis__ = ""()""
__priority__ = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1,
}

def test_higher_priority(operator1, operator2):
    return __priority__[operator1] >= __priority__[operator2]

print(test_higher_priority('*','-'))
print(test_higher_priority('+','-'))
print(test_higher_priority('+','*'))
print(test_higher_priority('+','/'))
print(test_higher_priority('*','/'))
",True
1250,Write a Python program to wrap a given string into a paragraph of given width. ,"import textwrap
s = input(""Input a string: "")
w = int(input(""Input the width of the paragraph: "").strip())
print(""Result:"")
print(textwrap.fill(s,w))
",True
1251,Write a Python program to count the number of students of individual class. ,"from collections import Counter
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)
students = Counter(class_name for class_name, no_students in classes)
print(students)
",True
1252,"Write a Python program to get every element that exists in any of the two given lists once, after applying the provided function to each element of both. ","def union_by_el(x, y, fn):
  _x = set(map(fn, x))
  return list(set(x + [item for item in y if fn(item) not in _x])) 
from math import floor
print(union_by_el([4.1], [2.2, 4.3], floor))
",True
1254,Write a Python program to get the number of occurrences of a specified element in an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 9, 3])
print(""Original array: ""+str(array_num))
print(""Number of occurrences of the number 3 in the said array: ""+str(array_num.count(3)))
",True
1255,Write a Python program to check if a substring presents in a given list of string values. ,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False

colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
sub_str = ""ack""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
",True
1256,Write a Python program to print a dictionary line by line. ,"students = {'Aex':{'class':'V',
        'rolld_id':2},
        'Puja':{'class':'V',
        'roll_id':3}}
for a in students:
    print(a)
    for b in students[a]:
        print (b,':',students[a][b])
		",True
1257,Write a Python program to create a shallow copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nSecond list:"")
print(nums_y)
nums =  [[1], [2]]
nums_copy = copy.copy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original list:"")
nums[0][0] = 0
print(""\nFirst list:"")
print(nums)
print(""\nSecond list:"")
print(nums_copy)
",True
1258,Write a Python program to extend a list without append. ,"x = [10, 20, 30]
y = [40, 50, 60]
x[:0] =y
print(x)
",True
1259,Write a Python program to create a naïve (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
",True
1260,"Write a NumPy program to count the lowest index of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'EXAMPLES', 'HTML'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""count the lowest index of ‘P’:"")
r = np.char.find(x1, ""P"")
print(r)
",True
1261,Write a Pandas program to display most frequent value in a given series and replace everything else as 'Other' in the series. ,"import pandas as pd
import numpy as np
np.random.RandomState(100)
num_series = pd.Series(np.random.randint(1, 5, [15]))
print(""Original Series:"")
print(num_series)
print(""Top 2 Freq:"", num_series.value_counts())
result = num_series[~num_series.isin(num_series.value_counts().index[:1])] = 'Other'
print(num_series)
",True
1262,Write a Python program find the common values that appear in two given strings. ,"def intersection_of_two_string(str1, str2):
    result = """"
    for ch in str1:
        if ch in str2 and not ch in result:
            result += ch
    return result

str1 = 'Python3'
str2 = 'Python2.7'
print(""Original strings:"")
print(str1)
print(str2)
print(""\nIntersection of two said String:"") 
print(intersection_of_two_string(str1, str2))
",True
1263,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
",True
1264,Write a Python program to count number of occurrences of each value in a given array of non-negative integers. ,"import numpy as np
array1 = [0, 1, 6, 1, 4, 1, 2, 2, 7] 
print(""Original array:"")
print(array1)
print(""Number of occurrences of each value in array: "")
print(np.bincount(array1))
",True
1265,Write a Python program to get a list of locally installed Python modules. ,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)
",True
1266,Write a Python program to find intersection of two given arrays using Lambda. ,"array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]
array_nums2 = [1, 2, 4, 8, 9]
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
result = list(filter(lambda x: x in array_nums1, array_nums2)) 
print (""\nIntersection of the said arrays: "",result)
",True
1267,Write a Python program to combine values in python list of dictionaries. ,"from collections import Counter
item_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()
for d in item_list:
    result[d['item']] += d['amount']
print(result) 
",True
1268,"Write a NumPy program to create a new array of 3*5, filled with 2. ","import numpy as np

x = np.full((3, 5), 2, dtype=np.uint)
print(x)

y = np.ones([3, 5], dtype=np.uint) *2
print(y)
",True
1269,"Write a Pandas program to filter all records starting from the 2nd row, access every 5th row from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nStarting from the 2nd row, access every 5th row:"")
print(w_a_con.iloc[1::5].head(10))
",True
1270,Write a NumPy program to check whether the dimensions of two given arrays are same or not. ,"import numpy as np
def test_array_dimensions(ar1,ar2):
 try:
   ar1 + ar2
 except ValueError:
   return ""Different dimensions""
 else:
   return ""Same dimensions""
ar1 = np.arange(20).reshape(4,5)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
ar1 = np.arange(20).reshape(5,4)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
",True
1271,Write a Pandas program to create a time-series with two index labels and random values. Also print the type of the index. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date
dates = [datetime(2011, 9, 1), datetime(2011, 9, 2)]
print(""Time-series with two index labels:"")
time_series = pd.Series(np.random.randn(2), dates)
print(time_series)
print(""\nType of the index:"")
print(type(time_series.index))
",True
1272,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])
print(""Original matrix:"")
print(a)
print(""The condition number of the said matrix:"")
print(LA.cond(a))
",True
1273,"Write a NumPy program to view inputs as arrays with at least two dimensions, three dimensions. ","import numpy as np
x = 10
print(""View inputs as arrays with at least two dimensions:"")
print(np.atleast_1d(x))
x = np.arange(4.0).reshape(2, 2)
print(np.atleast_1d(x))
print(""View inputs as arrays with at least three dimensions:"")
x =15
print(np.atleast_3d(x))
x = np.arange(3.0)
print(np.atleast_3d(x))
",True
1274,Write a Pandas program to create the todays date. ,"import pandas as pd
from datetime import date
now = pd.to_datetime(str(date.today()), format='%Y-%m-%d')
print(""Today's date:"")
print(now)
",True
1275,"Write a NumPy program to create a new array of given shape (5,6) and type, filled with zeros. ","import numpy as np
nums = np.zeros(shape=(5, 6), dtype='int')
print(""Original array:"")
print(nums)
nums[::2, ::2] = 3
nums[1::2, ::2] = 7
print(""\nNew array:"")
print(nums)
",True
1276,Write a NumPy program to save a given array to a binary file . ,"import numpy as np
import os
a = np.arange(20)
np.save('temp_arra.npy', a)
print(""Check if 'temp_arra.npy' exists or not?"")
if os.path.exists('temp_arra.npy'):
    x2 = np.load('temp_arra.npy')
    print(np.array_equal(a, x2))
",True
1277,Write a Python program to extract the nth element from a given list of tuples. ,"def extract_nth_element(test_list, n):
    result = [x[n] for x in test_list]
    return result

students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))

n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
",True
1278,Write a NumPy program to create a contiguous flattened array. ,"import numpy as np
x = np.array([[10, 20, 30], [20, 40, 50]])
print(""Original array:"")
print(x)
y = np.ravel(x)
print(""New flattened array:"")
print(y)
",True
1279,Write a Python program to print the first n Lucky Numbers. ,"n=int(input(""Input a Number: ""))
List=range(-1,n*n+9,2)
i=2
while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
print(List[1:n+1])
",True
1280,Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument. ,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n=int(input(""Input a number to compute the factiorial : ""))
print(factorial(n))
",True
1281,Write a Python program to convert a list into a nested dictionary of keys. ,"num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
    current[name] = {}
    current = current[name]
print(new_dict)
",True
1282,"Write a Python program to find the second lowest grade of any student(s) from the given names and grades of each student using lists and lambda. Input number of students, names and grades of each student. ","students = []
sec_name = []
second_low = 0
n = int(input(""Input number of students: ""))
for _ in range(n):
   s_name = input(""Name: "")
   score = float(input(""Grade: ""))
   students.append([s_name,score])
print(""\nNames and Grades of all students:"")
print(students)
order =sorted(students, key = lambda x: int(x[1]))
for i in range(n):
   if order[i][1] != order[0][1]:
       second_low = order[i][1]
       break
print(""\nSecond lowest grade: "",second_low)
sec_student_name = [x[0] for x in order if x[1] == second_low]
sec_student_name.sort()
print(""\nNames:"")
for s_name in sec_student_name:
   print(s_name)
",True
1283,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
",True
1284,Write a Python program to convert string element to integer inside a given tuple using lambda. ,"def tuple_int_str(tuple_str):
    result = tuple(map(lambda x: (int(x[0]), int(x[2])), tuple_str))
    return result     
tuple_str =  (('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))
print(""Original tuple values:"")
print(tuple_str)
print(""\nNew tuple values:"")
print(tuple_int_str(tuple_str))
",True
1285,Write a Pandas program to extract hash attached word from twitter text from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'tweets': ['#Obama says goodbye','Retweets for #cash','A political endorsement in #Indonesia', '1 dog = many #retweets', 'Just a simple #egg']
    })
print(""Original DataFrame:"")
print(df)
def find_hash(text):
    hword=re.findall(r'(?<=#)\w+',text)
    return "" "".join(hword)
df['hash_word']=df['tweets'].apply(lambda x: find_hash(x))
print(""\Extracting#@word from dataframe columns:"")
print(df)
",True
1286,"Write a Python program to get the index of the first element, which is greater than a specified element using itertools module. ","from itertools import takewhile
def first_index(l1, n):
    return len(list(takewhile(lambda x: x[1] <= n, enumerate(l1))))


nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
",True
1287,Write a Python program to sort unsorted numbers using Timsort. ,"
def binary_search(lst, item, start, end):
    if start == end:
        return start if lst[start] > item else start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)
    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + 1 :]
    return lst
def merge(left, right):
    if not left:
        return right

    if not right:
        return left
    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)
    return [right[0]] + merge(left, right[1:])

def tim_sort(lst):
    length = len(lst)
    runs, sorted_runs = [], []
    new_run = [lst[0]]
    sorted_array = []
    i = 1
    while i < length:
        if lst[i] < lst[i - 1]:
            runs.append(new_run)
            new_run = [lst[i]]
        else:
            new_run.append(lst[i])
        i += 1
    runs.append(new_run)
    for run in runs:
        sorted_runs.append(insertion_sort(run))
    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)
    return sorted_array
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst =  ""Python""
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst = (1.1, 1, 0, -1, -1.1)
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
",True
1288,Write a Python program to check if a given function returns True for at least one element in the list. ,"def test(lst, fn = lambda x: x):
  return all(not fn(x) for x in lst)
print(test([1, 0, 2, 3], lambda x: x >= 3 ))
print(test([1, 0, 2, 3], lambda x: x < 0 ))
print(test([2, 2, 4, 4]))
",True
1289,Write a Python program to initialize a list containing the numbers in the specified range where start and end are inclusive and the ratio between two terms is step. Returns an error if step equals 1. ,"from math import floor, log
def geometric_progression(end, start=1, step=2):
  return [start * step ** i for i in range(floor(log(end / start)
          / log(step)) + 1)] 
print(geometric_progression(256))
print(geometric_progression(256, 3))
print(geometric_progression(256, 1, 4))
",True
1290,"Write a Pandas program to create a whole month of dates in daily frequencies. Also find the maximum, minimum timestamp and indexs. ","import pandas as pd
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""Month of December 2020:"")
print(dates)
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""\nMaximum date: "", dates.max())
print(""Minimum date: "", dates.min())
print(""Maximum index: "", dates.idxmax())
print(""Minimum index: "", dates.idxmin())
",True
1291,Write a Python program to sort a list of elements using Radix sort. ,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(radix_sort(nums))
",True
1292,Write a Pandas program to add some data to an existing Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
print(""\nData Series after adding some data:"")
new_s = s.append(pd.Series(['500', 'php']))
print(new_s)
",True
1293,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
",True
1294,Write a Python program to create a dictionary from two lists without losing duplicate values. ,"from collections import defaultdict
class_list = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']
id_list = [1, 2, 2, 3]
temp = defaultdict(set)
for c, i in zip(class_list, id_list):
    temp[c].add(i)
print(temp)
",True
1295,Write a Python program to create a dictionary with the same keys as the given dictionary and values generated by running the given function for each value. ,"def test(obj, fn):
  return dict((k, fn(v)) for k, v in obj.items())
 
users = {
  'Theodore': { 'user': 'Theodore', 'age': 45 },
  'Roxanne': { 'user': 'Roxanne', 'age': 15 },
  'Mathew': { 'user': 'Mathew', 'age': 21 },
}
print(""\nOriginal dictionary elements:"")
print(users)
print(""\nDictionary with the same keys:"")
print(test(users, lambda u : u['age']))
",True
1296,Write a Pandas program to create a plot of stock price and trading volume of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
top_plt = plt.subplot2grid((5,4), (0, 0), rowspan=3, colspan=4)
top_plt.plot(stock_data.index, stock_data[""Close""])
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]')
bottom_plt = plt.subplot2grid((5,4), (3,0), rowspan=1, colspan=4)
bottom_plt.bar(stock_data.index, stock_data['Volume'])
plt.title('\nAlphabet Inc. Trading Volume', y=-0.60)
plt.gcf().set_size_inches(12,8)
",True
1297,Write a Python program to square and cube every number in a given list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nSquare every number of the said list:"")
square_nums = list(map(lambda x: x ** 2, nums))
print(square_nums)
print(""\nCube every number of the said list:"")
cube_nums = list(map(lambda x: x ** 3, nums))
print(cube_nums)
",True
1298,"Write a NumPy program to generate a uniform, non-uniform random sample from a given 1-D array with and without replacement. ","import numpy as np 
print(""Generate a uniform random sample with replacement:"") 
print(np.random.choice(7, 5))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False))
print(""\nGenerate a non-uniform random sample with replacement:"") 
print(np.random.choice(7, 5, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))  
",True
1299,Write a Python program to use double quotes to display strings. ,"import json
print(json.dumps({'Alex': 1, 'Suresh': 2, 'Agnessa': 3}))
",True
1300,Write a Python program to get the current memory address and the length in elements of the buffer used to hold an array's contents and also find the size of the memory buffer in bytes. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Current memory address and the length in elements of the buffer: ""+str(array_num.buffer_info()))
print(""The size of the memory buffer in bytes: ""+str(array_num.buffer_info()[1] * array_num.itemsize))
",True
1301,Write a NumPy program to compute the determinant of a given square array. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0], [1, 2]])
print(""Original 2-d array"")
print(a)
print(""Determinant of the said 2-D array:"")
print(np.linalg.det(a))
",True
1302,"Write a Pandas program to split the following dataframe into groups by school code and get mean, min, and max value of age with customized column name for each school. ","import pandas as pd
pd.set_option('display.max_rows', None)

student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    ' height ': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nMean, min, and max value of age for each school with customized column names:')
grouped_single = student_data.groupby('school_code').agg(Age_Mean = ('age','mean'),Age_Max=('age',max),Age_Min=('age',min))
print(grouped_single)
",True
1303,"Write a Python program to filter the height and width of students, which are stored in a dictionary using lambda. ","def filter_data(students):
    result = dict(filter(lambda x: (x[1][0], x[1][1]) > (6.0, 70), students.items()))
    return result  
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight> 6ft and Weight> 70kg:"")
print(filter_data(students))
",True
1304,"Write a NumPy program to remove the first dimension from a given array of shape (1,3,4). ","import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [5, 0, 3, 2]]])
print('Shape of the said array:')
print(nums.shape) 
print(""\nAfter removing the first dimension of the shape of the said array:"")
",True
1305,Write a NumPy program to compute the following polynomial values. ,"import numpy as np
print(""Polynomial value when x = 2:"")
print(np.polyval([1, -2, 1], 2))
print(""Polynomial value when x = 3:"")
print(np.polyval([1, -12, 10, 7, -10], 3))
",True
1306,Write a Python program to get the file size of a plain file. ,"def file_size(fname):
        import os
        statinfo = os.stat(fname)
        return statinfo.st_size

print(""File size in bytes of a plain file: "",file_size(""test.txt""))
",True
1307,Write a Python program to remove all consecutive duplicates of a given string. ,"from itertools import groupby 
def remove_all_consecutive(str1): 
	result_str = [] 
	for (key,group) in groupby(str1): 
		result_str.append(key) 

	return ''.join(result_str)
	
str1 = 'xxxxxyyyyy'
print(""Original string:"" + str1)
print(""After removing consecutive duplicates: "" + str1)
print(remove_all_consecutive(str1))
",True
1308,Write a Python program that accept some words and count the number of distinct words. Print the number of distinct words and number of occurrences for each distinct word according to their appearance. ,"from collections import Counter, OrderedDict
class OrderedCounter(Counter,OrderedDict):
   pass
word_array = []
n = int(input(""Input number of words: ""))
print(""Input the words: "")
for i in range(n):
   word_array.append(input().strip())
word_ctr = OrderedCounter(word_array)
print(len(word_ctr))
for word in word_ctr:
   print(word_ctr[word],end=' ')
",True
1309,Write a Pandas program to get the average mean of the UFO (unidentified flying object) sighting was reported. ,"import pandas as pd

df = pd.read_csv(r'ufo.csv')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())

df['instance'] = 1


df.set_index(df['date_documented'], drop=True, inplace=True)


ufo2 = pd.DataFrame(df['instance'].resample('M').count())


ufo2['date_documented'] = pd.to_datetime(ufo2.index.values)

ufo2['month'] = ufo2['date_documented'].apply(lambda x: x.month)
print(""Average mean of  the UFO (unidentified flying object) sighting was reported:"")
print(ufo2.groupby(by='month').mean())
",True
1310,Write a Python program to reverse a given list of lists. ,"def reverse_list_of_lists(list1):
    return list1[::-1]
colors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]
print(""Original list:"")
print(colors)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(colors))
nums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]
print(""\nOriginal list:"")
print(nums)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(nums))
",True
1311,Write a Python program to iterate over two lists simultaneously. ,"num = [1, 2, 3]
color = ['red', 'white', 'black']
for (a,b) in zip(num, color):
     print(a, b)
	 ",True
1312,Write a Python program to split a given dictionary of lists into list of dictionaries using map function. ,"def list_of_dicts(marks):
    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))
    return list(result)
marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
",True
1313,Write a Python program to find the second largest number in a list. ,"def second_largest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[-2]   
print(second_largest([1,2,3,4,4]))
print(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_largest([2,2]))
print(second_largest([1]))
",True
1314,Write a Pandas program to split the following dataframe into groups based on all columns and calculate Groupby value counts on the dataframe. ,"import pandas as pd
df = pd.DataFrame( {'id' : [1, 2, 1, 1, 2, 1, 2], 
                    'type' : [10, 15, 11, 20, 21, 12, 14], 
                    'book' : ['Math','English','Physics','Math','English','Physics','English']})

print(""Original DataFrame:"")
print(df)
result = df.groupby(['id', 'type', 'book']).size().unstack(fill_value=0)
print(""\nResult:"")
print(result)
",True
1315,Write a Python program to sort a list of lists by a given index of the inner list using lambda. ,"def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=lambda x: x[index_no])
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
",True
1316,Write a Python program to get all combinations of key-value pairs in a given dictionary. ,"import itertools
def test(dictt):
    result = list(map(dict, itertools.combinations(dictt.items(), 2)))
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))
",True
1317,Write a Pandas program to create a Pivot table and find the region wise total sale. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=""Region"",values=""Sale_amt"", aggfunc = np.sum)
print(table)
",True
1318,Write a Python program to sort a list alphabetically in a dictionary. ,"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)
",True
1319,Write a Python program to sort unsorted numbers using Merge-insertion sort. ,"
from __future__ import annotations


def merge_insertion_sort(collection: list[int]) -> list[int]:

    def binary_search_insertion(sorted_list, item):
        left = 0
        right = len(sorted_list) - 1
        while left <= right:
            middle = (left + right) // 2
            if left == right:
                if sorted_list[middle] < item:
                    left = middle + 1
                break
            elif sorted_list[middle] < item:
                left = middle + 1
            else:
                right = middle - 1
        sorted_list.insert(left, item)
        return sorted_list

    def sortlist_2d(list_2d):
        def merge(left, right):
            result = []
            while left and right:
                if left[0][0] < right[0][0]:
                    result.append(left.pop(0))
                else:
                    result.append(right.pop(0))
            return result + left + right

        length = len(list_2d)
        if length <= 1:
            return list_2d
        middle = length // 2
        return merge(sortlist_2d(list_2d[:middle]), sortlist_2d(list_2d[middle:]))

    if len(collection) <= 1:
        return collection

    two_paired_list = []
    has_last_odd_item = False
    for i in range(0, len(collection), 2):
        if i == len(collection) - 1:
            has_last_odd_item = True
        else:
            if collection[i] < collection[i + 1]:
                two_paired_list.append([collection[i], collection[i + 1]])
            else:
                two_paired_list.append([collection[i + 1], collection[i]])

    sorted_list_2d = sortlist_2d(two_paired_list)

    result = [i[0] for i in sorted_list_2d]

    result.append(sorted_list_2d[-1][1])

    if has_last_odd_item:
        pivot = collection[-1]
        result = binary_search_insertion(result, pivot)

    is_last_odd_item_inserted_before_this_index = False
    for i in range(len(sorted_list_2d) - 1):
        if result[i] == collection[-i]:
            is_last_odd_item_inserted_before_this_index = True
        pivot = sorted_list_2d[i][1]
        
        
        if is_last_odd_item_inserted_before_this_index:
            result = result[: i + 2] + binary_search_insertion(result[i + 2 :], pivot)
        else:
            result = result[: i + 1] + binary_search_insertion(result[i + 1 :], pivot)

    return result

nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))

chars = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(chars)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(chars))
",True
1320,Write a NumPy program to save a given array to a text file and load it. ,"import numpy as np
import os
x = np.arange(12).reshape(4, 3)
print(""Original array:"")
print(x)
header = 'col1 col2 col3'
np.savetxt('temp.txt', x, fmt=""%d"", header=header) 
print(""After loading, content of the text file:"")
result = np.loadtxt('temp.txt')
print(result)
",True
1321,"Write a Python program to sum two or more lists, the lengths of the lists may be different. ","def sum_lists_diff_length(test_list):
    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]
    return result

nums = [[1,2,4],[2,4,4],[1,2]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))

nums = [[1],[2,4,4],[1,2],[4]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))
",True
1322,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
",True
1323,Write a Python program to get the third side of right angled triangle from two given sides. ,"def pythagoras(opposite_side,adjacent_side,hypotenuse):
        if opposite_side == str(""x""):
            return (""Opposite = "" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))
        elif adjacent_side == str(""x""):
            return (""Adjacent = "" + str(((hypotenuse**2) - (opposite_side**2))**0.5))
        elif hypotenuse == str(""x""):
            return (""Hypotenuse = "" + str(((opposite_side**2) + (adjacent_side**2))**0.5))
        else:
            return ""You know the answer!""
    
print(pythagoras(3,4,'x'))
print(pythagoras(3,'x',5))
print(pythagoras('x',4,5))
print(pythagoras(3,4,5))
",True
1324,Write a Python function to create the HTML string with tags around the word(s). ,"def add_tags(tag, word):
	return ""<%s>%s</%s>"" % (tag, word, tag)
print(add_tags('i', 'Python'))
print(add_tags('b', 'Python Tutorial'))
",True
1325,Write a Python program to get the least common multiple (LCM) of two positive integers. ,"def lcm(x, y):
  if x > y:
      z = x
  else:
      z = y
  while(True):
      if((z % x == 0) and (z % y == 0)):
          lcm = z
          break
      z += 1
  return lcm
print(lcm(4, 6))
print(lcm(15, 17))
",True
1326,"Write a Python program to count Uppercase, Lowercase, special character and numeric values in a given string. ","def count_chars(str):
     upper_ctr, lower_ctr, number_ctr, special_ctr = 0, 0, 0, 0
     for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          elif str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1
          elif str[i] >= '0' and str[i] <= '9': number_ctr += 1
          else: special_ctr += 1
     return upper_ctr, lower_ctr, number_ctr, special_ctr
           
str = ""@W3Resource.Com""
print(""Original Substrings:"",str)
u, l, n, s = count_chars(str)
print('\nUpper case characters: ',u)
print('Lower case characters: ',l)
print('Number case: ',n)
print('Special case characters: ',s)
",True
1327,Write a Python program to find all the values in a list are greater than a specified number. ,"list1 = [220, 330, 500]
list2 = [12, 17, 21]
print(all(x >= 200 for x in list1))
print(all(x >= 25 for x in list2))
",True
1328,"Write a Python program to join two given list of lists of same length, element wise. ","def elementswise_join(l1, l2):
    result = [x + y for x, y in zip(l1, l2)]
    return result

nums1 = [[10,20], [30,40], [50,60], [30,20,80]]
nums2 = [[61], [12,14,15], [12,13,19,20], [12]]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(nums1, nums2))

list1 = [['a','b'], ['b','c','d'], ['e', 'f']]
list2 = [['p','q'], ['p','s','t'], ['u','v','w']]
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(list1, list2))
",True
1329,Write a NumPy program to find indices of elements equal to zero in a NumPy array. ,"import numpy as np
nums = np.array([1,0,2,0,3,0,4,5,6,7,8])
print(""Original array:"")
print(nums)
print(""Indices of elements equal to zero of the said array:"")
result = np.where(nums == 0)[0]
print(result)
",True
1330,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
",True
1331,Write a Pandas program to join (left join) the two dataframes using keys from left dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data1, data2, how='left', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data2, data1, how='left', on=['key1', 'key2'])
print(merged_data)
",True
1332,Write a Python program to sort a list of elements using Heap sort. ,"def heap_data(nums, index, heap_size):
    largest_num = index
    left_index = 2 * index + 1
    right_index = 2 * index + 2
    if left_index < heap_size and nums[left_index] > nums[largest_num]:
        largest_num = left_index

    if right_index < heap_size and nums[right_index] > nums[largest_num]:
        largest_num = right_index
    if largest_num != index:
        nums[largest_num], nums[index] = nums[index], nums[largest_num]
        heap_data(nums, largest_num, heap_size)
def heap_sort(nums):
    n = len(nums)
    for i in range(n // 2 - 1, -1, -1):
        heap_data(nums, i, n)
    for i in range(n - 1, 0, -1):
        nums[0], nums[i] = nums[i], nums[0]
        heap_data(nums, 0, i)
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
heap_sort(nums)
print(nums)
",True
1333,"Write a Python program to find the maximum, minimum aggregation pair in given list of integers. ","from itertools import combinations 
def max_aggregate(l_data):
    max_pair = max(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    min_pair = min(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    return max_pair,min_pair
nums = [1,3,4,5,4,7,9,11,10,9]
print(""Original list:"")
print(nums)
result = max_aggregate(nums)
print(""\nMaximum aggregation pair of the said list of tuple pair:"")
print(result[0])
print(""\nMinimum aggregation pair of the said list of tuple pair:"")
print(result[1])
",True
1334,Write a Pandas program to split the following dataset using group by on 'salesman_id' and find the first order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5004,5003,5002,5004,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nGroupby to find first order date for each group(salesman_id):"")
result = df.groupby('salesman_id')['ord_date'].min()
print(result)
",True
1335,Write a Python program to create the largest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=True,
                      key=lambda i: i*( len(str(max(lst))) * 2 // len(i))))
    return result
nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
",True
1336,Write a NumPy program to get the index of a maximum element in a NumPy array along one axis. ,"import numpy as np    
a = np.array([[1,2,3],[4,3,1]])
print(""Original array:"")
print(a)
i,j = np.unravel_index(a.argmax(), a.shape)
print(""Index of a maximum element in a numpy array along one axis:"")
print(a[i,j])
",True
1337,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
",True
1338,Write a Python program to get the difference between the two lists. ,"list1 = [1, 3, 5, 7, 9]
list2=[1, 2, 4, 6, 7, 8]
diff_list1_list2 = list(set(list1) - set(list2))
diff_list2_list1 = list(set(list2) - set(list1))
total_diff = diff_list1_list2 + diff_list2_list1
print(total_diff)
",True
1339,"Write a NumPy program to create an array of 10 zeros,10 ones, 10 fives. ","import numpy as np
array=np.zeros(10)
print(""An array of 10 zeros:"")
print(array)
array=np.ones(10)
print(""An array of 10 ones:"")
print(array)
array=np.ones(10)*5
print(""An array of 10 fives:"")
print(array)
",True
1340,Write a Python program to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.(default value of number=2). ,"def sum_difference(n=2):
    sum_of_squares = 0
    square_of_sum = 0
    for num in range(1, n+1):
        sum_of_squares += num * num
        square_of_sum += num

    square_of_sum = square_of_sum ** 2

    return square_of_sum - sum_of_squares


print(sum_difference(12))
",True
1341,"Write a Pandas program to create a stacked histograms plot with more bins of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(30,30))
df2.hist();
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
",True
1342,Write a Python program to read a string and interpreting the string as an array of machine values. ,"from array import array
import binascii
array1 = array('i', [7, 8, 9, 10])
print('array1:', array1)
as_bytes = array1.tobytes()
print('Bytes:', binascii.hexlify(as_bytes))
array2 = array('i')
array2.frombytes(as_bytes)
print('array2:', array2)
",True
1343,"Create a 2-dimensional array of size 2 x 3, composed of 4-byte integer elements. Write a NumPy program to find the number of occurrences of a sequence in the said array. ","import numpy as np
np_array = np.array([[1, 2, 3], [2, 1, 2]], np.int32)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
print(""Sequence: 1,2"",)
result = repr(np_array).count(""1, 2"")
print(""Number of occurrences of the said sequence:"",result)
",True
1344,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find a specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""]==102901].head()
",True
1345,Write a Python program to sort a list of elements using the bubble sort algorithm. ,"def bubbleSort(nlist):
    for passnum in range(len(nlist)-1,0,-1):
        for i in range(passnum):
            if nlist[i]>nlist[i+1]:
                temp = nlist[i]
                nlist[i] = nlist[i+1]
                nlist[i+1] = temp

nlist = [14,46,43,27,57,41,45,21,70]
bubbleSort(nlist)
print(nlist)
",True
1346,"Write a NumPy program to get the floor, ceiling and truncated values of the elements of a numpy array. ","import numpy as np
x = np.array([-1.6, -1.5, -0.3, 0.1, 1.4, 1.8, 2.0])
print(""Original array:"")
print(x)
print(""Floor values of the above array elements:"")
print(np.floor(x))
print(""Ceil values of the above array elements:"")
print(np.ceil(x))
print(""Truncated values of the above array elements:"")
print(np.trunc(x))
",True
1347,Write a Python program to check whether a JSON string contains complex object or not. ,"import json
def is_complex_num(objct):
    if '__complex__' in objct:
        return complex(objct['real'], objct['img'])
    return objct

complex_object =json.loads('{""__complex__"": true, ""real"": 4, ""img"": 5}', object_hook = is_complex_num)
simple_object =json.loads('{""real"": 4, ""img"": 3}', object_hook = is_complex_num)
print(""Complex_object: "",complex_object)
print(""Without complex object: "",simple_object)
",True
1348,Write a Python program to remove the characters which have odd index values of a given string. ,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

print(odd_values_string('abcdef'))
print(odd_values_string('python'))
",True
1349,"Write a Python program to configure the rounding to round to the nearest, with ties going to the nearest even integer. Use decimal.ROUND_HALF_EVEN","import decimal
print(""Configure the rounding to round to the nearest, with ties going to the nearest even integer:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_EVEN
print(decimal.Decimal(10) / decimal.Decimal(4))
",True
1350,Write a NumPy program to generate a generic 2D Gaussian-like array. ,"import numpy as np
x, y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
d = np.sqrt(x*x+y*y)
sigma, mu = 1.0, 0.0
g = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )
print(""2D Gaussian-like array:"")
print(g)
",True
1351,Write a Python program to calculate the distance between London and New York city. ,"from geopy import distance
london = (""51.5074° N, 0.1278° W"")
newyork = (""40.7128° N, 74.0060° W"")
print(""Distance between London and New York city (in km):"")
print(distance.distance(london, newyork).km,"" kms"")
",True
1352,Write a NumPy program to create a function cube which cubes all the elements of an array. ,"import numpy as np
def cube(e):
    it = np.nditer([e, None])
    for a, b in it:
        b[...] = a*a*a
    return it.operands[1]
print(cube([1,2,3]))
",True
1353,Write a Python program to reverse words in a string. ,"def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
print(reverse_string_words(""The quick brown fox jumps over the lazy dog.""))
print(reverse_string_words(""Python Exercises.""))
",True
1354,Write a Python program to find the specified number of maximum values in a given dictionary. ,"def test(dictt, N):
    result = sorted(dictt, key=dictt.get, reverse=True)[:N]
    return result 
dictt = {'a':5, 'b':14, 'c': 32, 'd':35, 'e':24, 'f': 100, 'g':57, 'h':8, 'i': 100}
print(""\nOriginal Dictionary:"")
print(dictt)
N = 1
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 2
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 5
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
",True
1355,"Write a Python program to iterate over a root level path and print all its sub-directories and files, also loop over specified dirs and files. ","import os
print('Iterate over a root level path:')
path = '/tmp/'
for root, dirs, files in os.walk(path):
 print(root)
",True
1356,Write a Python code to remove all characters except a specified character in a given string. ,"def remove_characters(str1,c):
    return ''.join([el for el in str1 if el == c])
text = ""Python Exercises""
print(""Original string"")
print(text)
except_char = ""P""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""google""
print(""\nOriginal string"")
print(text)
except_char = ""g""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""exercises""
print(""\nOriginal string"")
print(text)
except_char = ""e""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
",True
1357,Write a Pandas program to create a Pivot table and find number of survivors and average rate grouped by gender and class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index='sex', columns='class', aggfunc={'survived':sum, 'fare':'mean'})
print(result)
",True
1358,Write a Python program to find all keys in the provided dictionary that have the given value. ,"def test(dict, val):
  return list(key for key, value in dict.items() if value == val)

students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nFind all keys in the said dictionary that have the specified value:"")
print(test(students, 20))
",True
1359,Write a NumPy program to find the closest value (to a given scalar) in an array. ,"import numpy as np
x = np.arange(100)
print(""Original array:"")
print(x)
a = np.random.uniform(0,100)
print(""Value to compare:"")
print(a)
index = (np.abs(x-a)).argmin()
print(x[index])
",True
1360,Write a Pandas program to split a string of a column of a given DataFrame into multiple columns. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['Alberto  Franco','Gino Ann Mcneill','Ryan  Parkes', 'Eesha Artur Hinton', 'Syed  Wharton'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
df[[""first"", ""middle"", ""last""]] = df[""name""].str.split("" "", expand = True)
print(""\nNew DataFrame:"")
print(df)
",True
1361,Write a Pandas program to create a Pivot table with multiple indexes from a given excel sheet (Salesdata.xlsx). ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(df)
pd.pivot_table(df,index=[""Region"",""SalesMan""])
",True
1362,"Write a Python program which iterates the integers from 1 to a given number and print ""Fizz"" for multiples of three, print ""Buzz"" for multiples of five, print ""FizzBuzz"" for multiples of both three and five using itertools module. ","
import itertools as it
 
def fizz_buzz(n):
    fizzes = it.cycle([""""] * 2 + [""Fizz""])
    buzzes = it.cycle([""""] * 4 + [""Buzz""])
    fizzes_buzzes = (fizz + buzz for fizz, buzz in zip(fizzes, buzzes))
    result = (word or n for word, n in zip(fizzes_buzzes, it.count(1)))
    for i in it.islice(result, 100):
        print(i)

n = 50
fizz_buzz(n)
",True
1363,Write a Python program to create a shallow copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary:"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.copy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (copy):"")
print(nums_copy)
",True
1364,Write a Python program access the index of a list. ,"nums = [5, 15, 35, 8, 98]
for num_index, num_val in enumerate(nums):
    print(num_index, num_val)
	",True
1365,"Write a Python program to remove sublists from a given list of lists, which contains an element outside a given range. ","
def remove_list_range(input_list, left_range, rigth_range):
   result = [i for i in input_list if (min(i)>=left_range and max(i)<=rigth_range)]
   return result
list1 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]
left_range = 13
rigth_range = 17
print(""Original list:"")
print(list1)
print(""\nAfter removing sublists from a given list of lists, which contains an element outside the given range:"")
print(remove_list_range(list1, left_range, rigth_range))
",True
1366,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",True
1367,Write a Pandas program to create a Pivot table and find survival rate by gender. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result=df.groupby('sex')[['survived']].mean()
print(result)
",True
1368,Write a Python program to calculate surface volume and area of a sphere. ,"pi=22/7
radian = float(input('Radius of sphere: '))
sur_area = 4 * pi * radian **2
volume = (4/3) * (pi * radian ** 3)
print(""Surface Area is: "", sur_area)
print(""Volume is: "", volume)
",True
1369,Write a Python program to convert all the characters in uppercase and lowercase and eliminate duplicate letters from a given sequence. Use map() function. ,"def change_cases(s):
  return str(s).upper(), str(s).lower()
 
chrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}
print(""Original Characters:\n"",chrars)
 
result = map(change_cases, chrars)
print(""\nAfter converting above characters in upper and lower cases\nand eliminating duplicate letters:"")
print(set(result))
",True
1370,Write a Python program to create a deque from an existing iterable object. ,"import collections
even_nums = (2, 4, 6)
print(""Original tuple:"")
print(even_nums)
print(type(even_nums))
even_nums_deque = collections.deque(even_nums)
print(""\nOriginal deque:"")
print(even_nums_deque)
even_nums_deque.append(8)
even_nums_deque.append(10)
even_nums_deque.append(12)
even_nums_deque.appendleft(2)
print(""New deque from an existing iterable object:"")
print(even_nums_deque)
print(type(even_nums_deque))
",True
1371,Write a Pandas program to find the index of a substring of DataFrame with beginning and end position. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c0001','1000c','b00c2', 'b2c02', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nIndex of a substring in a specified column of a dataframe:"")
df['Index'] = list(map(lambda x: x.find('c', 0, 5), df['name_code']))
print(df)
",True
1372,Write a Pandas program to check whether only space is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF ', '  ', 'abcd', ' '],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs space is present?"")
df['company_code_is_title'] = list(map(lambda x: x.isspace(), df['company_code']))
print(df)

",True
1373,"Write a NumPy program to calculate the difference between neighboring elements, element-wise of a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
print(""Difference between neighboring elements, element-wise of the said array."")
print(np.diff(x))
",True
1374,Write a Python program to count characters at same position in a given string (lower and uppercase characters) as in English alphabet. ,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars 
  
str1 = input(""Input a string: "")
print(""Number of characters of the said string at same position as in English alphabet:"")
print(count_char_position(str1))
",True
1375,Write a NumPy program to multiply the values of two given vectors. ,"import numpy as np
x = np.array([1, 8, 3, 5])
print(""Vector-1"")
print(x)
y= np.random.randint(0, 11, 4)
print(""Vector-2"")
print(y)
result = x * y
print(""Multiply the values of two said vectors:"")
print(result)
",True
1376,Write a Python program to remove duplicate words from a given string use collections module. ,"from collections import OrderedDict
text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
result = ' '.join(OrderedDict((w,w) for w in text_str.split()).keys())
print(result)
",True
1377,Write a NumPy program to test a given array element-wise for finiteness (not infinity or not a Number). ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test a given array element-wise for finiteness :"")
print(np.isfinite(a))
",True
1378,Write a NumPy program to convert a NumPy array of float values to a NumPy array of integer values. ,"import numpy as np
x= np.array([[12.0, 12.51], [2.34, 7.98], [25.23, 36.50]])
print(""Original array elements:"")
print(x)
print(""Convert float values to integer values:"")
print(x.astype(int))
",True
1379,Write a Python program to find the second most repeated word in a given string. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    counts_x = sorted(counts.items(), key=lambda kv: kv[1])
    
    return counts_x[-2]
 
print(word_count(""Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.""))
",True
1380,"Write a Python program to find the specified number of largest products from two given list, multiplying an element from each list. ","def top_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
nums1 = [1, 2, 3, 4, 5, 6]
nums2 = [3, 6, 8, 9, 10, 6]
print(""Original lists:"")
print(nums1)
print(nums2,""\n"")
N = 3
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
N = 4
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
",True
1381,Write a Pandas program to extract only non alphanumeric characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001#','[email protected]^2','$c0003', 'c0003', '&c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_nonalpha(text):
    result = re.findall(""[^A-Za-z0-9 ]"",text)
    return result
df['nonalpha']=df['company_code'].apply(lambda x: find_nonalpha(x))
print(""\Extracting only non alphanumeric characters from company_code:"")
print(df)
",True
1382,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot where each bar will represent one of the top 10 production. ,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
sorted_by_production = df.sort_values(['Production'], ascending=False).head(10)
sorted_by_production['Production'].head(10).plot(kind=""barh"")
plt.show()
",True
1383,Write a Python program to chose specified number of colours from three different colours and generate all the combinations with repetitions. ,"from itertools import combinations_with_replacement
 
def combinations_colors(l, n):
    return combinations_with_replacement(l,n)
l = [""Red"",""Green"",""Blue""]
print(""Original List: "",l)
n=1
print(""\nn = 1"")
print(list(combinations_colors(l, n)))
n=2
print(""\nn = 2"")
print(list(combinations_colors(l, n)))
n=3
print(""\nn = 3"")
print(list(combinations_colors(l, n)))
",True
1384,"Write a Python program to add two given lists of different lengths, start from left. ","def elementswise_left_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(0, len(l2), 1):
        if f_len - i >= len(l1):
            break
        else:
            l1[i] = l1[i] + l2[i]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1,nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3,nums4))
",True
1385,Write a Pandas program to draw a horizontal and cumulative histograms plot of opening stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open']]
plt.figure(figsize=(15,15))
df2.plot.hist(orientation='horizontal', cumulative=True)
plt.suptitle('Opening stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
",True
1386,Write a Python program to generate a 3*4*6 3D array whose each element is *. ,"array = [[ ['*' for col in range(6)] for col in range(4)] for row in range(3)]
print(array)
",True
1387,Write a Python program to group the elements of a given list based on the given function. ,"from collections import defaultdict
from math import floor
def test(lst, fn):
  d = defaultdict(list)
  for el in lst:
    d[fn(el)].append(el)
  return dict(d)
nums = [7,23, 3.2, 3.3, 8.4]
print(""Original list & function:"")
print(nums,"" Function name: floor:"")
print(""Group the elements of the said list based on the given function:"")
print(test(nums, floor))
print(""\n"")
print(""Original list & function:"")
colors = ['Red', 'Green', 'Black', 'White', 'Pink']
print(colors,"" Function name: len:"")
print(""Group the elements of the said list based on the given function:"")
print(test(colors, len))
",True
1388,Write a Python program to get unique values from a list. ,"my_list = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",my_list)
my_set = set(my_list)
my_new_list = list(my_set)
print(""List of unique numbers : "",my_new_list)
",True
1389,Write a Python program to access a specific item in a singly linked list using index value. ,"class Node:
    
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        
        self.tail = None
        self.head = None
        self.count = 0
	
    def append_item(self, data):
        
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data


items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Search using index:"")
print(items[0])
print(items[1])
print(items[4])
print(items[5])
print(items[10])
",True
1390,"Write a Pandas program to select random number of rows, fraction of random rows from World alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect random number of rows:"")
print(w_a_con.sample(5))
print(""\nSelect fraction of randome rows:"")
print(w_a_con.sample(frac=0.02))
",True
1391,"Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5. ","import numpy as np
x = np.diag([1, 2, 3, 4, 5])
print(x)
",True
1392,"Write a NumPy program to compute the trigonometric sine, cosine and tangent array of angles given in degrees. ","import numpy as np
print(""sine: array of angles given in degrees"")
print(np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""cosine: array of angles given in degrees"")
print(np.cos(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""tangent: array of angles given in degrees"")
print(np.tan(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
",True
1393,Write a Python program to print the names of all HTML tags of a given web page going through the document tree. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nNames of all HTML tags (https://www.python.org):\n"")
for child in soup.recursiveChildGenerator():
    if child.name:
        print(child.name)

",True
1394,Write a Python program to create a backup of a SQLite database. ,"import sqlite3
import io
conn = sqlite3.connect('mydatabase.db')
with io.open('clientes_dump.sql', 'w') as f:
   for linha in conn.iterdump():
       f.write('%s\n' % linha)
print('Backup performed successfully.')
print('Saved as mydatabase_dump.sql')
conn.close()
",True
1395,Write a Python program to find the dimension of a given matrix. ,"def matrix_dimensions(test_list):
    row = len(test_list)
    column = len(test_list[0])
    return row,column

lst = [[1,2],[2,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5],[2,3,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst)) 
",True
1396,Write a Python program to find the index position of the last occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_right   
def BinarySearch(a, x): 
    i = bisect_right(a, x) 
    if i != len(a)+1 and a[i-1] == x: 
        return (i-1) 
    else: 
        return -1 
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8
num_position   = BinarySearch(nums, x) 
if num_position == -1: 
    print(""not presetn!"") 
else: 
    print(""Last occurrence of"", x, ""is present at"", num_position)
",True
1397,Write a Python program to list home directory without absolute path. ,"import os.path
print(os.path.expanduser('~'))
",True
1398,Write a Python program to check if two given lists contain the same elements regardless of order. ,"def check_same_contents(nums1, nums2):
  for x in set(nums1 + nums2):
    if nums1.count(x) != nums2.count(x):
      return False
  return True
nums1 = [1, 2, 4]
nums2 = [2, 4, 1]
print(""Original list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 4]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
",True
1399,Write a NumPy program to insert a new axis within a 2-D array. ,"import numpy as np
x = np.zeros((3, 4))
y = np.expand_dims(x, axis=1).shape
print(y)
",True
1400,Write a Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2. ,"color_list_1 = set([""White"", ""Black"", ""Red""])
color_list_2 = set([""Red"", ""Green""])
print(""Original set elements:"")
print(color_list_1)
print(color_list_2)
print(""\nDifferenct of color_list_1 and color_list_2:"")
print(color_list_1.difference(color_list_2))
print(""\nDifferenct of color_list_2 and color_list_1:"")
print(color_list_2.difference(color_list_1))
",True
1401,Write a Python program to read last n lines of a file. ,"import sys
import os
def file_read_from_tail(fname,lines):
        bufsize = 8192
        fsize = os.stat(fname).st_size
        iter = 0
        with open(fname) as f:
                if bufsize > fsize:
                        bufsize = fsize-1
                        data = []
                        while True:
                                iter +=1
                                f.seek(fsize-bufsize*iter)
                                data.extend(f.readlines())
                                if len(data) >= lines or f.tell() == 0:
                                        print(''.join(data[-lines:]))
                                        break

file_read_from_tail('test.txt',2)
",True
1402,"Write a Pandas program to find the sum, mean, max, min value of 'Production (short tons)' column of coalpublic2013.xlsx file. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
print(""Sum: "",df[""Production""].sum()) 
print(""Mean: "",df[""Production""].mean())
print(""Maximum: "",df[""Production""].max())
print(""Minimum: "",df[""Production""].min()) 
",True
1403,"Write a Pandas program to filter rows based on row numbers ended with 0, like 0, 10, 20, 30 from world alcohol consumption dataset. ","import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter rows based on row numbers ended with 0, like 0, 10, 20, 30:"")
print(w_a_con.filter(regex='0$', axis=0))
",True
1404,Write a Pandas program to split a given dataframe into groups with bin counts. ,"import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'sales_id':[5002,5003,5004,5003,5002,5001,5005,5007,5008,5004,5005,5001]})
print(""Original DataFrame:"")
print(df)
groups = df.groupby(['customer_id', pd.cut(df.sales_id, 3)])
result = groups.size().unstack()
print(result)
",True
1405,Write a Pandas program to keep the valid entries of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the said DataFrame with valid entries:"")
result = df.dropna(inplace=False)
print(result)
",True
1406,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) Sightings year. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.year
years_data = df.ufo_yr.value_counts()
years_index = years_data.index  
years_values = years_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO Sightings by Year')
plt.xlabel(""Year"")
plt.ylabel(""Number of reports"")
years_plot = sns.barplot(x=years_index[:60],y=years_values[:60], palette = ""Reds"")
",True
1407,Write a NumPy program to remove the trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
rstripped_char = np.char.rstrip(x)
print(""\nRemove the trailing whitespaces : "", rstripped_char)
",True
1408,"Write a Python program to calculate the sum of all items of a container (tuple, list, set, dictionary). ","s = sum([10,20,30])
print(""\nSum of the container: "", s)
print()
",True
1409,Write a NumPy program to test element-wise for NaN of a given array. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for NaN:"")
print(np.isnan(a))
",True
1410,Write a NumPy program to find the index of the sliced elements as follows from a given 4x4 array. ,"import numpy as np    
x = np.reshape(np.arange(16),(4,4))
print(""Original arrays:"")
print(x)
print(""Sliced elements:"")
result = x[[0,1,2],[0,1,3]]
print(result)
",True
1411,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns with different colors. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDifferent background color:"")
coldict = {'B':'red', 'D':'yellow'}

def highlight_cols(x):
    
    df = x.copy()
    
    df.loc[:,:] = 'background-color: red'
    
    df[['B','C', 'E']] = 'background-color: grey'
    
    return df    

df.style.apply(highlight_cols, axis=None)
",True
1412,Write a NumPy program to calculate exp(x) - 1 for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\nexp(x)-1 for all elements of the said array:"")
r1 = np.expm1(x)
r2 = np.exp(x) - 1.
assert np.allclose(r1, r2)
print(r1)
",True
1413,Write a Pandas program to count of occurrence of a specified substring in a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 2 in date_of_birth column:"")
df['count'] = list(map(lambda x: x.count(""2""), df['name_code']))
print(df)
",True
1414,Write a Python program to create a file where all letters of English alphabet are listed by specified number of letters on each line. ,"import string
def letters_file_line(n):
   with open(""words1.txt"", ""w"") as f:
       alphabet = string.ascii_uppercase
       letters = [alphabet[i:i + n] + ""\n"" for i in range(0, len(alphabet), n)]
       f.writelines(letters)
letters_file_line(3)
",True
1415,Write a Python program to convert a given heterogeneous list of scalars into a string. ,"def heterogeneous_list_to_str(lst):
    result = ','.join(str(x) for x in lst)
    return result
h_data = [""Red"", 100, -50, ""green"", ""w,3,r"", 12.12, False]
print(""Original list:"")
print(h_data)
print(""\nConvert the heterogeneous list of scalars into a string:"")
print(heterogeneous_list_to_str(h_data))
",True
1416,Write a Python program to get all possible combinations of the elements of a given list. ,"def combinations_list(colors):
    if len(colors) == 0:
        return [[]]
    result = []
    for el in combinations_list(colors[1:]):
        result += [el, el+[colors[0]]]
    return result
colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said list’s elements:"")
print(combinations_list(colors))
",True
1417,Write a NumPy program to combine last element with first element of two given ndarray with different shapes. ,"import numpy as np
array1 = ['PHP','JS','C++']
array2 = ['Python','C#', 'NumPy']    
print(""Original arrays:"")          
print(array1)
print(array2)          
result  = np.r_[array1[:-1], [array1[-1]+array2[0]], array2[1:]]   
print(""\nAfter Combining:"")       
print(result)
",True
1418,Write a Python program to count most and least common characters in a given string. ,"from collections import Counter 
def max_least_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    min_char = min(temp, key = temp.get)
    return (max_char, min_char)

str1 = ""hello world""
print (""Original string: "")
print(str1)
result = max_least_char(str1)
print(""\nMost common character of the said string:"",result[0])
print(""Least common character of the said string:"",result[1])
",True
1419,Write a Python program using Sieve of Eratosthenes method for computing primes upto a specified number. ,"def prime_eratosthenes(n):
    prime_list = []
    for i in range(2, n+1):
        if i not in prime_list:
            print (i)
            for j in range(i*i, n+1, i):
                prime_list.append(j)

print(prime_eratosthenes(100));
",True
1420,Write a NumPy program to convert the raw data in an array to a binary string and then create an array. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
s = x.tostring()
print(""Binary string array:"")
print(s)
print(""Array using fromstring():"")
y = np.fromstring(s)
print(y)
",True
1421,Write a Python program to remove spaces from dictionary keys. ,"student_list = {'S  001': ['Math', 'Science'], 'S    002': ['Math', 'English']}
print(""Original dictionary: "",student_list)
student_dict = {x.translate({32: None}): y for x, y in student_list.items()}
print(""New dictionary: "",student_dict)
",True
1422,Write a Python program to sort unsorted numbers using Multi-key quicksort. ,"
def quick_sort_3partition(sorting: list, left: int, right: int) -> None:
    if right <= left:
        return
    a = i = left
    b = right
    pivot = sorting[left]
    while i <= b:
        if sorting[i] < pivot:
            sorting[a], sorting[i] = sorting[i], sorting[a]
            a += 1
            i += 1
        elif sorting[i] > pivot:
            sorting[b], sorting[i] = sorting[i], sorting[b]
            b -= 1
        else:
            i += 1
    quick_sort_3partition(sorting, left, a - 1)
    quick_sort_3partition(sorting, b + 1, right)
def three_way_radix_quicksort(sorting: list) -> list:
    if len(sorting) <= 1:
        return sorting
    return (
        three_way_radix_quicksort([i for i in sorting if i < sorting[0]])
        + [i for i in sorting if i == sorting[0]]
        + three_way_radix_quicksort([i for i in sorting if i > sorting[0]])
    )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0,  len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 1,  len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 2,  len(nums)-1)
print(nums) 
",True
1423,Write a Python program to returns sum of all divisors of a number. ,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)
print(sum_div(8))
print(sum_div(12))
",True
1424,Write a Pandas program to plot the volatility over a period of time of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Close']]
df3 = df2.set_index('Date')
data_filled = df3.asfreq('D', method='ffill')
data_returns = data_filled.pct_change()
data_std = data_returns.rolling(window=30, min_periods=30).std()
plt.figure(figsize=(20,20))
data_std.plot();
plt.suptitle('Volatility over a period of time  of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
",True
1425,Write a Python program to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))

n_list = 'aabcddddadnss'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said string:"")
print(modified_encode(n_list))

",True
1426,Write a NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last. ,"import numpy as np
v = np.arange(15,55)
print(""Original vector:"")
print(v)
print(""All values except the first and last of the said vector:"")
print(v[1:-1])
",True
1427,Write a Python program to flatten a shallow list. ,"import itertools
original_list = [[2,4,3],[1,5,6], [9], [7,9,0]]
new_merged_list = list(itertools.chain(*original_list))
print(new_merged_list)
",True
1428,Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5. ,"def test_number5(x, y):
   if x == y or abs(x-y) == 5 or (x+y) == 5:
       return True
   else:
       return False
print(test_number5(7, 2))
print(test_number5(3, 2))
print(test_number5(2, 2))
print(test_number5(7, 3))
print(test_number5(27, 53))
",True
1429,Write a Python program to find the common tuples between two given lists. ,"def test(list1, list2):
    result =  set(list1).intersection(list2)
    return list(result)
list1 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2)) 
list1 =  [('red', 'green'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2))
",True
1430,Write a Python program to change a given string to a new string where the first and last chars have been exchanged. ,"def change_sring(str1):
      return str1[-1:] + str1[1:-1] + str1[:1]
	  
print(change_sring('abcd'))
print(change_sring('12345'))
",True
1431,Write a Python program to convert a given list of dictionaries into a list of values corresponding to the specified key. ,"def pluck(lst, key):
  return [x.get(key) for x in lst]
 
simpsons = [
  { 'name': 'Areeba', 'age': 8 },
  { 'name': 'Zachariah', 'age': 36 },
  { 'name': 'Caspar', 'age': 34 },
  { 'name': 'Presley', 'age': 10 }
]
print(pluck(simpsons, 'age'))
",True
1432,Write a Pandas program to create a time series combining hour and minute. ,"import pandas as pd
result = pd.timedelta_range(0, periods=30, freq=""1H20T"")
print(""For a frequency of 1 hours 20 minutes, here we have combined the hour (H) and minute (T):\n"")
print(result)
",True
1433,Write a Python program to format a number with a percentage. ,"x = 0.25
y = -0.25
print(""\nOriginal Number: "", x)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(y));
print()
",True
1434,Write a Python program to generate combinations of a given length of given iterable. ,"import itertools as it
def combinations_data(iter, length):
    return it.combinations(iter, length)

result = combinations_data(['A','B','C','D'], 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)


result = combinations_data(""Python"", 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)
    

result = combinations_data(['A','B','C','D'], 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)


result = combinations_data(""Python"", 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)
",True
1435,Write a Pandas program to find the index of a given substring of a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 22 in date_of_birth column:"")
df['Index'] = list(map(lambda x: x.find('22'), df['name_code']))
print(df)
",True
1436,Write a NumPy program to get the block-sum (block size is 5x5) from a given array of shape 25x25. ,"import numpy as np
arra1 = np.ones((25,25))
k = 5
print(""Original arrays:"")
print(arra1)
result = np.add.reduceat(np.add.reduceat(arra1, np.arange(0, arra1.shape[0], k), axis=0),
                                      np.arange(0, arra1.shape[1], k), axis=1)
print(""\nBlock-sum (5x5) of the said array:"")
print(result)
",True
1437,Write a Python program to get the length of an array. ,"from array import array
num_array = array('i', [10,20,30,40,50])
print(""Length of the array is:"")
print(len(num_array))
",True
1438,Write a NumPy program to get the magnitude of a vector in NumPy. ,"import numpy as np
x = np.array([1,2,3,4,5])
print(""Original array:"")
print(x)
print(""Magnitude of the vector:"")
print(np.linalg.norm(x))
",True
1439,Write a Python program to remove words from a given list of strings containing a character or string. ,"def remove_words(in_list, char_list):
    new_list = []
    for line in in_list:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])
        new_list.append(new_words)
    return new_list
     
str_list = ['Red color', 'Orange#', 'Green', 'Orange @', ""White""]
print(""Original list:"")
print(""list1:"",str_list)
char_list = ['#', 'color', '@']
print(""\nCharacter list:"")
print(char_list)
print(""\nNew list:"")
print(remove_words(str_list, char_list))
",True
1440,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group, also change the column name of the aggregated metric. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print('\nChange the name of an aggregated metric:')
grouped_single = df.groupby('school_code').agg({'age': [(""mean_age"",""mean""), (""min_age"", ""min""), (""max_age"",""max"")]})
print(grouped_single)
",True
1441,Write a Python program to check a list is empty or not. ,"l = []
if not l:
  print(""List is empty"")
  ",True
1442,Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
x= ['Close']; y = ['Volume']
plt.figure(figsize=[15,10])
df2.plot.scatter(x, y, s=50);
plt.grid(True)
plt.title('Trading Volume/Price of Alphabet Inc. stock,\n01-04-2020 to 30-09-2020', fontsize=14, color='black')
plt.xlabel(""Stock Price"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
plt.show()
",True
1443,Write a Python program to calculate magic square. ,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    
    
    sum_list.extend([sum (lines) for lines in my_matrix])   

    
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    
    
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)  
    
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)

    if len(set(sum_list))>1:
        return False
    return True

m=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] 
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]
print(magic_square_test(m));
",True
1444,Write a Python program to append a list to the second list. ,"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
",True
1445,Write a NumPy program to find the real and imaginary parts of an array of complex numbers. ,"import numpy as np
x = np.sqrt([1+0j])
y = np.sqrt([0+1j])
print(""Original array:x "",x)
print(""Original array:y "",y)
print(""Real part of the array:"")
print(x.real)
print(y.real)
print(""Imaginary part of the array:"")
print(x.imag)
print(y.imag)
",True
1446,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
",True
1447,Write a NumPy program to create a new shape to an array without changing its data. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
y = np.reshape(x,(3,2))
print(""Reshape 3x2:"")
print(y)
z = np.reshape(x,(2,3))
print(""Reshape 2x3:"")
print(z)
",True
1448,Write a Python program to find the location address of a specified latitude and longitude using Nominatim API and Geopy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
lald = ""47.470706, -99.704723""
print(""Latitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""34.05728435, -117.194132331602""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""38.8976998, -77.0365534886228""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""55.7558° N, 37.6173° E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""35.6762° N, 139.6503° E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""41.9185° N, 45.4777° E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
",True
1449,Write a Python program to flatten a given nested list structure. ,"def flatten_list(n_list):
    result_list = []
    if not n_list: return result_list
    stack = [list(n_list)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list 
n_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
print(""Original list:"") 
print(n_list)
print(""\nFlatten list:"")
print(flatten_list(n_list))
",True
1450,Write a Python program to extract the text in the first paragraph tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""The text in the first paragraph tag:"")
print(soup.find_all('p')[0].text)

",True
1451,Write a Python program to get the index of the first element which is greater than a specified element. ,"def first_index(l1, n):
    return next(a[0] for a in enumerate(l1) if a[1] > n)
 
nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
",True
1452,rite a Python program that accepts a string and calculate the number of digits and letters. ,"s = input(""Input a string"")
d=l=0
for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
print(""Letters"", l)
print(""Digits"", d)
",True
1453,"Write a NumPy program to create an array of (3, 4) shape, multiply every element value by 3 and display the new array. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
for a in np.nditer(x, op_flags=['readwrite']):
    a[...] = 3 * a
print(""New array elements:"")
print(x)
",True
1454,Write a NumPy program to convert the values of Centigrade degrees into Fahrenheit degrees. Centigrade values are stored into a NumPy array. ,"import numpy as np
fvalues = [0, 12, 45.21, 34, 99.91]
F = np.array(fvalues)
print(""Values in Fahrenheit degrees:"")
print(F)
print(""Values in  Centigrade degrees:"") 
print(5*F/9 - 5*32/9)
",True
1455,Write a NumPy program to compute the weighted of a given array. ,"import numpy as np
x = np.arange(5)
print(""\nOriginal array:"")
print(x)
weights = np.arange(1, 6)
r1 = np.average(x, weights=weights)
r2 = (x*(weights/weights.sum())).sum()
assert np.allclose(r1, r2)
print(""\nWeighted average of the said array:"")
print(r1)
",True
1456,Write a NumPy program to compute the Kronecker product of two given mulitdimension arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.kron(a, b)
print(""Kronecker product of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.kron(x, y)
print(""Kronecker product  of the said arrays:"")
print(result)
",True
1457,Write a Python program to sort a given list of strings(numbers) numerically. ,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
",True
1458,Write a Python program to compute the difference between two lists. ,"from collections import Counter
color1 = [""red"", ""orange"", ""green"", ""blue"", ""white""]
color2 = [""black"", ""yellow"", ""green"", ""blue""]
counter1 = Counter(color1)
counter2 = Counter(color2)
print(""Color1-Color2: "",list(counter1 - counter2))
print(""Color2-Color1: "",list(counter2 - counter1))
",True
1459,"Write a NumPy program to replace all numbers in a given array which is equal, less and greater to a given number. ","import numpy as np
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 8.32
r = 18.32
print(""\nReplace elements of the said array which are equal to "",n,""with"",r)
print(np.where(nums == n, r, nums))
print(""\nReplace elements with of the said array which are less than"",n,""with"",r)
print(np.where(nums < n, r, nums))
print(""\nReplace elements with of the said array which are greater than"",n,""with"",r)
print(np.where(nums > n, r, nums))
",True
1460,"Write a Python program to split values into two groups, based on the result of the given filtering function. ","def bifurcate_by(lst, fn):
  return [
    [x for x in lst if fn(x)],
    [x for x in lst if not fn(x)]
  ]
print(bifurcate_by(['red', 'green', 'black', 'white'], lambda x: x[0] == 'w'))
",True
1461,Write a Pandas program to create a Pivot table and check missing values of children. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.loc[df['who']=='child'].isnull().sum()
print(result)
",True
1462,Write a Python program to sort a list of nested dictionaries. ,"my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
print(""Original List: "")
print(my_list)
my_list.sort(key=lambda e: e['key']['subkey'], reverse=True)
print(""Sorted List: "")
print(my_list)
",True
1463,Write a NumPy program to get the unique elements of an array. ,"import numpy as np
x = np.array([10, 10, 20, 20, 30, 30])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
x = np.array([[1, 1], [2, 3]])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
",True
1464,Write a Python program to extract a specified column from a given nested list. ,"def remove_column(nums, n):
   result = [i.pop(n) for i in nums]
   return result 

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""Extract 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""Extract 3rd column:"")
print(remove_column(list2, n))
",True
1465,Write a Python program to print the following floating numbers with no decimal places. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(y));
print()
",True
1466,"Write a Python program to get the key, value and item in a dictionary. ","dict_num = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}
print(""key  value  count"")
for count, (key, value) in enumerate(dict_num.items(), 1):
    print(key,'   ',value,'    ', count)
",True
1467,Write a NumPy program to create an array with values ranging from 12 to 38.,"import numpy as np
x = np.arange(12, 38)
print(x)
",True
1468,Write a Pandas program to create a Pivot table and separate the gender according to whether they traveled alone or not to get the probability of survival. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table( 'survived' , [ 'sex' , 'alone' ] , 'class' )
print(result)
",True
1469,Write a Python program to convert a given list of strings into list of lists using map function. ,"def strings_to_listOflists(str):
    result = map(list, str)
    return list(result)

colors = [""Red"", ""Green"", ""Black"", ""Orange""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
",True
1470,"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. ","def chars_mix_up(a, b):
  new_a = b[:2] + a[2:]
  new_b = a[:2] + b[2:]

  return new_a + ' ' + new_b
print(chars_mix_up('abc', 'xyz'))
",True
1471,"Write a Pandas program to get the day of month, day of year, week number and day of week from a given series of date strings. ","import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
date_series = date_series.map(lambda x: parse(x))
print(""Day of month:"")
print(date_series.dt.day.tolist())
print(""Day of year:"")
print(date_series.dt.dayofyear.tolist())
print(""Week number:"")
print(date_series.dt.weekofyear.tolist())
print(""Day of week:"")
print(date_series.dt.weekday_name.tolist())
",True
1472,Write a Python program to sort a given collection of numbers and its length in ascending order using Recursive Insertion Sort. ,"
from __future__ import annotations

def rec_insertion_sort(collection: list, n: int):
    
    if len(collection) <= 1 or n <= 1:
        return
    insert_next(collection, n - 1)
    rec_insertion_sort(collection, n - 1)
def insert_next(collection: list, index: int):
    
    if index >= len(collection) or collection[index - 1] <= collection[index]:
        return
    
    collection[index - 1], collection[index] = (
        collection[index],
        collection[index - 1],
    )
    insert_next(collection, index + 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
",True
1473,"Write a NumPy program to create a 11x3 array filled with student information (id, class and name) and shuffle the said array rows starting from 3","import numpy as np
np.random.seed(42) 
student = np.array([['stident_id', 'Class', 'Name'],
              ['01', 'V', 'Debby Pramod'],
              ['02', 'V', 'Artemiy Ellie'],
              ['03', 'V', 'Baptist Kamal'],
              ['04', 'V', 'Lavanya Davide'],
              ['05', 'V', 'Fulton Antwan'],
              ['06', 'V', 'Euanthe Sandeep'],
              ['07', 'V', 'Endzela Sanda'],
              ['08', 'V', 'Victoire Waman'],
              ['09', 'V', 'Briar Nur'],
              ['10', 'V', 'Rose Lykos']]) 
print(""Original array:"")
print(student)
np.random.shuffle(student[2:8])
print(""Shuffle the said array rows starting from 3rd to 9th"")
print(student)
",True
1474,Write a Pandas program to get all the sighting years of the unidentified flying object (ufo) and create the year as column. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting years of the unidentified flying object:"")
df[""Year""] = df.Date_time.dt.year
print(df.head(10))
",True
1475,Write a Python program to remove a key from a dictionary. ,"myDict = {'a':1,'b':2,'c':3,'d':4}
print(myDict)
if 'a' in myDict: 
    del myDict['a']
print(myDict)
",True
1476,Write a Python program to find the occurrences of 10 most common words in a given text. ,"from collections import Counter
import re
text = """"""The Python Software Foundation (PSF) is a 501(c)(3) non-profit 
corporation that holds the intellectual property rights behind
the Python programming language. We manage the open source licensing 
for Python version 2.1 and later and own and protect the trademarks 
associated with Python. We also run the North American PyCon conference 
annually, support other Python conferences around the world, and 
fund Python related development with our grants program and by funding 
special projects.""""""
words = re.findall('\w+',text)
print(Counter(words).most_common(10))
",True
1477,"Write a Python function to get the city, state and country name of a specified latitude and longitude using Nominatim API and Geopy package. ","from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
def city_state_country(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address']
    city = address.get('city', '')
    state = address.get('state', '')
    country = address.get('country', '')
    return city, state, country
print(city_state_country(""47.470706, -99.704723""))
",True
1478,Write a Pandas program to create a period index represent all monthly boundaries of a given year. Also print start and end time for each period object in the said index. ,"import pandas as pd
import datetime
from datetime import datetime, date
sdt = datetime(2020, 1, 1)
edt = datetime(2020, 12, 31)
dateset = pd.period_range(sdt, edt, freq='M')
print(""All monthly boundaries of a given year:"")
print(dateset) 
print(""\nStart and end time for each period object in the said index:"")
for d in dateset: 
    print (""{0} {1}"".format(d.start_time, d.end_time)) 
",True
1479,Write a Python program to create a new list taking specific elements from a tuple and convert a string value to integer. ,"student_data  = [('Alberto Franco','15/05/2002','35kg'), ('Gino Mcneill','17/05/2002','37kg'), ('Ryan Parkes','16/02/1999', '39kg'), ('Eesha Hinton','25/09/1998', '35kg')]
print(""Original data:"")
print(student_data)
students_data_name = list(map(lambda x:x[0], student_data))
students_data_dob = list(map(lambda x:x[1], student_data))
students_data_weight = list(map(lambda x:int(x[2][:-2]), student_data))
print(""\nStudent name:"")
print(students_data_name)
print(""Student name:"")
print(students_data_dob)
print(""Student weight:"")
print(students_data_weight)
",True
1480,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
",True
1481,Write a NumPy program to compute the line graph of a set of data. ,"import numpy as np    
import matplotlib.pyplot as plt
arr = np.random.randint(1, 50, 10)
y, x = np.histogram(arr, bins=np.arange(51))
fig, ax = plt.subplots()
ax.plot(x[:-1], y)
fig.show()
",True
1482,Write a Python program to remove lowercase substrings from a given string. ,"import re
str1 = 'KDeoALOklOOHserfLoAJSIskdsf'
print(""Original string:"")
print(str1)
print(""After removing lowercase letters, above string becomes:"")
remove_lower = lambda text: re.sub('[a-z]', '', text)
result =  remove_lower(str1)
print(result)
",True
1483,Write a Python program to count occurrences of a substring in a string. ,"str1 = 'The quick brown fox jumps over the lazy dog.'
print()
print(str1.count(""fox""))
print()
",True
1484,Write a Python program that reads each row of a given csv file and skip the header of the file. Also print the number of rows and the field names. ,"import csv
fields = []
rows = []
with open('departments.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ', quotechar=',')
 
 fields = next(data)
 for row in data:
   print(', '.join(row))
print(""\nTotal no. of rows: %d""%(data.line_num))
print('Field names are:')
print(', '.join(field for field in fields))
",True
1485,Write a Pandas program to set value in a specific cell in a given dataframe using index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nSet school code 's004' to 's005':"")
df.at['t6', 'school_code'] = 's005'
print(df)
print(""\nSet date_of_birth of 'Alberto Franco' to '16/05/2002':"")
df.at['t1', 'date_of_birth'] = '16/05/2002'
print(df)
",True
1486, Write a Python program to check whether a page contains a title or not. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://www.wikipedia.org/')
bs = BeautifulSoup(html, ""html.parser"")
nameList = bs.findAll('a', {'class' : 'link-box'})
for name in nameList:
  print(name.get_text())
  ",True
1487,Write a Pandas program to generate sequences of fixed-frequency dates and time spans. ,"import pandas as pd
dtr = pd.date_range('2018-01-01', periods=12, freq='H')
print(""Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='min')
print(""\nMinutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='S')
print(""\nSecondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2H')
print(""nMultiple Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='5min')
print(""\nMultiple Minutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='BQ')
print(""\nMultiple Secondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='w')
print(""\nWeekly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2h20min')
print(""\nCombine together day and intraday offsets-1:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='1D10U')
print(""\nCombine together day and intraday offsets-2:"")
print(dtr)
",True
1488,Write a Python program to sum of all counts in a collections.,"import collections
num = [2,2,4,6,6,8,6,10,4]
print(sum(collections.Counter(num).values()))
",True
1489,Write a Python program to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found'. ,"def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found'
print(find_Index(""Python Exercises"", ""Ex""))
print(find_Index(""Python Exercises"", ""yt""))
print(find_Index(""Python Exercises"", ""PY""))
",True
1490,Write a Pandas program to import three datasheets from a given excel data (employee.xlsx ) into a single dataframe and export the result into new Excel file. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
df.to_excel('e:\output.xlsx', index=False)
",True
1491,"Write a Python program that accept name of given subject and marks. Input number of subjects in first line and subject name,marks separated by a space in next line. Print subject name and marks in order of its first occurrence. ","import collections, re
n = int(input(""Number of subjects: ""))
item_order = collections.OrderedDict()
for i in range(n):
   sub_marks_list = re.split(r'(\d+)$',input(""Input Subject name and marks: "").strip())
   subject_name = sub_marks_list[0]
   item_price = int(sub_marks_list[1])
   if subject_name not in item_order:
       item_order[subject_name]=item_price
   else:
       item_order[subject_name]=item_order[subject_name]+item_price
           
for i in item_order:
   print(i+str(item_order[i]))
",True
1492,Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. ,"def match_words(words):
  ctr = 0

  for word in words:
    if len(word) > 1 and word[0] == word[-1]:
      ctr += 1
  return ctr

print(match_words(['abc', 'xyz', 'aba', '1221']))
",True
1493,Write a Pandas program to find the positions of the values neighboured by smaller values on both sides in a given series. ,"import pandas as pd
import numpy as np
nums = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(nums)
print(""\nPositions of the values surrounded by smaller values on both sides:"")
temp = np.diff(np.sign(np.diff(nums)))
result = np.where(temp == -2)[0] + 1
print(result)
",True
1494,Write a Python program to print the following integers with '*' on the right of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(right padding, width 2): ""+""{:*< 3d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(right padding, width 6): ""+""{:*< 7d}"".format(y));
print()
",True
1495,Write a NumPy program to convert an array to a float type. ,"import numpy as np
import numpy as np
a = [1, 2, 3, 4]
print(""Original array"")
print(a)
x = np.asfarray(a)
print(""Array converted to a float type:"")
print(x)
",True
1496,Write a Python program to count the same pair in two given lists. use map() function. ,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result

nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nNumber of same pair of the said two given lists:"")
print(count_same_pair(nums1, nums2))
",True
1497,Write a Python program to find unique triplets whose three elements gives the sum of zero from an array of n integers. ,"def three_sum(nums):
  result = []
  nums.sort()
  for i in range(len(nums)-2):
    if i> 0 and nums[i] == nums[i-1]:
      continue
    l, r = i+1, len(nums)-1
    while l < r:
      s = nums[i] + nums[l] + nums[r]
      if s > 0:
        r -= 1
      elif s < 0:
          l += 1
      else:
        
        result.append((nums[i], nums[l], nums[r]))
        
        while l < r and nums[l] == nums[l+1]:
          l+=1
          while l < r and nums[r] == nums[r-1]:
            r -= 1
            l += 1
            r -= 1
          return result

x = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]
print(three_sum(x))
",True
1498,Write a Python program to write (without writing separate lines between rows) and read a CSV file with specified delimiter. Use csv.reader,"import csv     
fw = open(""test.csv"", ""w"", newline='')
writer = csv.writer(fw, delimiter = "","")
writer.writerow([""a"",""b"",""c""])
writer.writerow([""d"",""e"",""f""])
writer.writerow([""g"",""h"",""i""])
fw.close()
 
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
",True
1499,"Write a Python program to make an iterator that drops elements from the iterable as long as the elements are negative; afterwards, returns every element. ","import itertools as it
def drop_while(nums):
    return it.takewhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))

def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))
",True
1500,Write a Pandas program to create a hitmap for more information about the distribution of missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
plt.figure(figsize=(16,10))
sns.heatmap(df.isnull(), cbar=False, cmap=""YlGnBu"")
plt.show()
",True
1501,Write a Pandas program to create a combination from two dataframes where a column id combination appears more than once in both dataframes.,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (many-to-many join case):"")
result = pd.merge(data1, data2, on='key1')
print(result)
",True
1502,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
",True
1503,Write a Python program to move all spaces to the front of a given string in single traversal. ,"def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    
    result = ' '*space    
    return result + ''.join(no_spaces)
  
s1 = ""Python Exercises""
print(""Original String:\n"",s1)

print(""\nAfter moving all spaces to the front:"")
print(moveSpaces(s1))
",True
1504,Write a Python program to check if all the elements of a list are included in another given list. ,"def test_includes_all(nums, lsts):
  for x in lsts:
    if x not in nums:
      return False
  return True
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))
",True
1505,"Write a NumPy program to create a 3x3 identity matrix, i.e. diagonal elements are 1, the rest are 0. ","import numpy as np
x = np.eye(3)
print(x)
",True
1506,Write a Python program to create a 3X3 grid with numbers. ,"nums = []
for i in range(3):
    nums.append([])
    for j in range(1, 4):
        nums[i].append(j)
print(""3X3 grid with numbers:"")
print(nums)
",True
1507,Write a Python program that sum the length of the names of a given list of names after removing the names that starts with an lowercase letter. Use lambda function. ,"sample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']
sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
print(""Result:"")
print(len(''.join(sample_names)))
",True
1508,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
",True
1509,"Write a Pandas program to create a histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]

plt.figure(figsize=(25,25))
df2.plot.hist(alpha=0.5)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
",True
1510, Write a Python program to list all language names and number of related articles in the order they appear in wikipedia.org. ,"

import requests
url = 'https://analytics.usa.gov/data/live/realtime.json'
j = requests.get(url).json()
print(""Number of people visiting a U.S. government website-"")
print(""Active Users Right Now:"")
print(j['data'][0]['active_visitors'])
  ",True
1511,"Write a NumPy program to count the number of dimensions, number of elements and number of bytes for each element in a given array. ","import numpy as np    
print(""\nOriginal arrays:"")
x = np.array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])
print(x)
print(""\nNumber of dimensions:"")
print(x.ndim)
print(""Number of elements:"")
print(x.size)
print(""Number of bytes for each element in the said array:"")
print(x.itemsize) 
",True
1512,Write a Pandas program to find the all the business quarterly begin and end dates of a specified year. ,"import pandas as pd
q_start_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQS-JUN')
q_end_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQ-JUN')
print(""All the business quarterly begin dates of 2020:"")
print(q_start_dates.values)
print(""\nAll the business quarterly end dates of 2020:"")
print(q_end_dates.values)
",True
1513,Write a Python program to replace dictionary values with their average. ,"def sum_math_v_vi_average(list_of_dicts):
    for d in list_of_dicts:
        n1 = d.pop('V')
        n2 = d.pop('VI')
        d['V+VI'] = (n1 + n2)/2
    return list_of_dicts 
student_details= [
  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},
  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},
  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}
]
print(sum_math_v_vi_average(student_details))
",True
1514,"Write a Python program to convert string values of a given dictionary, into integer/float datatypes. ","def convert_to_int(lst):
    result = [dict([a, int(x)] for a, x in b.items()) for b in lst]
    return result

def convert_to_float(lst):
    result = [dict([a, float(x)] for a, x in b.items()) for b in lst]
    return result

nums =[{ 'x':'10' , 'y':'20' , 'z':'30' }, { 'p':'40', 'q':'50', 'r':'60'}]
print(""Original list:"")
print(nums)
print(""\nString values of a given dictionary, into integer types:"")
print(convert_to_int(nums))
nums =[{ 'x':'10.12', 'y':'20.23', 'z':'30'}, { 'p':'40.00', 'q':'50.19', 'r':'60.99'}]
print(""\nOriginal list:"")
print(nums)
print(""\nString values of a given dictionary, into float types:"")
print(convert_to_float(nums))
",True
1515,Write a Python program to remove specific words from a given list. ,"def remove_words(list1, remove_words):
    for word in list(list1):
        if word in remove_words:
            list1.remove(word)
    return list1        
colors = ['red', 'green', 'blue', 'white', 'black', 'orange']
remove_colors = ['white', 'orange']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
",True
1516,"Write a NumPy program to test equal, not equal, greater equal, greater and less test of all the elements of two given arrays. ","import numpy as np
x1 = np.array(['Hello', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
x2 = np.array(['Hello', 'php', 'Java', 'examples', 'html'], dtype=np.str)
print(""\nArray1:"")
print(x1)
print(""Array2:"")
print(x2)
print(""\nEqual test:"")
r = np.char.equal(x1, x2)
print(r)
print(""\nNot equal test:"")
r = np.char.not_equal(x1, x2)
print(r)
print(""\nLess equal test:"")
r = np.char.less_equal(x1, x2)
print(r)
print(""\nGreater equal test:"")
r = np.char.greater_equal(x1, x2)
print(r)
print(""\nLess test:"")
r = np.char.less(x1, x2)
print(r)
",True
1517,Write a Python program to reverse each list in a given list of lists. ,"def reverse_list_lists(nums):
    for l in nums:
        l.sort(reverse = True)
    return nums    
nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(""Original list of lists:"")
print(nums)
print(""\nReverse each list in the said list of lists:"")
print(reverse_list_lists(nums))
",True
1518,Write a Pandas program to compute the autocorrelations of a given numeric series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.arange(15) + np.random.normal(1, 10, 15))
print(""Original series:"")
print(num_series)
autocorrelations = [num_series.autocorr(i).round(2) for i in range(11)]
print(""\nAutocorrelations of the said series:"")
print(autocorrelations[1:])
",True
1519,Write a NumPy program to split the element of a given array to multiple lines. ,"import numpy as np
x = np.array(['Python\Exercises, Practice, Solution'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.splitlines(x)
print(r)
",True
1520,Write a Python program to find the text of the first <a> tag of a given html text. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Text of the first <a> tag:"")
print(soup.find('a').text)

",True
1521,Write a Python program to combine two dictionary adding values for common keys. ,"from collections import Counter
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
d = Counter(d1) + Counter(d2)
print(d)
",True
1522,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and to sort the records by the hire_date column. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values('hire_date')
result
",True
1523,Write a NumPy program to create a one dimensional array of forty pseudo-randomly generated values. Select random numbers from a uniform distribution between 0 and 1. ,"import numpy as np  
np.random.seed(10)
print(np.random.rand(40))
",True
1524,Write a NumPy program to convert numpy dtypes to native python types. ,"import numpy as np
print(""numpy.float32 to python float"")
x = np.float32(0)
print(type(x))
pyval = x.item()
print(type(pyval))
",True
1525,Write a Python program to get the every nth element in a given list. ,"def every_nth(nums, nth):
  return nums[nth - 1::nth]
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))
",True
1526,Write a NumPy program to find the number of weekdays in March 2017. ,"import numpy as np
print(""Number of weekdays in March 2017:"")
print(np.busday_count('2017-03', '2017-04'))
",True
1527,Write a Python program to sort a given mixed list of integers and strings. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
",True
1528,Write a Python program to reverse a string. ,"def reverse_string(str1):
    return ''.join(reversed(str1))
print()
print(reverse_string(""abcdef""))
print(reverse_string(""Python Exercises.""))
print()
",True
1529,Write a Python program to insert an element before each element of a list. ,"color = ['Red', 'Green', 'Black']
print(""Original List: "",color)
color = [v for elt in color for v in ('c', elt)]
print(""Original List: "",color)
",True
1530,Write a NumPy program to get the row numbers in given array where at least one item is larger than a specified value. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = np.where(np.any(arr1>10, axis=1))
print(""\nRow numbers where at least one item is larger than 10:"")
print(result)
",True
1531,Write a NumPy program to get the indices of the sorted elements of a given array. ,"import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
print(""Original array:"")
print(student_id)
i = np.argsort(student_id)
print(""Indices of the sorted elements of a given array:"")
print(i)
",True
1532,Write a Python program to remove all strings from a given list of tuples. ,"def test(list1):
    result =   [tuple(v for v in i if not isinstance(v, str)) for i in list1]
    return list(result)

marks = [(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
print(""\nOriginal list:"")
print(marks)
print(""\nRemove all strings from the said list of tuples:"")
print(test(marks))
",True
1533,Write a Python program to sort Counter by value. ,"from collections import Counter
x = Counter({'Math':81, 'Physics':83, 'Chemistry':87})
print(x.most_common())
",True
1534,Write a Python program to remove the parenthesis area in a string. ,"import re
items = [""example (.com)"", ""w3resource"", ""github (.com)"", ""stackoverflow (.com)""]
for item in items:
    print(re.sub(r"" ?\([^)]+\)"", """", item))
	",True
1535,Write a NumPy program to compute the median of flattened given array. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 =  np.median(x)
print(""\nMedian of said array:"")
print(r1)
",True
1536,Write a Python program to convert a given Bytearray to Hexadecimal string. ,"def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)

list_val = [111, 12, 45, 67, 109] 
print(""Original Bytearray :"")
print(list_val)
print(""\nHexadecimal string:"")
print(bytearray_to_hexadecimal(list_val))
",True
1537,Write a Python program to calculate the maximum and minimum sum of a sublist in a given list of lists. ,"def max_min_sublist(lst):
    max_result = (max(lst, key=sum))
    min_result = (min(lst, key=sum))
    return max_result,min_result

nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
result = max_min_sublist(nums)
print(""\nMaximum sum of sub list of the said list of lists:"")
print(result[0])
print(""\nMinimum sum of sub list of the said list of lists:"")
print(result[1])
",True
1538,"Write a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20. ","def sum(x, y):
    sum = x + y
    if sum in range(15, 20):
        return 20
    else:
        return sum

print(sum(10, 6))
print(sum(10, 2))
print(sum(10, 12))
",True
1539,Write a Python program to convert a given decimal number to binary list. ,"def decimal_to_binary_list(n):
    result = [int(x) for x in list('{0:0b}'.format(n))]
    return result
n = 8
print(""Original Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 45
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 100
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
",True
1540,Write a Pandas program to compare the elements of the two Pandas Series. ,"import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 10])
print(""Series1:"")
print(ds1)
print(""Series2:"")
print(ds2)
print(""Compare the elements of the said Series:"")
print(""Equals:"")
print(ds1 == ds2)
print(""Greater than:"")
print(ds1 > ds2)
print(""Less than:"")
print(ds1 < ds2)
",True
1541,Write a NumPy program to calculate the Frobenius norm and the condition number of a given array. ,"import numpy as np
a = np.arange(1, 10).reshape((3, 3))
print(""Original array:"")
print(a)
print(""Frobenius norm and the condition number:"")
print(np.linalg.norm(a, 'fro'))
print(np.linalg.cond(a, 'fro'))
",True
1542,Write a Python program to generate all possible permutations of n different objects. ,"import itertools
def permutations_all(l):
    for values in itertools.permutations(l):
        print(values)

permutations_all([1])
print(""\n"")
permutations_all([1,2])
print(""\n"")
permutations_all([1,2,3])
",True
1543,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
",True
1544,Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range from 9 to 15. ,"import numpy as np
x = np.arange(21)
print(""Original vector:"")
print(x)
print(""After changing the sign of the numbers in the range from 9 to 15:"")
x[(x >= 9) & (x <= 15)] *= -1
print(x)
",True
1545,Write a NumPy program to create an array using scientific notation numbers. Set the precision value to 6 and print the array. ,"import numpy as np
nums = np.array([1.2e-7, 1.5e-6, 1.7e-5])
print(""Original arrays:"")
print(nums)
print(""Set the precision value to 10:"")
np.set_printoptions(suppress=True, precision=10)
print(nums)
",True
1546,Write a Pandas program to manipulate and convert date times with timezone information. ,"import pandas as pd
dtt = pd.date_range('2018-01-01', periods=3, freq='H')
dtt = dtt.tz_localize('UTC')
print(dtt)
print(""\nFrom UTC to America/Los_Angeles:"")
dtt = dtt.tz_convert('America/Los_Angeles')
print(dtt)
",True
1547,Write a Python program to print the even numbers from a given list. ,"def is_even_num(l):
    enum = []
    for n in l:
        if n % 2 == 0:
            enum.append(n)
    return enum
print(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))
",True
1548,Write a Pandas program to split the following dataframe into groups based on first column and set other column values into a list of values. ,"import pandas as pd
df = pd.DataFrame( {'X' : [10, 10, 10, 20, 30, 30, 10], 
                    'Y' : [10, 15, 11, 20, 21, 12, 14], 
                    'Z' : [22, 20, 18, 20, 13, 10, 0]})
print(""Original DataFrame:"")
print(df)
result= df.groupby('X').aggregate(lambda tdf: tdf.unique().tolist())
print(result)
",True
1549,Write a Python program to sort one list based on another list containing the desired indexes. ,"def sort_by_indexes(lst, indexes, reverse=False):
  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \
          x[0], reverse=reverse)]

l1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']
l2 = [3, 2, 6, 4, 1, 5]
print(sort_by_indexes(l1, l2))  
print(sort_by_indexes(l1, l2, True))
",True
1550,Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. ,"d=dict()
for x in range(1,16):
    d[x]=x**2
print(d)  
",True
1551,Write a Python program to check if a given value is a method of a user-defined class. Use types.MethodType(),"import types
class C:
    def x():
        return 1
    def y():
        return 1    
        
def b():
    return 2

print(isinstance(C().x, types.MethodType))
print(isinstance(C().y, types.MethodType))
print(isinstance(b, types.MethodType))
print(isinstance(max, types.MethodType))
print(isinstance(abs, types.MethodType))
",True
1552,"Write a Python program to generate and print a list except for the first 5 elements, where the values are square of numbers between 1 and 30 (both included). ","def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l[5:])
printValues()
",True
1553,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees of a specified year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df2 = df.set_index(['hire_date'])
result = df2[""2005""]
result
",True
1554,Write a Python program to rotate a Deque Object specified number (negative) of times. ,"import collections

dq_object = collections.deque()

dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)

dq_object.rotate(-1)
print(""\nDeque after 1 negative rotation:"")
print(dq_object)

dq_object.rotate(-2)
print(""\nDeque after 2 negative rotations:"")
print(dq_object)
",True
1555,"Write a NumPy program to generate inner, outer, and cross products of matrices and vectors. ","import numpy as np
x = np.array([1, 4, 0], float)
y = np.array([2, 2, 1], float)
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Inner product of x and y:"")
print(np.inner(x, y))
print(""Outer product of x and y:"")
print(np.outer(x, y))
print(""Cross product of x and y:"")
print(np.cross(x, y))
",True
1556,Write a NumPy program to create a 1-D array going from 0 to 50 and an array from 10 to 50. ,"import numpy as np
x = np.arange(50)
print(""Array from 0 to 50:"")
print(x)
x = np.arange(10, 50)
print(""Array from 10 to 50:"")
print(x)
",True
1557,Write a Python program to split an iterable and generate iterables specified number of times. ,"import itertools as it
def tee_data(iter, n):
    return it.tee(iter, n)

result = tee_data(['A','B','C','D'], 5)
print(""Generate iterables specified number of times:"")
for i in result:
    print(list(i))


result = tee_data(""Python itertools"", 4)
print(""\nGenerate iterables specified number of times:"")
for i in result:
    print(list(i))
",True
1558,"Write a NumPy program to sort the student id with increasing height of the students from given students id and height. Print
the integer indices that describes the sort order by multiple columns and the sorted data. ","import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
student_height = np.array([40., 42., 45., 41., 38., 40., 42.0])

indices = np.lexsort((student_id, student_height))
print(""Sorted indices:"")
print(indices)
print(""Sorted data:"")
for n in indices:
  print(student_id[n], student_height[n])
",True
1559,Write a Python program to get the smallest number from a list. ,"def smallest_num_in_list( list ):
    min = list[ 0 ]
    for a in list:
        if a < min:
            min = a
    return min
print(smallest_num_in_list([1, 2, -8, 0]))
",True
1560,Write a Python program to sort a list of elements using Cycle sort. ,"
def cycleSort(vector):
    ""Sort a vector in place and return the number of writes.""
    writes = 0
 
    
    for cycleStart, item in enumerate(vector):
 
        
        pos = cycleStart
        for item2 in vector[cycleStart + 1:]:
            if item2 < item:
                pos += 1
 
        
        if pos == cycleStart:
            continue
 
        
        while item == vector[pos]:
            pos += 1
        vector[pos], item = item, vector[pos]
        writes += 1
 
        
        while pos != cycleStart:
 
            
            pos = cycleStart
            for item2 in vector[cycleStart + 1:]:
                if item2 < item:
                    pos += 1
 
            
            while item == vector[pos]:
                pos += 1
            vector[pos], item = item, vector[pos]
            writes += 1
 
    return writes
 
 
if __name__ == '__main__':
    x = [0, 1, 2, 2, 2, 2, 1, 9, 3.5, 5, 8, 4, 7, 0, 6]
    xcopy = x[::]
    writes = cycleSort(xcopy)
    if xcopy != sorted(x):
        print('Wrong order!')
    else:
        print('%r\nIs correctly sorted using cycleSort to'
              '\n%r\nUsing %i writes.' % (x, xcopy, writes))
",True
1561,Write a NumPy program to extract all the elements of the first row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First row"")
print(arra_data[0])
",True
1562,Write a Pandas program to create a histogram to visualize daily return distribution of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
sns.distplot(daily_changes['Adj Close'].dropna(),bins=100,color='purple')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show()
",True
1563,Write a Python program to find tag(s) directly beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nBeneath directly head tag:"")
print(soup.select(""head > title""))
print()
print(""\nBeneath directly p tag:"")
print(soup.select(""p > a"")) 
",True
1564,"Write a Python program generate permutations of specified elements, drawn from specified values. ","from itertools import product 

def permutations_colors(inp, n):
    for x in product(inp, repeat=n):
        c = ''.join(x)
        print(c,end=', ')

str1 = ""Red""
print(""Original String: "",str1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(str1,n)
n=2
print(""\nn = 2"")
permutations_colors(str1,n)
n=3
print(""\nn = 3"")
permutations_colors(str1,n)

lst1 = [""Red"",""Green"",""Black""]
print(""\n\nOriginal list: "",lst1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(lst1,n)
n=2
print(""\nn = 2"")
permutations_colors(lst1,n)
n=3
print(""\nn = 3"")
permutations_colors(lst1,n)
",True
1565,Write a Python program to remove all elements from a given list present in another list using lambda. ,"def index_on_inner_list(list1, list2):
    result = list(filter(lambda x: x not in list2, list1))
    return result
list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]
print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)
print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
",True
1566,Write a NumPy program to shuffle numbers between 0 and 10 (inclusive). ,"import numpy as np
x = np.arange(10)
np.random.shuffle(x)
print(x)
print(""Same result using permutation():"")
print(np.random.permutation(10))
",True
1567,Write a Pandas program to compute difference of differences between consecutive numbers of a given series. ,"import pandas as pd
series1 = pd.Series([1, 3, 5, 8, 10, 11, 15])
print(""Original Series:"")
print(series1)
print(""\nDifference of differences between consecutive numbers of the said series:"")
print(series1.diff().tolist())
print(series1.diff().diff().tolist())
",True
1568,Write a Pandas program to extract the sentences where a specific word is present in a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def pick_only_key_sentence(str1, word):
    result = re.findall(r'([^.]*'+word+'[^.]*)', str1)
    return result
df['filter_sentence']=df['address'].apply(lambda x : pick_only_key_sentence(x,'Avenue'))
print(""\nText with the word 'Avenue':"")
print(df)
",True
1569,"Write a Python program to get the size, permissions, owner, device, created, last modified and last accessed date time of a specified path. ","import os
import sys
import time
path = 'g:\\testpath\\'
print('Path Name ({}):'.format(path))
print('Size:', stat_info.st_size)
print('Permissions:', oct(stat_info.st_mode))
print('Owner:', stat_info.st_uid)
print('Device:', stat_info.st_dev)
print('Created     :', time.ctime(stat_info.st_ctime))
print('Last modified:', time.ctime(stat_info.st_mtime))
print('Last accessed:', time.ctime(stat_info.st_atime))
",True
1570,Write a NumPy program to test whether any array element along a given axis evaluates to True.,"import numpy as np
print(np.any([[False,False],[False,False]]))
print(np.any([[True,True],[True,True]]))
print(np.any([10, 20, 0, -50]))
print(np.any([10, 20, -50]))
",True
1571,Write a NumPy program to convert 1-D arrays as columns into a 2-D array. ,"import numpy as np
a = np.array((10,20,30))
b = np.array((40,50,60))
c = np.column_stack((a, b))
print(c)
",True
1572,Write a NumPy program to convert a NumPy array into a csv file. ,"import numpy
data = numpy.asarray([ [10,20,30], [40,50,60], [70,80,90] ])
numpy.savetxt(""test.csv"", data, delimiter="","")
",True
1573,Write a Python function to insert a string in the middle of a string. ,"def insert_sting_middle(str, word):
	return str[:2] + word + str[2:]

print(insert_sting_middle('[[]]', 'Python'))
print(insert_sting_middle('{{}}', 'PHP'))
print(insert_sting_middle('<<>>', 'HTML'))
",True
1574,"Write a Python program to calculate the average of a given list, after mapping each element to a value using the provided function. ","def average_by(lst, fn = lambda x: x):
  return sum(map(fn, lst), 0.0) / len(lst)

print(average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))
print(average_by([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))
",True
1575,"Write a Pandas program to create a line plot of the opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df2 = df.loc[new_df]
plt.figure(figsize=(10,10))
df2.plot(x='Date', y=['Open', 'Close']);
plt.suptitle('Opening/Closing stock prices of Alphabet Inc.,\n 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""$ price"", fontsize=12, color='black')
plt.show()

",True
1576,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find all records that include two specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""].isin([102976,103380])].head()
",True
1577,Write a Python function that takes a number as a parameter and check the number is prime or not. ,"def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True             
print(test_prime(9))
",True
1578,Write a Python program to print a dictionary in table format. ,"my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}
for row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):
    print(*row)
",True
1579,"Write a Python code to send a request to a web page, and print the information of headers. Also parse these values and print key-value pairs holding various information. ","import requests
r = requests.get('https://api.github.com/')
response = r.headers
print(""Headers information of the said response:"")
print(response)
print(""\nVarious Key-value pairs information of the said resource and request:"")

print(""Date: "",r.headers['date'])
print(""server: "",r.headers['server'])
print(""status: "",r.headers['status'])
print(""cache-control: "",r.headers['cache-control'])
print(""vary: "",r.headers['vary'])
print(""x-github-media-type: "",r.headers['x-github-media-type'])
print(""access-control-expose-headers: "",r.headers['access-control-expose-headers'])
print(""strict-transport-security: "",r.headers['strict-transport-security'])
print(""x-content-type-options: "",r.headers['x-content-type-options'])
print(""x-xss-protection: "",r.headers['x-xss-protection'])
print(""referrer-policy: "",r.headers['referrer-policy'])
print(""content-security-policy: "",r.headers['content-security-policy'])
print(""content-encoding: "",r.headers['content-encoding'])
print(""X-Ratelimit-Remaining: "",r.headers['X-Ratelimit-Remaining'])
print(""X-Ratelimit-Reset: "",r.headers['X-Ratelimit-Reset'])
print(""X-Ratelimit-Used: "",r.headers['X-Ratelimit-Used'])
print(""Accept-Ranges:"",r.headers['Accept-Ranges'])
print(""X-GitHub-Request-Id:"",r.headers['X-GitHub-Request-Id'])
",True
1580,Write a NumPy program to test whether specified values are present in an array. ,"import numpy as np
x = np.array([[1.12, 2.0, 3.45], [2.33, 5.12, 6.0]], float) 
print(""Original array:"")
print(x)
print(2 in x)
print(0 in x)
print(6 in x)
print(2.3 in x)
print(5.12 in x)
",True
1581,Write a Python program to define a string containing special characters in various forms. ,"print()
print(""\#{'}${\""}@/"")
print(""\#{'}${""'""'""}@/"")
print(r""""""\#{'}${""}@/"""""")
print('\#{\'}${""}@/')
print('\#{'""'""'}${""}@/')
print(r'''\#{'}${""}@/''')
print()
",True
1582,Write a Python program to create a list taking alternate elements from a given list. ,"def alternate_elements(list_data):
    result=[]
    for item in list_data[::2]:
        result.append(item)
    return result 
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
print(""List with alternate elements from the said list:"")
print(alternate_elements(colors))
nums = [2,0,3,4,0,2,8,3,4,2]
print(""\nOriginal list:"")
print(nums)
print(""List with alternate elements from the said list:"")
print(alternate_elements(nums))
",True
1583,Write a Python program to convert a given list of tuples to a list of strings. ,"def tuples_to_list_str(lst):
    result = [(""%s ""*len(el)%el).strip() for el in lst]
    return result   
colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(colors))
names = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(names))
",True
1584,"Write a Python program to make two given strings (lower case, may or may not be of the same length) anagrams removing any characters from any of the strings. ","def make_map(s):
    temp_map = {}
    for char in s:
        if char not in temp_map:
            temp_map[char] = 1
        else:
            temp_map[char] +=1 
    return temp_map        
def make_anagram(str1, str2):
    str1_map1 = make_map(str1)
    str2_map2 = make_map(str2)
 
    ctr = 0
    for key in str2_map2.keys():
        if key not in str1_map1:
            ctr += str2_map2[key]
        else:
            ctr += max(0, str2_map2[key]-str1_map1[key])
 
    for key in str1_map1.keys():
        if key not in str2_map2:
            ctr += str1_map1[key]
        else:
            ctr += max(0, str1_map1[key]-str2_map2[key]) 
    return ctr 
str1 = input(""Input string1: "")
str2 = input(""Input string2: "")
print(make_anagram(str1, str2))
",True
1585,Write a Python program to convert JSON encoded data into Python objects. ,"import json

jobj_dict =  '{""name"": ""David"", ""age"": 6, ""class"": ""I""}'
jobj_list =   '[""Red"", ""Green"", ""Black""]'
jobj_string = '""Python Json""'
jobj_int = '1234'
jobj_float =  '21.34'
python_dict =  json.loads(jobj_dict)
python_list = json.loads(jobj_list)
python_str =  json.loads(jobj_string)
python_int =   json.loads(jobj_int)
python_float = json.loads(jobj_float)

print(""Python dictionary: "", python_dict)
print(""Python list: "", python_list)
print(""Python string: "", python_str)
print(""Python integer: "", python_int)
print(""Python float: "", python_float)
",True
1586,Write a Python program to extract all the URLs from the webpage python.org that are nested within <li> tags from . ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')

urls = []
for h in soup.find_all('li'):
    a = h.find('a')
    urls.append(a.attrs['href'])
print(urls)

",True
1587,Write a Python program for counting sort. ,"def counting_sort(array1, max_val):
    m = max_val + 1
    count = [0] * m                
    
    for a in array1:
    
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            array1[i] = a
            i += 1
    return array1

print(counting_sort( [1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7 ))
",True
1588,Write a NumPy program to create a NumPy array of 10 integers from a generator. ,"import numpy as np
iterable = (x for x in range(10))
print(np.fromiter(iterable, np.int))
",True
1589,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
",True
1590,Write a Python program to get the frequency of the elements in a given list of lists. Use collections module. ,"from collections import Counter
from itertools import chain
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
result = Counter(chain.from_iterable(nums))
print(result)
",True
1591,Write a Python program to concatenate N strings. ,"list_of_colors = ['Red', 'White', 'Black']  
colors = '-'.join(list_of_colors)
print()
print(""All Colors: ""+colors)
print()
",True
1592,Write a Python program to calculate the harmonic sum of n-1. ,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))
    
print(harmonic_sum(7))
print(harmonic_sum(4))
",True
1593,Write a Python program to create a given flat list of all the keys in a flat dictionary. ,"def keys_only(students):
  return list(students.keys()) 
students = {
  'Laura': 10,
  'Spencer': 11,
  'Bridget': 9,
  'Howard ': 10,
}
print(""Original directory elements:"")
print(students)
print(""\nFlat list of all the keys of the said dictionary:"")
print(keys_only(students))
",True
1594,"Write a NumPy program to create an array of (3, 4) shape and convert the array elements in smaller chunks. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
print(""Above array in small chuncks:"")
for a in np.nditer(x, flags=['external_loop'], order='F'):
    print(a)
",True
1595,Write a Python program to test whether a given path exists or not. If the path exist find the filename and directory portion of the said path. ,"import os
print(""Test a path exists or not:"")
path = r'g:\\testpath\\a.txt'
print(os.path.exists(path))
path = r'g:\\testpath\\p.txt'
print(os.path.exists(path))
print(""\nFile name of the path:"")
print(os.path.basename(path))
print(""\nDir name of the path:"")
print(os.path.dirname(path))
",True
1596,Write a Python program to retrieve the current working directory and change the dir (moving up one). ,"import os
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
",True
1597,Write a Pandas program to create a time series using three months frequency. ,"import pandas as pd
time_series = pd.date_range('1/1/2021', periods = 36, freq='3M')
print(""Time series using three months frequency:"")
print(time_series) 
",True
1598,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs the hours of the day. ,"import pandas as pd

df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
hour_v_year = df.pivot_table(columns=df['Date_time'].dt.hour,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
hour_v_year.columns = hour_v_year.columns.astype(int)
hour_v_year.columns = hour_v_year.columns.astype(str) + "":00""
hour_v_year.index = hour_v_year.index.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs the hours of the day:"")
print(hour_v_year.head(10))
",True
1599,Write a NumPy program to create a 3X4 array using and iterate over it. ,"import numpy as np
a = np.arange(10,22).reshape((3, 4))
print(""Original array:"")
print(a)
print(""Each element of the array is:"")
for x in np.nditer(a):
  print(x,end="" "")
",True
1600,Write a NumPy program to calculate average values of two given NumPy arrays. ,"import numpy as np
array1 = [[0, 1], [2, 3]]
array2 = [[4, 5], [0, 3]]
print(""Original arrays:"")
print(array1)
print(array2)
print(""Average values of two said numpy arrays:"")
result = (np.array(array1) + np.array(array2)) / 2
print(result)
",True
1601,Write a NumPy program to search the index of a given array in another given array. ,"import numpy as np
np_array = np.array([[1,2,3], [4,5,6] , [7,8,9], [10, 11, 12]])
test_array = np.array([4,5,6])
print(""Original Numpy array:"")
print(np_array)
print(""Searched array:"")
print(test_array)
print(""Index of the searched array in the original array:"")
print(np.where((np_array == test_array).all(1))[0])
",True
1602,Write a Python program to get the frequency of the elements in a given list of lists. ,"def count_elements_lists(nums):
    nums = [item for sublist in nums for item in sublist]
    dic_data = {}
    for num in nums:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
       ]    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
print(count_elements_lists(nums))
",True
1603,Write a Python program to perform Counter arithmetic and set operations for aggregating results. ,"import collections
c1 = collections.Counter([1, 2, 3, 4, 5])
c2 = collections.Counter([4, 5, 6, 7, 8])
print('C1:', c1)
print('C2:', c2)
print('\nCombined counts:')
print(c1 + c2)
print('\nSubtraction:')
print(c1 - c2)
print('\nIntersection (taking positive minimums):')
print(c1 & c2)
print('\nUnion (taking maximums):')
print(c1 | c2)
",True
1604,Write a Python program to create group of similar items of a given list. ,"import itertools as it 

def group_similar_items(seq):
    result =  [list(el) for _, el in it.groupby(seq, lambda x: x.split('_')[0])]
    return result 

colors = ['red_1', 'red_2', 'green_1', 'green_2', 'green_3', 'orange_1', 'orange_2']
print(""Original list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))

colors = ['red_1', 'green-1', 'green_2', 'green_3', 'orange-1', 'orange_2']
print(""\nOriginal list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))
",True
1605,Write a Python program to count and display the vowels of a given text. ,"def vowel(text):
    vowels = ""aeiuoAEIOU""
    print(len([letter for letter in text if letter in vowels]))
    print([letter for letter in text if letter in vowels])
vowel('w3resource');
",True
1606,Write a Python program to calculate surface volume and area of a cylinder. ,"pi=22/7
height = float(input('Height of cylinder: '))
radian = float(input('Radius of cylinder: '))
volume = pi * radian * radian * height
sur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)
print(""Volume is: "", volume)
print(""Surface Area is: "", sur_area)
",True
1607,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index = [""Region"",""Manager""], values = [""Sale_amt""],aggfunc=np.sum))
",True
1608,Write a Python program to sort a list of elements using Gnome sort. ,"def  gnome_sort(nums):
    if len(nums) <= 1:
        return nums
        
    i = 1
    
    while i < len(nums):
        if nums[i-1] <= nums[i]:
            i += 1
        else:
            nums[i-1], nums[i] = nums[i], nums[i-1]
            i -= 1
            if (i == 0):
                i = 1
           
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
gnome_sort(nums)
print(nums)
",True
1609,Write a Pandas program to split a given dataframe into groups and list all the keys from the GroupBy object. ,"import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nSplit the data on school_code:"");
gp = df.groupby('school_code')
print(""\nList of all the keys:"")
print(gp.groups.keys())
",True
1610,Write a Pandas program to join the two dataframes using the common column of both dataframes. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='inner')
print(""Merged data (inner join):"")
print(merged_data)
",True
1611,Write a NumPy program to count a given word in each row of a given array of string values. ,"import numpy as np 

str1 = np.array([['Python','NumPy','Exercises'],
                 ['Python','Pandas','Exercises'],
                 ['Python','Machine learning','Python']])
print(""Original array of string values:"") 
print(str1)
print(""\nCount 'Python' row wise in the above array of string values:"")
print(np.char.count(str1, 'Python'))
",True
1612,Write a NumPy program to create an array of 10's with the same shape and type of a given array. ,"import numpy as np
x = np.arange(4, dtype=np.int64)
y = np.full_like(x, 10)
print(y)
",True
1613,Write a NumPy program to find and store non-zero unique rows in an array after comparing each row with other row in a given matrix. ,"import numpy as np
arra = np.array([[ 1,  1,  0],
                 [ 0,  0,  0],
                 [ 0,  2,  3],
                 [ 0,  0,  0],
                 [ 0, -1,  1],
                 [ 0,  0,  0]])

print(""Original array:"")
print(arra)
temp = {(0, 0, 0)}
result = []
for idx, row in enumerate(map(tuple, arra)):
    if row not in temp:
        result.append(idx)
print(""\nNon-zero unique rows:"")
print(arra[result])
",True
1614,Write a Python program to print a list of space-separated elements. ,"num = [1, 2, 3, 4, 5]
print(*num)
",True
1615,Write a Python program to get the top three items in a shop. ,"from heapq import nlargest
from operator import itemgetter
items = {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}
for name, value in nlargest(3, items.items(), key=itemgetter(1)):
    print(name, value)
	",True
1616,Write a Python program to insert an element at a specified position into a given list. ,"def insert_spec_position(x, n_list, pos):
    return n_list[:pos-1]+[x]+n_list[pos-1:]
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
x = 12
result = insert_spec_position(x, n_list, kth_position)
print(""\nAfter inserting an element at kth position in the said list:"")
print(result)
",True
1617,Write a Python program to check if a given function returns True for every element in a list. ,"def every(lst, fn = lambda x: x):
  return all(map(fn, lst))
print(every([4, 2, 3], lambda x: x > 1))
print(every([4, 2, 3], lambda x: x < 1))
print(every([4, 2, 3], lambda x: x == 1))
",True
1618,Write a Pandas program to calculate the frequency counts of each unique value of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.take(list('0123456789'), np.random.randint(10, size=40)))
print(""Original Series:"")
print(num_series)
print(""Frequency of each unique value of the said series."")
result = num_series.value_counts()
print(result)
",True
1619,"Write a NumPy program to sort pairs of first name and last name return their indices. (first by last name, then by first name). ","import numpy as np
first_names =    ('Margery', 'Betsey', 'Shelley', 'Lanell', 'Genesis')
last_names = ('Woolum', 'Battle', 'Plotner', 'Brien', 'Stahl')
x = np.lexsort((first_names, last_names))
print(x)
",True
1620,"Write a Pandas program to split the following datasets into groups on customer id and calculate the number of customers starting with 'C', the list of all products and the difference of maximum purchase amount and minimum purchase amount. ","import pandas as pd
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':['C3001','C3001','D3005','D3001','C3005','D3001','C3005','D3001','D3005','C3001','D3005','D3005'],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
def customer_id_C(x):
    return (x.str[0] == 'C').sum()
result = df.groupby(['salesman_id'])\
  .agg(customer_id_start_C = ('customer_id', customer_id_C),
       customer_id_list = ('customer_id', lambda x: ', '.join(x)),
       purchase_amt_gap   = ('purch_amt', lambda x: x.max()-x.min())
      )
print(""\nNumber of customers  starting with ‘C’, the list of all products and the difference of maximum purchase amount and minimum purchase amount:"")
print(result)
",True
1621,Write a Python program to read a given CSV file as a dictionary. ,"import csv
data = csv.DictReader(open(""departments.csv""))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
",True
1622,Write a Pandas program create a series with a PeriodIndex which represents all the calendar month periods in 2029 and 2031. Also print the values for all periods in 2030. ,"import pandas as pd
import numpy as np
pi = pd.Series(np.random.randn(36), 
               pd.period_range('1/1/2029', 
                               '12/31/2031', freq='M'))
print(""PeriodIndex which represents all the calendar month periods in 2029 and 2030:"")
print(pi)
print(""\nValues for all periods in 2030:"")
print(pi['2030'])
",True
1623,Write a Python program to sort a given list of strings(numbers) numerically using lambda. ,"def sort_numeric_strings(nums_str):
    result = sorted(nums_str, key=lambda el: int(el))
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
",True
1624,Write a Python program to count number of lists in a given list of lists. ,"def count_list(input_list): 
    return len(input_list) 
      
list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]   
print(""Original list:"")
print(list1)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list1))
print(""\nOriginal list:"")
print(list2)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list2))
",True
1625,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
",True
1626,Write a Python program to sort each sublist of strings in a given list of lists. ,"def sort_sublists(input_list):
    result = list(map(sorted, input_list)) 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
",True
1627,"Write a Pandas program to create a Pivot table and find the region wise, item wise unit sold. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"", aggfunc=np.sum))
",True
1628,Write a Python program to group the elements of a list based on the given function and returns the count of elements in each group. ,"from collections import defaultdict
def count_by(lst, fn = lambda x: x):
  count = defaultdict(int)
  for val in map(fn, lst):
    count[val] += 1
  return dict(count)
from math import floor
print(count_by([6.1, 4.2, 6.3], floor)) 
print(count_by(['one', 'two', 'three'], len))
",True
1629,Write a Python program to find tag(s) beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\na tag(s) Beneath body tag:"")
print(soup.select(""body a""))
print(""\nBeneath html head:"")
print(soup.select(""html head title""))
",True
1630,Write a Python program to sort a given mixed list of integers and strings using lambda. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    mixed_list.sort(key=lambda e: (isinstance(e, str), e))
    return mixed_list
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
",True
1631,Write a Python program to decode a run-length encoded given list. ,"def decode(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]
n_list = [[2, 1], 2, 3, [2, 4], 5, 1]
print(""Original encoded list:"") 
print(n_list)
print(""\nDecode a run-length encoded said list:"")
print(decode(n_list))
",True
1632,Write a Pandas program to convert given datetime to timestamp. ,"import pandas as pd
import datetime as dt
import numpy as np
df = pd.DataFrame(index=pd.DatetimeIndex(start=dt.datetime(2019,1,1,0,0,1),
   end=dt.datetime(2019,1,1,10,0,1), freq='H'))\
   .reset_index().rename(columns={'index':'datetime'})
print(""Sample datetime data:"")
print(df.head(10))
df['ts'] = df.datetime.values.astype(np.int64) // 10 ** 9
print(""\nConvert datetime to timestamp:"")
print (df)
",True
1633,"Write a NumPy program to compute the mean, standard deviation, and variance of a given array along the second axis. ","import numpy as np
x = np.arange(6)
print(""\nOriginal array:"")
print(x)
r1 = np.mean(x)
r2 = np.average(x)
assert np.allclose(r1, r2)
print(""\nMean: "", r1)
r1 = np.std(x)
r2 = np.sqrt(np.mean((x - np.mean(x)) ** 2 ))
assert np.allclose(r1, r2)
print(""\nstd: "", 1)
r1= np.var(x)
r2 = np.mean((x - np.mean(x)) ** 2 )
assert np.allclose(r1, r2)
print(""\nvariance: "", r1)
",True
1634,Write a Pandas program to drop the rows where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where at least one element is missing:"")
result = df.dropna()
print(result)
",True
1635,Write a NumPy program to find the position of the index of a specified value greater than existing value in NumPy array. ,"import numpy as np    
n= 4
nums = np.arange(-6, 6)
print(""\nOriginal array:"")
print(nums)
print(""\nPosition of the index:"")
print(np.argmax(nums>n/2))
",True
1636,"Write a Python program to get a list of elements that exist in both lists, after applying the provided function to each list element of both. ","def intersection_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) in _b]
from math import floor
print(intersection_by([2.1, 1.2], [2.3, 3.4], floor))
",True
1637,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
",True
1638,Write a Python program to insert an item in front of a given doubly linked list. ,"class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def insert_start(self, data):        
        if self.head is not None:
            new_node = Node(data, None, None)
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
            self.count += 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\nAppend item in front of the list:"")
items.insert_start(""Perl"")
items.print_foward()
",True
1639,Write a Python program to select the odd items of a list. ,"x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(x[::2])
",True
1640,Write a NumPy program to create an array that represents the rank of each item of a given array. ,"import numpy as numpy
array = numpy.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(array)
argsort_array = array.argsort()
ranks_array = numpy.empty_like(argsort_array)
ranks_array[argsort_array] = numpy.arange(len(array))
print(""\nRank of each item of the said array:"")
print(ranks_array)
",True
1641,Write a Pandas program to split a dataset to group by two columns and count by each row. ,"import pandas as pd
pd.set_option('display.max_rows', None)

orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
print(""\nGroup by two columns and count by each row:"")
result = orders_data.groupby(['salesman_id','customer_id']).size().reset_index().groupby(['salesman_id','customer_id'])[[0]].max()
print(result)
",True
1642,Write a NumPy program to encode all the elements of a given array in cp500 and decode it again. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
encoded_char = np.char.encode(x, 'cp500')
decoded_char = np.char.decode(encoded_char,'cp500')
print(""\nencoded ="", encoded_char)
print(""decoded ="", decoded_char)
",True
1643,"Write a Python program to find the parent's process id, real user ID of the current process and change real user ID. ","import os
print(""Parent’s process id:"",os.getppid())
uid = os.getuid()
print(""\nUser ID of the current process:"", uid)
uid = 1400
os.setuid(uid)
print(""\nUser ID changed"")
print(""User ID of the current process:"", os.getuid())
",True
1644,Write a Python program to valid a IP address. ,"import socket
addr = '127.0.0.2561'
try:
    socket.inet_aton(addr)
    print(""Valid IP"")
except socket.error:
    print(""Invalid IP"")
",True
1645,Write a Python program to split a list every Nth element. ,"C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
def list_slice(S, step):
    return [S[i::step] for i in range(step)]
print(list_slice(C,3))
",True
1646,"Write a Python program to add two given lists of different lengths, start from left , using itertools module. ","from itertools import zip_longest

def elementswise_left_join(l1, l2):
    result = [a + b for a,b in zip_longest(l1, l2, fillvalue=0)][::1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3, nums4))
",True
1647,Write a Python program to write a list to a file. ,"color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
with open('abc.txt', ""w"") as myfile:
        for c in color:
                myfile.write(""%s\n"" % c)

content = open('abc.txt')
print(content.read())
",True
1648,Write a Python program to find the item with maximum occurrences in a given list. ,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result

nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum occurrences of the said list:"")
print(max_occurrences(nums)) 
",True
1649,Write a NumPy program to compute the covariance matrix of two given arrays. ,"import numpy as np
x = np.array([0, 1, 2])
y = np.array([2, 1, 0])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCovariance matrix of the said arrays:\n"",np.cov(x, y))
",True
1650,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and display the last ten rows. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.tail(n=10)
",True
1651,Write a NumPy program to save a NumPy array to a text file. ,"import numpy as np
a = np.arange(1.0, 2.0, 36.2)
np.savetxt('file.out', a, delimiter=',')
",True
1652,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and convert the data to use the hire_date as the index. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.set_index(['hire_date'])
result
",True
1653,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
",True
1654,Write a NumPy program to extract all the rows to compute the student weight from a given array (student information) where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod', 30.21],
 ['02', 'V', 'Artemiy Ellie', 29.32],
 ['03', 'V', 'Baptist Kamal', 31.00],
 ['04', 'V', 'Lavanya Davide', 30.22],
 ['05', 'V', 'Fulton Antwan', 30.21],
 ['06', 'V', 'Euanthe Sandeep', 31.00],
 ['07', 'V', 'Endzela Sanda', 32.00],
 ['08', 'V', 'Victoire Waman', 29.21],
 ['09', 'V', 'Briar Nur', 30.00],
 ['10', 'V', 'Rose Lykos', 32.00]])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
char='D'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
",True
1655,Write a NumPy program to find the memory size of a NumPy array. ,"import numpy as np
n = np.zeros((4,4))
print(""%d bytes"" % (n.size * n.itemsize))
",True
1656,Write a Python program to check whether an instance is complex or not. ,"import json

def encode_complex(object):
    
    if isinstance(object, complex):
        return [object.real, object.imag]
    
    raise TypeError(repr(object) + "" is not JSON serialized"")

complex_obj = json.dumps(2 + 3j, default=encode_complex)
print(complex_obj) 
",True
1657,Write a Python program to print the numbers of a specified list after removing even numbers from it. ,"num = [7,8, 120, 25, 44, 20, 27]
num = [x for x in num if x%2!=0]
print(num)
",True
1658,Write a Python program to insert tags or strings immediately before specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, before inserting the text:"")
soup.b.string.insert_before(tag)
print(soup.b)
",True
1659,Write a Python program to convert an array to an ordinary list with the same items. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
num_list = array_num.tolist()
print(""Convert the said array to an ordinary list with the same items:"")
print(num_list)
",True
1660,Write a Python function to check whether a string is a pangram or not. ,"import string, sys
def ispangram(str1, alphabet=string.ascii_lowercase):
    alphaset = set(alphabet)
    return alphaset <= set(str1.lower())
 
print ( ispangram('The quick brown fox jumps over the lazy dog')) 
",True
1661,Write a Python program to create a new deque with three items and iterate over the deque's elements. ,"from collections import deque
dq = deque('aeiou')
for element in dq:
   print(element)
",True
1662,Write a NumPy program to convert a PIL Image into a NumPy array. ,"import numpy as np
import PIL
img_data = PIL.Image.open('w3resource-logo.png' )
img_arr = np.array(img_data) 
print(img_arr)
",True
1663,Write a Pandas program to create a Timewheel of Hour Vs Year comparison of the top 10 years in which the UFO was sighted. ,"import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.cm as cm

df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
def pie_heatmap(table, cmap='coolwarm_r', vmin=None, vmax=None,inner_r=0.25, pie_args={}):
   n, m = table.shape
   vmin= table.min().min() if vmin is None else vmin
   vmax= table.max().max() if vmax is None else vmax

   centre_circle = plt.Circle((0,0),inner_r,edgecolor='black',facecolor='white',fill=True,linewidth=0.25)
   plt.gcf().gca().add_artist(centre_circle)
   norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)
   cmapper = cm.ScalarMappable(norm=norm, cmap=cmap)

   for i, (row_name, row) in enumerate(table.iterrows()):
       labels = None if i > 0 else table.columns
       wedges = plt.pie([1] * m,radius=inner_r+float(n-i)/n, colors=[cmapper.to_rgba(x) for x in row.values],
           labels=labels, startangle=90, counterclock=False, wedgeprops={'linewidth':-1}, **pie_args)
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
       wedges = plt.pie([1], radius=inner_r+float(n-i-1)/n, colors=['w'], labels=[row_name], startangle=-90, wedgeprops={'linewidth':0})
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
plt.figure(figsize=(8,8))
plt.title(""Timewheel of Hour Vs Year"",y=1.08,fontsize=30)
pie_heatmap(month_vs_year, vmin=-20,vmax=80,inner_r=0.2)
",True
1664,Write a NumPy program to check whether two arrays are equal (element wise) or not. ,"import numpy as np
nums1 = np.array([0.5, 1.5, 0.2])
nums2 = np.array([0.4999999999, 1.500000000, 0.2])
np.set_printoptions(precision=15)
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(nums1 == nums2)
nums1 = np.array([0.5, 1.5, 0.23])
nums2 = np.array([0.4999999999, 1.5000000001, 0.23])
print(""\nOriginal arrays:"")
np.set_printoptions(precision=15)
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(np.equal(nums1, nums2))
",True
1665,"Write a Python program to add two given lists of different lengths, start from right. ","def elementswise_right_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(len(l1), 0, -1):
        if i-f_len < 0:
            break
        else:
            l1[i-1] = l1[i-1] + l2[i-f_len]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums3, nums4))
",True
1666,Write a Python program find the sorted sequence from a set of permutations of a given input. ,"from itertools import permutations
from more_itertools import windowed 
def is_seq_sorted(lst):
  print(lst)  
  return all(
    x <= y
    for x, y in windowed(lst, 2)
  )
def permutation_sort(lst):
  return next(
    permutation_seq
    for permutation_seq in permutations(lst)
    if is_seq_sorted(permutation_seq)
  )
print(""All the sequences:"")
print(""\nSorted sequence: "",permutation_sort([12, 10, 9]))

print(""\n\nAll the sequences:"")
print(""\nSorted sequence: "",permutation_sort([2, 3, 1, 0]))
",True
1667,Write a Pandas program to calculate all the sighting days of the unidentified flying object (ufo) from current date. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
",True
1668,"Write a Python program to add two given lists of different lengths, start from right , using itertools module. ","from itertools import zip_longest

def elementswise_right_join(l1, l2):
    result = [a + b for a,b in zip_longest(reversed(l1), reversed(l2), fillvalue=0)][::-1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums3, nums4))
",True
1669,Write a Pandas program to replace NaNs with median or mean of the specified columns in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)

df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""Using median in purch_amt to replace NaN:"")
df['purch_amt'].fillna(df['purch_amt'].median(), inplace=True)
print(df)
print(""Using mean to replace NaN:"")
df['sale_amt'].fillna(int(df['sale_amt'].mean()), inplace=True)
print(df)
",True
1670,Write a Python program to change the tag's contents and replace with the given string. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>example.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""\nOriginal Markup:"")
print(tag)
print(""\nOriginal Markup with new text:"")
tag.string = ""CSS""
print(tag)
",True
1671,"Write a Python program to get the symmetric difference between two lists, after applying the provided function to each list element of both. ","def symmetric_difference_by(a, b, fn):
  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))
  return [item for item in a if fn(item) not in _b] + [item
          for item in b if fn(item) not in _a]
from math import floor
print(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))
",True
1672,Write a NumPy program to collapse a 3-D array into one dimension array. ,"import numpy as np
x = np.eye(3)
print(""3-D array:"")
print(x)
f = np.ravel(x, order='F')
print(""One dimension array:"")
print(f)
",True
1673,"Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x). ","n=int(input(""Input a number ""))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d) 
",True
1674,Write a Pandas program to find out the records where consumption of beverages per person average >=5 and Beverage Types is Beer from world alcohol consumption dataset. ,"import pandas as pd

w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=5 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 5) & (w_a_con['Beverage Types'] == 'Beer')].head(10))
",True
1675,"Write a Python program to a list of all the h1, h2, h3 tags from the webpage python.org. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""List of all the h1, h2, h3 :"")
for heading in soup.find_all([""h1"", ""h2"", ""h3""]):
    print(heading.name + ' ' + heading.text.strip())

",True
1676,Write a Python program to print a given doubly linked list in reverse order. ,"class Node(object):
    
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def reverse(self):
        current = self.head
        while current:
            temp = current.next
            current.next = current.prev
            current.prev = temp
            current = current.prev
        temp = self.head
        self.head = self.tail
        self.tail = temp

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Reverse list "")
items.reverse()
items.print_foward()
",True
1677,"Write a NumPy program to replace ""PHP"" with ""Python"" in the element of a given array. ","import numpy as np
x = np.array(['PHP Exercises, Practice, Solution'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.replace(x, ""PHP"", ""Python"")
print(""\nNew array:"")
print(r)
",True
1678,Write a Python program to create multiple lists. ,"obj = {}
for i in range(1, 21):
    obj[str(i)] = []
print(obj)
",True
1679,Write a Python program to remove duplicate words from a given list of strings. ,"def unique_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp

text_str = [""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""]
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said list of strings:"")
print(unique_list(text_str))
",True
1680,Write a Python program to split a variable length string into variables. ,"var_list = ['a', 'b', 'c']
x, y, z = (var_list + [None] * 3)[:3]
print(x, y, z)
var_list = [100, 20.25]
x, y = (var_list + [None] * 2)[:2]
print(x, y)
",True
1681,br/>,"row_num = int(input(""Input number of rows: ""))
col_num = int(input(""Input number of columns: ""))
multi_list = [[0 for col in range(col_num)] for row in range(row_num)]

for row in range(row_num):
    for col in range(col_num):
        multi_list[row][col]= row*col

print(multi_list)
",True
1705,How to Build Web scraping bot in Python,"
import time
from selenium import webdriver
from datetime import datetime",True
1708,Write a Python program to Get file id of windows file,"
from os import popen




file = r""C:\Users\Grandmaster\Desktop\testing.py""




output = popen(fr""fsutil file queryfileid {file}"").read()



print(output)",True
1710,Write a Python program to Convert a set into dictionary,"





ini_set = {1, 2, 3, 4, 5}



print (""initial string"", ini_set)
print (type(ini_set))



res = dict.fromkeys(ini_set, 0)



print (""final list"", res)
print (type(res))",True
1725,Plot line graph from NumPy array in Python,"
import numpy as np
import matplotlib.pyplot as plt



x = np.arrange(1, 11)
y = x * x



plt.title(""Line graph"")
plt.xlabel(""X axis"")
plt.ylabel(""Y axis"")
plt.plot(x, y, color =""red"")
plt.show()",True
1775,Write a Python program to convert tuple into list by adding the given string after every element,"





test_tup = (5, 6, 7, 4, 9)



print(""The original tuple is : "", test_tup)



K = ""Gfg""



res = [ele for sub in test_tup for ele in (sub, K)]



print(""Converted Tuple with K : "", res)",True
1777,How to scroll down followers popup in Instagram  in Python,"import selenium
print(selenium.__version__)",True
1779,Write a Python Library for Linked List,"
import collections



linked_lst = collections.deque()



linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)",True
1783,Write a Python program to String till Substring,"





test_string = ""GeeksforGeeks is best for geeks""



spl_word = 'best'



print(""The original string : "" + str(test_string))



print(""The split string : "" + str(spl_word))




res = test_string.partition(spl_word)[0]



print(""String before the substring occurrence : "" + res)",True
1796,Write a Python program to find smallest number in a list,"




list1 = [10, 20, 4, 45, 99]



list1.sort()



print(""Smallest element is:"", *list1[:1])",True
1802,Write a Python dictionary with keys having multiple inputs,"

import random as rn



dict = {}



x, y, z = 10, 20, 30
dict[x, y, z] = x + y - z;



x, y, z = 5, 2, 4
dict[x, y, z] = x + y - z;



print(dict)",True
1842,Write a Python Lambda Functions,"





string ='GeeksforGeeks'



print(lambda string : string)",True
1846,Scrape IMDB movie rating and details using Python,"from bs4 import BeautifulSoup
import requests
import re",True
1850,Convert covariance matrix to correlation matrix using Python,"import numpy as np
import pandas as pd





dataset = pd.read_csv(""iris.csv"")


dataset.head()",True
1855,How to convert a Python datetime.datetime to excel serial date number,"




import datetime




current_datetime = datetime.datetime.now()




print(current_datetime.strftime('%x %X'))",True
1862,Scraping Reddit with Python and BeautifulSoup,"
import requests
from bs4 import BeautifulSoup",True
1929,How to Scrape all PDF files in a Website in Python,"
import requests



from bs4 import BeautifulSoup



import io



from PyPDF2 import PdfFileReader",True
1931,Calculate the Euclidean distance using NumPy in Python,"



import numpy as np




point1 = np.array((1, 2, 3))
point2 = np.array((1, 1, 1))




dist = np.linalg.norm(point1 - point2)



print(dist)",True
1938,Sorting a CSV object by dates in Python,import pandas as pd,True
1953,Write a Python program to Ways to convert array of strings to array of floats,"




import numpy as np



ini_array = np.array([""1.1"", ""1.5"", ""2.7"", ""8.9""])



print (""initial array"", str(ini_array))




res = ini_array.astype(np.float)



print (""final array"", str(res))",True
1976,Write a Python Program to Replace Text in a File,"
s = input(""Enter text to replace the existing contents:"")
f = open(""file.txt"", ""r+"")





f.truncate(0)
f.write(s)
f.close()
print(""Text successfully replaced"")",True
1991,Getting the time since OS startup using Python,"
import os




t = os.popen('uptime -p').read()[:-1]


print(t)",True
1994,Compute the Kronecker product of two multidimension NumPy arrays in Python,"
import numpy



array1 = numpy.array([[1, 2], [3, 4]])
print('Array1:\n', array1)


array2 = numpy.array([[5, 6], [7, 8]])
print('\nArray2:\n', array2)



kroneckerProduct = numpy.kron(array1, array2)
print('\nArray1 ⊗ Array2:')
print(kroneckerProduct)",True
2013,Creating Pandas dataframe using list of lists in Python,"
import pandas as pd



data = [['Geeks', 10], ['for', 15], ['geeks', 20]]



df = pd.DataFrame(data, columns = ['Name', 'Age'])



print(df )",True
2034,Scientific GUI Calculator using Tkinter in Python,"from tkinter import *
import math
import tkinter.messagebox",True
2040,Write a Python program to Convert JSON to string,"import json





a = {""name"" : ""GeeksforGeeks"", ""Topic"" : ""Json to String"", ""Method"": 1}





y = json.dumps(a)


print(y)
print(type(y))",True
2087,How to check horoscope using Python ,"import requests
from bs4 import BeautifulSoup",True
2088,Write a Python program to Adding Tuple to List and vice – versa,"





test_list = [5, 6, 7]



print(""The original list is : "" + str(test_list))



test_tup = (9, 10)




test_list += test_tup



print(""The container after addition : "" + str(test_list))",True
2097,Saving a Networkx graph in GEXF format and visualize using Gephi in Python,"
import networkx as nx



G = nx.path_graph(10)



nx.write_gexf(G, ""geeksforgeeks.gexf"")",True
2105,How to save a NumPy array to a text file in Python,"



import numpy



List = [1, 2, 3, 4, 5]
Array = numpy.array(List)



print('Array:\n', Array)
file = open(""file1.txt"", ""w+"")



content = str(Array)
file.write(content)
file.close()



file = open(""file1.txt"", ""r"")
content = file.read()


print(""\nContent in file1.txt:\n"", content)
file.close()",True
2111,Write a Python program to Possible Substring count from String,"





test_str = ""gekseforgeeks""



print(""The original string is : "" + str(test_str))



arg_str = ""geeks""




res = min(test_str.count(char) // arg_str.count(char) for char in set(arg_str))



print(""Possible substrings count : "" + str(res))",True
2117,Handling missing keys in Python dictionaries,"




d = { 'a' : 1 , 'b' : 2 }



print (""The value associated with 'c' is : "")
print (d['c'])",True
2152,Find a matrix or vector norm using NumPy in Python,"
import numpy as np



vec = np.arange(10)



vec_norm = np.linalg.norm(vec)


print(""Vector norm:"")
print(vec_norm)",True
2160,Write a Python program to Sort String list by K character frequency,"





test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]



print(""The original list is : "" + str(test_list))



K = 'e'



res = sorted(test_list, key = lambda ele: -ele.count(K))



print(""Sorted String : "" + str(res))",True
2186,Write a Python program to Split String on vowels,"


import re



test_str = 'GFGaBste4oCS'



print(""The original string is : "" + str(test_str))





res = re.split('a|e|i|o|u', test_str)



print(""The splitted string : "" + str(res))",True
2187,Write a Python program to Ways to add row/columns in numpy array,"



import numpy as np


ini_array = np.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])



print(""initial_array : "", str(ini_array));



column_to_be_added = np.array([1, 2, 3])



result = np.hstack((ini_array, np.atleast_2d(column_to_be_added).T))



print (""resultant array"", str(result))",True
2200,How to resize Image in Write a Python program to Tkinter,"
from tkinter import *
from PIL import Image, ImageTk",True
2220,Numpy size() function | Python,"




import numpy as np



arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])



print(np.size(arr))",True
2230,How to get the Daily News using Python,"import requests
from bs4 import BeautifulSoup",True
2247,How to Extract Wikipedia Data in Python,"import wikipedia




wikipedia.summary(""Python (programming language)"")",True
2265,Write a Python program to Retain records with N occurrences of K,"





test_list = [(4, 5, 6, 4, 4), (4, 4, 3), (4, 4, 4), (3, 4, 9)]



print(""The original list is : "" + str(test_list))



K = 4



N = 3




res = [ele for ele in test_list if ele.count(K) == N]



print(""Filtered tuples : "" + str(res))",True
2272,How to Convert an image to NumPy array and saveit to CSV file using Python,"
from PIL import Image
import numpy as gfg



img = Image.open('geeksforgeeks.jpg')



imageToMatrice = gfg.asarray(img)



print(imageToMatrice.shape)",True
2278,Write a Python program to Read CSV Columns Into List,"
from pandas import *



data = read_csv(""company_sales_data.csv"")



month = data['month_number'].tolist()
fc = data['facecream'].tolist()
fw = data['facewash'].tolist()
tp = data['toothpaste'].tolist()
sh = data['shampoo'].tolist()



print('Facecream:', fc)
print('Facewash:', fw)
print('Toothpaste:', tp)
print('Shampoo:', sh)",True
2323,Write a Python program to Filter out integers from float numpy array,"




import numpy as np



ini_array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])



print (""initial array : "", str(ini_array))



result = ini_array[ini_array != ini_array.astype(int)]



print (""final array"", result)",True
2358,Write a Python Library for Linked List,"
import collections



linked_lst = collections.deque()



linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)



linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)",True
2378,Retweet Tweet using Selenium in Python,"from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
import time
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import ElementClickInterceptedException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver import ActionChains
import getpass",True
2383,Write a Python program to Replace Different characters in String at Once,"





test_str = 'geeksforgeeks is best'



print(""The original string is : "" + str(test_str))



map_dict = {'e':'1', 'b':'6', 'i':'4'}




res = ''.join(idx if idx not in map_dict else map_dict[idx] for idx in test_str)



print(""The converted string : "" + str(res))",True
2412,Write a Python program to Remove duplicate lists in tuples (Preserving Order),"





test_tup = ([4, 7, 8], [1, 2, 3], [4, 7, 8], [9, 10, 11], [1, 2, 3])



print(""The original tuple is : "" + str(test_tup))




temp = set()
res = [ele for ele in test_tup if not(tuple(ele) in temp or temp.add(tuple(ele)))]



print(""The unique lists tuple is : "" + str(res))",True
2426,Convert Lowercase to Uppercase using the inbuilt function,"
str=input(""Enter the String(Lower case):"")
print(""Upper case String is:"", str.upper())",True
2429,Find the minimum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


min=sys.maxsize
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]<=min:
            min=matrix[i][j]


print(""The Minimum element of the Given 2d array is: "",min)",True
2431,Program to find square root of a number,"
import math
num=int(input(""Enter the Number:""))
print(""Square root of "",num,"" is : "",math.sqrt(num))",True
2436,Python Program to Remove the Characters of Odd Index Values in a String,"def modify(string):  
  final = """"   
  for i in range(len(string)):  
    if i % 2 == 0:  
      final = final + string[i]  
  return final
string=raw_input(""Enter string:"")
print(""Modified string is:"")
print(modify(string))",True
2439,Python Program to Reverse a String Using Recursion,"def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]
a = str(input(""Enter the string to be reversed: ""))
print(reverse(a))",True
2442,Check whether a given matrix is an identity matrix or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        
        if i == j and matrix[i][j] != 1:
            point=1
            break
        
        elif i!=j and matrix[i][j]!=0:
            point=1
            break

if point==1:
    print(""Given Matrix is not an identity matrix."")
else:
    print(""Given Matrix is an identity matrix."")",True
2449,Python Program to Find the Binary Equivalent of a Number without Using Recursion,"n=int(input(""Enter a number: ""))
a=[]
while(n>0):
    dig=n%2
    a.append(dig)
    n=n//2
a.reverse()
print(""Binary Equivalent is: "")
for i in a:
    print(i,end="" "")",True
2451,Python Program to Find the GCD of Two Numbers,"import fractions
a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
print(""The GCD of the two numbers is"",fractions.gcd(a,b))",True
2453,Find the maximum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]


print(""The Maximum element of the Given 2d array is: "",max)",True
2455,Write a program to Display your name and some Message ,"
print(""Sourav Patra"")
print(""Welcome to Python"")
print(""Welcome to our page www.csinfo360.com"")
print(""Programming Practice"")
print(""Thank you!"")
",True
2456,Program to check two matrix are equal or not,"
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))


row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]

print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")",True
2465,Python Program to Count the Number of Vowels Present in a String using Sets,"s=raw_input(""Enter string:"")
count = 0
vowels = set(""aeiou"")
for letter in s:
    if letter in vowels:
        count += 1
print(""Count of the vowels is:"")
print(count)",True
2468,Program to display a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
2478,Python Program to Find the LCM of Two Numbers,"a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
if(a>b):
    min1=a
else:
    min1=b
while(1):
    if(min1%a==0 and min1%b==0):
        print(""LCM is:"",min1)
        break
    min1=min1+1",True
2479,Convert temperature from Fahrenheit to Celsius ,"
fahrenheit=int(input(""Enter degree in fahrenheit: ""))
celsius= (fahrenheit-32)*5/9;
print(""Degree in celsius is"",celsius)",True
2481,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
2482,Python Program to Find the Length of a List Using Recursion,"def length(lst):
    if not lst:
        return 0
    return 1 + length(lst[1::2]) + length(lst[2::2])
a=[1,2,3]
print(""Length of the string is: "")
print(a)",True
2485,Program to check whether a matrix is diagonal or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        
        if i!=j and matrix[i][j]!=0:
            point=1
            break
if point==1:
    print(""Given Matrix is not a diagonal Matrix."")
else:
    print(""Given Matrix is a diagonal Matrix."")",True
2486,Program to check whether a matrix is symmetric or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]



flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")",True
2491,Python Program to Count the Number of Lines in a Text File,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)",True
2496,Python Program to Generate Random Numbers from 1 to 20 and Append Them to the List,"import random
a=[]
n=int(input(""Enter number of elements:""))
for j in range(n):
    a.append(random.randint(1,20))
print('Randomised list is: ',a)",True
2497,Write a program to calculate compound interest,"principle=float(input(""Enter principle:""))
rate=float(input(""Enter rate(%):""))
n=float(input(""Enter n:""))
time=float(input(""Enter time:""))
amount=principle*pow(1+(rate/100.0)/n,n*time)
print(""The compound interest is"",amount)",True
2499,Program to compute the area and perimeter of Rhombus,"

print(""Enter the two Diagonals Value:"")
p=int(input())
q=int(input())
a=int(input(""Enter the length of the side value:""))
area=(p*q)/2.0
perimeter=(4*a)
print(""Area of the Rhombus = "",area)
print(""Perimeter of the Rhombus = "",perimeter)
",True
2506,Find the minimum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


min=sys.maxsize
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]<=min:
            min=matrix[i][j]


print(""The Minimum element of the Given 2d array is: "",min)",True
2509,Program to check whether a matrix is diagonal or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        
        if i!=j and matrix[i][j]!=0:
            point=1
            break
if point==1:
    print(""Given Matrix is not a diagonal Matrix."")
else:
    print(""Given Matrix is a diagonal Matrix."")",True
2514,Program to check whether a matrix is symmetric or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]



flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")",True
2527,Python Program to Find the Total Sum of a Nested List Using Recursion,"def sum1(lst):
    total = 0
    for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
    return total
print( ""Sum is:"",sum1([[1,2],[3,4]]))",True
2536,Python Program to Determine How Many Times a Given Letter Occurs in a String Recursively,"def check(string,ch):
      if not string:
        return 0
      elif string[0]==ch:
            return 1+check(string[1:],ch)
      else:
            return check(string[1:],ch)
string=raw_input(""Enter string:"")
ch=raw_input(""Enter character to check:"")
print(""Count is:"")
print(check(string,ch))",True
2551,Python Program to Determine all Pythagorean Triplets in the Range,"limit=int(input(""Enter upper limit:""))
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1",True
2559,Program to compute the area and perimeter of Hexagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=(3*math.sqrt(3)*math.pow(a,2))/2.0
perimeter=(6*a)
print(""Area of the Hexagon = "",area)
print(""Perimeter of the Hexagon = "",perimeter)
",True
2561,Program to find the sum of an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]


print(""Sum of Upper Triangular Matrix Elements is: "",sum)",True
2573,Program to compute the perimeter of Trapezoid,"

print(""Enter the value of base:"")
a=int(input())
b=int(input())
print(""Enter the value of side:"")
c=int(input())
d=int(input())
perimeter=a+b+c+d
print(""Perimeter of the Trapezoid = "",perimeter)
",True
2578,Subtract Two Numbers Operator without using Minus(-) operator,"
num1=int(input(""Enter first number:""))
num2=int(input(""Enter  second number:""))
sub=num1+(~num2+1)
print(""Subtraction of two number is "",sub)
",True
2581,Python Program to Add a Key-Value Pair to the Dictionary,"key=int(input(""Enter the key (int) to be added:""))
value=int(input(""Enter the value for the key to be added:""))
d={}
d.update({key:value})
print(""Updated dictionary is:"")
print(d)",True
2583,Python Program to Count the Number of Vowels in a String,"string=raw_input(""Enter string:"")
vowels=0
for i in string:
      if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):
            vowels=vowels+1
print(""Number of vowels are:"")
print(vowels)",True
2600,Python Program to Sum All the Items in a Dictionary,"d={'A':100,'B':540,'C':239}
print(""Total sum of values in the dictionary:"")
print(sum(d.values()))",True
2611,Program to display a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
2612,Python Program to Sort a List According to the Length of the Elements,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=input(""Enter element:"")
    a.append(b)
a.sort(key=len)
print(a)",True
2614,Python Program to Check if a Substring is Present in a Given String,"string=raw_input(""Enter string:"")
sub_str=raw_input(""Enter word:"")
if(string.find(sub_str)==-1):
      print(""Substring not found in string!"")
else:
      print(""Substring in string!"")",True
2620,Python Program to Put Even and Odd elements in a List into Two Different Lists,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
even=[]
odd=[]
for j in a:
    if(j%2==0):
        even.append(j)
    else:
        odd.append(j)
print(""The even list"",even)
print(""The odd list"",odd)",True
2621,Program to find the transpose of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]


print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)",True
2627,Program to find the normal and trace of a matrix,"import math

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)


print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)",True
2636,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
2638,"Program to convert Days into years, months and Weeks","days=int(input(""Enter Day:""))

years =(int) (days / 365)
weeks =(int) (days / 7)
months =(int) (days / 30)

print(""Days to Years:"",years)
print(""Days to Weeks:"",weeks)
print(""Days to Months:"",months)",True
2642,Program to check whether a matrix is sparse or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

count_zero=0

for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]==0:
            count_zero+=1


if count_zero>(row_size*col_size)//2:
    print(""Given Matrix is a sparse Matrix."")
else:
    print(""Given Matrix is not a sparse Matrix."")",True
2643,Python Program to Find the Largest Number in a List,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
a.sort()
print(""Largest element is:"",a[n-1])",True
2644,Program to Find the smallest of three numbers,"

print(""Enter 3 numbers:"")
num1=int(input())
num2=int(input())
num3=int(input())
print(""The smallest number is "",min(num1,num2,num3))

",True
2645,"Python Program to Print Numbers in a Range (1,upper) Without Using any Loops","def printno(upper):
    if(upper>0):
        printno(upper-1)
        print(upper)
upper=int(input(""Enter upper limit: ""))
printno(upper)",True
2650,Find the maximum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]


print(""The Maximum element of the Given 2d array is: "",max)",True
2651,Python Program to Calculate the Number of Upper Case Letters and Lower Case Letters in a String,"string=raw_input(""Enter string:"")
count1=0
count2=0
for i in string:
      if(i.islower()):
            count1=count1+1
      elif(i.isupper()):
            count2=count2+1
print(""The number of lowercase characters is:"")
print(count1)
print(""The number of uppercase characters is:"")
print(count2)",True
2661,Program to Find the multiplication of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

sum=0

mul_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        for k in range(row_size):
            sum+=matrix[i][j]*matrix1[i][j]
        mul_matrix[i][j]=sum


print(""Multiplication of the two Matrices is:"")
for m in mul_matrix:
    print(m)",True
2672,Program to Find the sum of a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]


print(""Sum of Lower Triangular Matrix Elements is: "",sum)",True
2679,Program to find the transpose of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]


print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)",True
2684,Python Program to Detect if Two Strings are Anagrams,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
if(sorted(s1)==sorted(s2)):
      print(""The strings are anagrams."")
else:
      print(""The strings aren't anagrams."")",True
2685,Convert Lowercase to Uppercase using the inbuilt function,"
str=input(""Enter the String(Lower case):"")
print(""Upper case String is:"", str.upper())",True
2686,Find the sum of all elements in a 2D Array,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(0,row_size):
    for j in range(0,col_size):
        sum+=matrix[i][j]


print(""Sum of the Given Matrix Elements is: "",sum)",True
2688,Python Program to Accept a Hyphen Separated Sequence of Words as Input and Print the Words in a Hyphen-Separated Sequence after Sorting them Alphabetically,"print(""Enter a hyphen separated sequence of words:"")
lst=[n for n in raw_input().split('-')]  
lst.sort()
print(""Sorted:"")
print('-'.join(lst))",True
2689,Python Program to Calculate the Number of Digits and Letters in a String,"string=raw_input(""Enter string:"")
count1=0
count2=0
for i in string:
      if(i.isdigit()):
            count1=count1+1
      count2=count2+1
print(""The number of digits is:"")
print(count1)
print(""The number of characters is:"")
print(count2)",True
2715,Python Program to Compute the Value of Euler's Number e. Use the Formula: e = 1 + 1/1! + 1/2! + …… 1/n!,"import math
n=int(input(""Enter the number of terms: ""))
sum1=1
for i in range(1,n+1):
    sum1=sum1+(1/math.factorial(i))
print(""The sum of series is"",round(sum1,2))",True
2716,Program to Find the area and perimeter of a circle,"radius=int(input(""Enter the radius of a circle :""))

area=3.14*radius*radius
perimeter=2*3.14*radius

print(""Area ="",area)
print(""Perimeter ="",perimeter)
",True
2717,Python Program to Concatenate Two Dictionaries Into One,"d1={'A':1,'B':2}
d2={'C':3}
d1.update(d2)
print(""Concatenated dictionary is:"")
print(d1)",True
2721,Python Program to Find the Area of a Triangle Given All Three Sides,"import math
a=int(input(""Enter first side: ""))
b=int(input(""Enter second side: ""))
c=int(input(""Enter third side: ""))
s=(a+b+c)/2
area=math.sqrt(s*(s-a)*(s-b)*(s-c))
print(""Area of the triangle is: "",round(area,2))",True
2726,Python Program to Form a Dictionary from an Object of a Class,"class A(object):  
     def __init__(self):  
         self.A=1  
         self.B=2  
obj=A()  
print(obj.__dict__)",True
2733,Program to concatenate two String,"
str=input(""Enter the 1st String:"")
str2=input(""Enter the 2nd String:"")
print(""After concatenate string is:"")
print(str+"" ""+str2)",True
2736,"Enter marks of five subjects and calculate total, average, and percentage","print(""Enter marks of 5 subjects out of 100:"")
sub1=float(input(""Enter sub1 marks:""))
sub2=float(input(""Enter sub2 marks:""))
sub3=float(input(""Enter sub3 marks:""))
sub4=float(input(""Enter sub4 marks:""))
sub5=float(input(""Enter sub5 marks:""))

total_marks=sub1+sub2+sub3+sub4+sub5;
avg=total_marks/5.0;
percentage=total_marks/500*100;

print(""Total Marks:"",total_marks)
print(""Average:"",avg)
print(""Percentage:"",percentage,""%"")",True
2738,"
Write a special comment to indicate a Python source code file is in unicode.
:","


",True
2745,Convert Temperature from degree Celsius to Fahrenheit ,"celsius=float(input(""Enter degree in celsius: ""))
fahrenheit=(celsius*(9/5))+32
print(""Degree in Fahrenheit is"",fahrenheit)",True
2746,Python Program to Remove All Tuples in a List of Tuples with the USN Outside the Given Range,"y=[('a','12CS039'),('b','12CS320'),('c','12CS055'),('d','12CS100')]
low=int(input(""Enter lower roll number (starting with 12CS):""))
up=int(input(""Enter upper roll number (starting with 12CS):""))
l='12CS0'+str(low)
u='12CS'+str(up)
p=[x for x in y if x[1]>l and x[1]<u]
print(p)",True
2747,Program to Calculate the surface area and volume of a Hemisphere,"

import math
r=int(input(""Enter the radius of the Hemisphere:""))
PI=3.14
surface_area=3*PI*math.pow(r,2)
volume=(2.0/3.0)*PI*math.pow(r,3)
print(""Surface Area of the Hemisphere = "",surface_area)
print(""Volume of the Hemisphere = "",volume)
",True
2750,Python Program to Remove the Given Key from a Dictionary,"d = {'a':1,'b':2,'c':3,'d':4}
print(""Initial dictionary"")
print(d)
key=raw_input(""Enter the key to delete(a-d):"")
if key in d: 
    del d[key]
else:
    print(""Key not found!"")
    exit(0)
print(""Updated dictionary"")
print(d)",True
2751,Python Program to Create a Dictionary with Key as First Character and Value as Words Starting with that Character,"test_string=raw_input(""Enter string:"")
l=test_string.split()
d={}
for word in l:
    if(word[0] not in d.keys()):
        d[word[0]]=[]
        d[word[0]].append(word)
    else:
        if(word not in d[word[0]]):
          d[word[0]].append(word)
for k,v in d.items():
        print(k,"":"",v)",True
2757,Python Program to Count the Number of Digits in a Number,"n=int(input(""Enter number:""))
count=0
while(n>0):
    count=count+1
    n=n//10
print(""The number of digits in the number are:"",count)",True
2761,Python Program to Find the Fibonacci Series Using Recursion,"def fibonacci(n):
    if(n <= 1):
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
n = int(input(""Enter number of terms:""))
print(""Fibonacci sequence:"")
for i in range(n):
    print(fibonacci(i))",True
2763,Python Program to Find the Second Largest Number in a List Using Bubble Sort,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j]>a[j+1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp 
print('Second largest number is:',a[n-2])",True
2769,Python Program to Calculate the Number of Words and the Number of Characters Present in a String,"string=raw_input(""Enter string:"")
char=0
word=1
for i in string:
      char=char+1
      if(i==' '):
            word=word+1
print(""Number of words in the string:"")
print(word)
print(""Number of characters in the string:"")
print(char)",True
2770,Program to calculate the area and perimeter of a rectangle,"length=int(input(""Enter length of a rectangle :""))
breadth=int(input(""Enter breadth of a rectangle :""))

area=length*breadth
perimeter=2*(length+breadth)

print(""Area ="",area)
print(""Perimeter ="",perimeter)",True
2771,Python Program to Determine Whether a Given Number is Even or Odd Recursively,"def check(n):
    if (n < 2):
        return (n % 2 == 0)
    return (check(n - 2))
n=int(input(""Enter number:""))
if(check(n)==True):
      print(""Number is even!"")
else:
      print(""Number is odd!"")",True
2772,Python Program to Count the Occurrences of Each Word in a Given String Sentence,"string=raw_input(""Enter string:"")
word=raw_input(""Enter word:"")
a=[]
count=0
a=string.split("" "")
for i in range(0,len(a)):
      if(word==a[i]):
            count=count+1
print(""Count of the word is:"")
print(count)",True
2773,Write a program to calculate simple Interest,"principle=float(input(""Enter a principle:""))
rate=float(input(""Enter a rate:""))
time=float(input(""Enter a time(year):""))

simple_interest=(principle*rate*time)/100;

print(""Simple Interest:"",simple_interest)",True
2775,Python Program to Flatten a List without using Recursion,"a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))",True
2777,Program to find the sum of an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]


print(""Sum of Upper Triangular Matrix Elements is: "",sum)",True
2780,Find the maximum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]


print(""The Maximum element of the Given 2d array is: "",max)",True
2783,Python Program to Form a New String where the First Character and the Last Character have been Exchanged,"def change(string):
      return string[-1:] + string[1:-1] + string[:1]
string=raw_input(""Enter string:"")
print(""Modified string:"")
print(change(string))",True
2786,Program to check whether a matrix is symmetric or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]



flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")",True
2791,Program to check two matrix are equal or not,"
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))


row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]

print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")",True
2795,Python Program to Check If Two Numbers are Amicable Numbers,"x=int(input('Enter number 1: '))
y=int(input('Enter number 2: '))
sum1=0
sum2=0
for i in range(1,x):
    if x%i==0:
        sum1+=i
for j in range(1,y):
    if y%j==0:
        sum2+=j
if(sum1==y and sum2==x):
    print('Amicable!')
else:
    print('Not Amicable!')",True
2797,Program to find the normal and trace of a matrix,"import math

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)


print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)",True
2799,Program to check whether a matrix is sparse or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

count_zero=0

for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]==0:
            count_zero+=1


if count_zero>(row_size*col_size)//2:
    print(""Given Matrix is a sparse Matrix."")
else:
    print(""Given Matrix is not a sparse Matrix."")",True
2803,Python Program to Find the GCD of Two Numbers Using Recursion,"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
GCD=gcd(a,b)
print(""GCD is: "")
print(GCD)",True
2805,Program to find addition of two matrices ,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]


print(""Sum of the two Matrices is:"")
for m in sum_matrix:
    print(m)",True
2809,Python Program to Find the Sum of Elements in a List Recursively,"def sum_arr(arr,size):
   if (size == 0):
     return 0
   else:
     return arr[size-1] + sum_arr(arr,size-1)
n=int(input(""Enter the number of elements for list:""))
a=[]
for i in range(0,n):
    element=int(input(""Enter element:""))
    a.append(element)
print(""The list is:"")
print(a)
print(""Sum of items in list:"")
b=sum_arr(a,n)
print(b)",True
2821,Program to compute the area and perimeter of Heptagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=3.634*pow(a,2)
perimeter=(7*a)
print(""Area of the Heptagon = "",area)
print(""Perimeter of the Heptagon= "",perimeter)
",True
2827,Python Program to Find all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10,"l=int(input(""Enter lower range: ""))
u=int(input(""Enter upper range: ""))
a=[]
a=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]
print(a)",True
2828,Program to convert kilometers into miles and meters,"kilo_meter=int(input(""Enter Kilo Meter: ""))

miles=kilo_meter/1.609;
meter=kilo_meter*1000;

print(""Kilo Meter to Miles:"",miles)
print(""Kilo Meter to Meter:"",meter)",True
2829,Python Program to Find the Product of two Numbers Using Recursion,"def product(a,b):
    if(a<b):
        return product(b,a)
    elif(b!=0):
        return(a+product(a,b-1))
    else:
        return 0
a=int(input(""Enter first number: ""))
b=int(input(""Enter second number: ""))
print(""Product is: "",product(a,b))",True
2832,Program to check whether a matrix is a scalar or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i!=j and matrix[i][j]!=0:
            point=1
            break
        if i==j and matrix[i][j]!=matrix[i][j]:
            point = 1
            break

if point==1:
    print(""Given Matrix is not a Scaler Matrix."")
else:
    print(""Given Matrix is a Scaler Matrix."")",True
2842,Python Program to Append the Contents of One File to Another File,"name1 = input(""Enter file to be read from: "")
name2 = input(""Enter file to be appended to: "")
fin = open(name1, ""r"")
data2 = fin.read()
fin.close()
fout = open(name2, ""a"")
fout.write(data2)
fout.close()",True
2848,Program to find addition of two matrices ,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sum_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sum_matrix[i][j]=matrix[i][j]+matrix1[i][j]


print(""Sum of the two Matrices is:"")
for m in sum_matrix:
    print(m)",True
2850,Python Program that Displays which Letters are in the First String but not in the Second,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)-set(s2))
print(""The letters are:"")
for i in a:
    print(i)",True
2860,Python Program to Print all the Prime Numbers within a Given Range,"r=int(input(""Enter upper limit: ""))
for a in range(2,r+1):
    k=0
    for i in range(2,a//2+1):
        if(a%i==0):
            k=k+1
    if(k<=0):
        print(a)",True
2861,Find the maximum element in the matrix,"import sys

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]


print(""The Maximum element of the Given 2d array is: "",max)",True
2864,Program to check whether a matrix is symmetric or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]



flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")",True
2866,Python Program to Count the Frequency of Words Appearing in a String Using a Dictionary,"test_string=raw_input(""Enter string:"")
l=[]
l=test_string.split()
wordfreq=[l.count(p) for p in l]
print(dict(zip(l,wordfreq)))",True
2867,Program to Find the sum of a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]


print(""Sum of Lower Triangular Matrix Elements is: "",sum)",True
2884, Read a String with spaces,"
str=input(""Enter the String:"")
print(""Your Enter String is:"", str)",True
2888,Write a program to swap three numbers ,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))
num3=int(input(""Enter 3rd number:""))

num1=num1+num2+num3
num2=num1-num2-num3
num3=num1-num2-num3
num1=num1-num2-num3

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)
print(""Number 3: "",num3)",True
2889,Python Program to Check if a Number is a Prime Number,"a=int(input(""Enter number: ""))
k=0
for i in range(2,a//2+1):
    if(a%i==0):
        k=k+1
if(k<=0):
    print(""Number is prime"")
else:
    print(""Number isn't prime"")",True
2896,Count number of the words in a String,"
str1=input(""Enter the String:"")
str2=len(str1.split())
print(""Word present in a string are "",str(str2))",True
2899,Python Program to Calculate the Length of a String Without Using a Library Function,"string=raw_input(""Enter string:"")
count=0
for i in string:
      count=count+1
print(""Length of the string is:"")
print(count)",True
2900,Program to Calculate the surface area and volume of a Cylinder,"
import math
PI=3.14
r=int(input(""Enter the radius of the cylinder:""))
h=int(input(""Enter the height of the cylinder:""))
surface_area=(2*PI*r*h)+(2*PI*math.pow(r,2))
volume=PI*math.pow(r,2)*h
print(""Surface Area of the cylinder = "",surface_area)

print(""Volume of the cylinder = "",volume)",True
2904,Program to swap two numbers using third variable,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))

temp=num1
num1=num2
num2=temp

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)",True
2914,Python Program to find the factorial of a number without recursion,"n=int(input(""Enter number:""))
fact=1
while(n>0):
    fact=fact*n
    n=n-1
print(""Factorial of the number is: "")
print(fact)",True
2916,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
2917,Python Program to Flatten a Nested List using Recursion,"def flatten(S):
    if S == []:
        return S
    if isinstance(S[0], list):
        return flatten(S[0]) + flatten(S[1:])
    return S[:1] + flatten(S[1:])
s=[[1,2],[3,4]]
print(""Flattened list is: "",flatten(s))",True
2929,Program to Find square of a matrix ,"
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


for i in range(0,row_size):
    for j in range(0,col_size):
        matrix[i][j]=pow(matrix[i][j],2)


print(""Square of the Matrix elements are:"")
for m in matrix:
    print(m)",True
2930,Python Program to Count Number of Lowercase Characters in a String,"string=raw_input(""Enter string:"")
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(""The number of lowercase characters is:"")
print(count)",True
2937,Find the sum of all diagonal elements of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

sum=0

for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i==j:
            sum+=matrix[i][j]

print(""Sum of diagonals Element is: "",sum)",True
2938,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
2940,Program to compute the area of Trapezoid,"

print(""Enter the value of base:"")
a=int(input())
b=int(input())
h=int(input(""Enter the value of height:""))
area=((a+b)*h)/2.0
print(""Area of the Trapezoid = "",area)
",True
2948,Program to display a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
2955,Python Program to Find the Sum of the Series: 1 + 1/2 + 1/3 + ….. + 1/N,"n=int(input(""Enter the number of terms: ""))
sum1=0
for i in range(1,n+1):
    sum1=sum1+(1/i)
print(""The sum of series is"",round(sum1,2))",True
2961,Program to display a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
2963,Program to Calculate the surface area and volume of a Cone,"

import math
PI=3.14
r=int(input(""Enter the radius of the cone:""))
h=int(input(""Enter the height of the cone:""))
surface_area=(PI*r)*(r+math.sqrt(math.pow(h,2)+math.pow(r,2)))
volume=PI*math.pow(r,2)*(h/3.0)
print(""Surface Area of the cone= "",surface_area)
print(""Volume of the cone = "",volume)
",True
2964,"
Define a custom exception class which takes a string message as attribute.
:","
class MyError(Exception):

    def __init__(self, msg):
        self.msg = msg

error = MyError(""something wrong"")

",True
2965,Python Program to Replace all Occurrences of ‘a’ with $ in a String,"string=input(""Enter string:"")
string=string.replace('a','$')
string=string.replace('A','$')
print(""Modified string:"")
print(string)",True
2967,Python Program to Remove the Duplicate Items from a List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
b = set()
unique = []
for x in a:
    if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)",True
2983,Program to check two matrix are equal or not,"
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))


row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]

print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")",True
2987,Python Program to Find the Power of a Number Using Recursion,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))",True
2995,Program to check two matrix are equal or not,"
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))


row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]

print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")",True
3003,"Python Program to Generate a Dictionary that Contains Numbers (between 1 and n) in the Form (x,x*x).","n=int(input(""Enter a number:""))
d={x:x*x for x in range(1,n+1)}
print(d)",True
3004,Python Program to Reverse a String without using Recursion,"a=str(input(""Enter a string: ""))
print(""Reverse of the string is: "")
print(a[::-1])",True
3008,Python Program to Read the Contents of a File,"a=str(input(""Enter the name of the file with .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()",True
3015,Python Program to Merge Two Lists and Sort it,"a=[]
c=[]
n1=int(input(""Enter number of elements:""))
for i in range(1,n1+1):
    b=int(input(""Enter element:""))
    a.append(b)
n2=int(input(""Enter number of elements:""))
for i in range(1,n2+1):
    d=int(input(""Enter element:""))
    c.append(d)
new=a+c
new.sort()
print(""Sorted list is:"",new)",True
3017,Python Program to Find All Numbers which are Odd and Palindromes Between a Range of Numbers without using Recursion,"a=[]
l=int(input(""Enter lower limit: ""))
u=int(input(""Enter upper limit: ""))
a=[x for x in range(l,u+1) if x%2!=0 and str(x)==str(x)[::-1]]
print(""The numbers are: "",a)",True
3023,Program to find the transpose of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]


print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)",True
3024,Program to Find the Biggest of three numbers,"
print(""Enter 3 numbers:"")
num1=int(input())
num2=int(input())
num3=int(input())

print(""The biggest number is "",max(num1,num2,num3))

",True
3035,Python Program to Search the Number of Times a Particular Number Occurs in a List,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
k=0
num=int(input(""Enter the number to be counted:""))
for j in a:
    if(j==num):
        k=k+1
print(""Number of times"",num,""appears is"",k)",True
3040,Python Program to Compute a Polynomial Equation given that the Coefficients of the Polynomial are stored in a List,"import math
print(""Enter the coefficients of the form ax^3 + bx^2 + cx + d"")
lst=[]
for i in range(0,4):
    a=int(input(""Enter coefficient:""))
    lst.append(a)
x=int(input(""Enter the value of x:""))
sum1=0
j=3
for i in range(0,3):
    while(j>0):
        sum1=sum1+(lst[i]*math.pow(x,j))
        break
    j=j-1
sum1=sum1+lst[3]
print(""The value of the polynomial is:"",sum1)",True
3042,Convert Uppercase to Lowercase using string function,"
str=input(""Enter the String(Upper case):"")
print(""Lower case String is:"", str.lower())",True
3047,Program to Find the sum of a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]


print(""Sum of Lower Triangular Matrix Elements is: "",sum)",True
3050,Program to Find the multiplication of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

sum=0

mul_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        for k in range(row_size):
            sum+=matrix[i][j]*matrix1[i][j]
        mul_matrix[i][j]=sum


print(""Multiplication of the two Matrices is:"")
for m in mul_matrix:
    print(m)",True
3052,Program to Find Surface area and volume of a sphere,"radius=int(input(""Enter radius of a sphere :""))

surfaceArea=4*3.14*radius*radius
volume=(4/3)*3.14*radius*radius*radius

print(""Surface Area of the sphere ="",surfaceArea)
print(""Volume of the sphere ="",volume)",True
3058,Python Program to Check if a String is a Palindrome or Not,"string=raw_input(""Enter string:"")
if(string==string[::-1]):
      print(""The string is a palindrome"")
else:
      print(""The string isn't a palindrome"")",True
3064,Python Program to Print the Pascal's triangle for n number of rows given by the user,"n=int(input(""Enter number of rows: ""))
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print(""   ""*(n-i),end="" "",sep="" "")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end="" "",sep="" "")
    print()",True
3065,Python Program to Find the Sum of the Digits of the Number Recursively,"l=[]
def sum_digits(b):
    if(b==0):
        return l
    dig=b%10
    l.append(dig)
    sum_digits(b//10)
n=int(input(""Enter a number: ""))
sum_digits(n)
print(sum(l))",True
3068,Python Program to Copy the Contents of One File into Another,"with open(""test.txt"") as f:
    with open(""out.txt"", ""w"") as f1:
        for line in f:
            f1.write(line)",True
3071,Python Program to Find the Sum of the Series: 1 + x^2/2 + x^3/3 + … x^n/n,"n=int(input(""Enter the number of terms:""))
x=int(input(""Enter the value of x:""))
sum1=1
for i in range(2,n+1):
    sum1=sum1+((x**i)/i)
print(""The sum of series is"",round(sum1,2))",True
3072,Program to Calculate the surface area and volume of a Cuboid ,"

l=int(input(""Enter the length of the cuboid:""))
h=int(input(""Enter the height of the cuboid:""))
w=int(input(""Enter the weight of the cuboid:""))
surface_area=2*((l*w)+(l*h)+(h*w))
volume=l*w*h
print(""Surface Area of the cuboid = "",surface_area)
print(""Volume of the cuboid = "",volume)
",True
3076,Python Program that Displays which Letters are in the Two Strings but not in Both,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)^set(s2))
print(""The letters are:"")
for i in a:
    print(i)",True
3078,Python Program to Find the Sum of Sine Series,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine
x=int(input(""Enter the value of x in degrees:""))
n=int(input(""Enter the number of terms:""))
print(round(sin(x,n),2))",True
3079,Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number,"l_range=int(input(""Enter the lower range:""))
u_range=int(input(""Enter the upper range:""))
a=[(x,x**2) for x in range(l_range,u_range+1)]
print(a)",True
3087,Python Program to Find the LCM of Two Numbers Using Recursion,"def lcm(a,b):
    lcm.multiple=lcm.multiple+b
    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple;
    else:
        lcm(a, b)
    return lcm.multiple
lcm.multiple=0
a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
if(a>b):
    LCM=lcm(b,a)
else:
    LCM=lcm(a,b)
print(LCM)",True
3088,Program to read and display a Matrix,"# Get size of matrixrow_size=int(input(""Enter the row Size Of the Matrix:""))col_size=int(input(""Enter the columns Size Of the Matrix:""))matrix=[]# Taking input of the matrixprint(""Enter the Matrix Element:"")for i in range(row_size):    matrix.append([int(j) for j in input().split()])# display the Matrixprint(""Given Matrix is:"")for m in matrix:    print(m)",True
3093,Program to compute the area and perimeter of Pentagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
perimeter=(5*a)
print(""Area of the Pentagon = "",area)

print(""Perimeter of the Pentagon = "",perimeter)
",True
3094,Python Program to Find the Sum of Cosine Series,"import math
def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx
x=int(input(""Enter the value of x in degrees:""))
n=int(input(""Enter the number of terms:""))
print(round(cosine(x,n),2))",True
3096,Find the sum of all elements in a 2D Array,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(0,row_size):
    for j in range(0,col_size):
        sum+=matrix[i][j]


print(""Sum of the Given Matrix Elements is: "",sum)",True
3101,Python Program to Read a List of Words and Return the Length of the Longest One,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=input(""Enter element"" + str(x+1) + "":"")
    a.append(element)
max1=len(a[0])
temp=a[0]
for i in a:
    if(len(i)>max1):
       max1=len(i)
       temp=i
print(""The word with the longest length is:"")
print(temp)",True
3106,Python Program to Map Two Lists into a Dictionary,"keys=[]
values=[]
n=int(input(""Enter number of elements for dictionary:""))
print(""For keys:"")
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    keys.append(element)
print(""For values:"")
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    values.append(element)
d=dict(zip(keys,values))
print(""The dictionary is:"")
print(d)",True
3108,Program to find the sum of an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]


print(""Sum of Upper Triangular Matrix Elements is: "",sum)",True
3110,Python Program to Find the Fibonacci Series without Using Recursion,"a=int(input(""Enter the first number of the series ""))
b=int(input(""Enter the second number of the series ""))
n=int(input(""Enter the number of terms needed ""))
print(a,b,end="" "")
while(n-2):
    c=a+b
    a=b
    b=c
    print(c,end="" "")
    n=n-1",True
3111,Python Program to Read a String from the User and Append it into a File,"fname = input(""Enter file name: "")
file3=open(fname,""a"")
c=input(""Enter string to append: \n"");
file3.write(""\n"")
file3.write(c)
file3.close()
print(""Contents of appended file:"");
file4=open(fname,'r')
line1=file4.readline()
while(line1!=""""):
    print(line1)
    line1=file4.readline()    
file4.close()",True
3114,Python Program to Check Common Letters in Two Input Strings,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)&set(s2))
print(""The common letters are:"")
for i in a:
    print(i)",True
3116,"Program to convert seconds to hour, minute and seconds","
t_sec=int(input(""Enter the total Second:""))
hour=(int)(t_sec/3600)
t_sec=(int)(t_sec%3600)
mint=(int)(t_sec/60)
sec=(int)(t_sec%60)
print(""Hours="",hour,""\nMinutes="",mint,""\nSecond="",sec)",True
3121,Python Program to Print an Inverted Star Pattern,"n=int(input(""Enter number of rows: ""))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')",True
3124,Python Program to Find the Sum of Digits in a Number without Recursion,"l=[]
b=int(input(""Enter a number: ""))
while(b>0):
    dig=b%10
    l.append(dig)
    b=b//10
print(""Sum is:"")
print(sum(l))",True
3127,Python Program to Read the Contents of a File in Reverse Order,"filename=input(""Enter file name: "")
for line in reversed(list(open(filename))):
    print(line.rstrip())",True
3129,Program to check whether a matrix is a scalar or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i!=j and matrix[i][j]!=0:
            point=1
            break
        if i==j and matrix[i][j]!=matrix[i][j]:
            point = 1
            break

if point==1:
    print(""Given Matrix is not a Scaler Matrix."")
else:
    print(""Given Matrix is a Scaler Matrix."")",True
3143,Python Program to Remove the ith Occurrence of the Given Word in a List where Words can Repeat,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=input(""Enter element"" + str(x+1) + "":"")
    a.append(element)
print(a)
c=[]
count=0
b=input(""Enter word to remove: "")
n=int(input(""Enter the occurrence to remove: ""))
for i in a:
    if(i==b):
        count=count+1
        if(count!=n):
            c.append(i)
    else:
        c.append(i)
if(count==0):
    print(""Item not found "")
else: 
    print(""The number of repetitions is: "",count)
    print(""Updated list is: "",c)
    print(""The distinct elements are: "",set(a))",True
3145,Program to Find square of a matrix ,"
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


for i in range(0,row_size):
    for j in range(0,col_size):
        matrix[i][j]=pow(matrix[i][j],2)


print(""Square of the Matrix elements are:"")
for m in matrix:
    print(m)",True
3153,Python Program to Take in Two Strings and Display the Larger String without Using Built-in Functions,"string1=raw_input(""Enter first string:"")
string2=raw_input(""Enter second string:"")
count1=0
count2=0
for i in string1:
      count1=count1+1
for j in string2:
      count2=count2+1
if(count1<count2):
      print(""Larger string is:"")
      print(string2)
elif(count1==count2):
      print(""Both strings are equal."")
else:
      print(""Larger string is:"")
      print(string1)",True
3156,Program to swap two numbers without third variable,"num1=int(input(""Enter 1st number:""))
num2=int(input(""Enter 2nd number:""))

num1=num1+num2
num2=num1-num2
num1=num1-num2

print(""***After swapping***"")
print(""Number 1: "",num1)
print(""Number 2: "",num2)",True
3166,Find the sum of all diagonal elements of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

sum=0

for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i==j:
            sum+=matrix[i][j]

print(""Sum of diagonals Element is: "",sum)",True
3171,Program to find the sum of an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            sum += matrix[i][j]


print(""Sum of Upper Triangular Matrix Elements is: "",sum)",True
3172,"

Please write assert statements to verify that every number in the list [2,4,6,8] is even.


:","
li = [2,4,6,8]
for i in li:
    assert i%2==0


",True
3179,Subtract Two Numbers Operator without using Minus(-) operator,"
num1=int(input(""Enter first number:""))
num2=int(input(""Enter  second number:""))
sub=num1+(~num2+1)
print(""Subtraction of two number is "",sub)
",True
3188,Python Program to Print an Identity Matrix,"n=int(input(""Enter a number: ""))
for i in range(0,n):
    for j in range(0,n):
        if(i==j):
            print(""1"",sep="" "",end="" "")
        else:
            print(""0"",sep="" "",end="" "")
    print()",True
3194,Python Program to Check if a String is a Pangram or Not,"from string import ascii_lowercase as asc_lower
def check(s):
    return set(asc_lower) - set(s.lower()) == set([])
strng=raw_input(""Enter string:"")
if(check(strng)==True):
      print(""The string is a pangram"")
else:
      print(""The string isn't a pangram"")",True
3195,Program to Find area and perimeter of a square,"
side=int(input(""Enter side of a square :""))
area=side*side
perimeter=4*side

print(""Area of the Square="",area)
print(""Perimeter of the square="",perimeter)",True
3197,Python Program to Find the Gravitational Force Acting Between Two Objects,"m1=float(input(""Enter the first mass: ""))
m2=float(input(""Enter the second mass: ""))
r=float(input(""Enter the distance between the centres of the masses: ""))
G=6.673*(10**-11)
f=(G*m1*m2)/(r**2)
print(""Hence, the gravitational force is: "",round(f,2),""N"")",True
3204,Program to Find the sum of a lower triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


sum=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            sum += matrix[i][j]


print(""Sum of Lower Triangular Matrix Elements is: "",sum)",True
3207,Program to calculate speed in km/hr,"
d=float(input(""Enter the Distance in Kms:""))
t=float(input(""Enter the Time in Hrs:""))
speed=d/t
print(""Speed is "",speed,"" (Km/Hr)"")",True
3209,Program to find the normal and trace of a matrix,"import math

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)


print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)",True
3217,Find the length of the string using the inbuilt function,"
str=input(""Enter the String:"")
print(""Your Enter String is:"", len(str))",True
3218,Python Program to Take in a String and Replace Every Blank Space with Hyphen,"string=raw_input(""Enter string:"")
string=string.replace(' ','-')
print(""Modified string:"")
print(string)",True
3219,Python Program to Find the Cumulative Sum of a List where the ith Element is the Sum of the First i+1 Elements From The Original List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
b=[sum(a[0:x+1]) for x in range(0,len(a))]
print(""The original list is: "",a)
print(""The new list is: "",b)",True
3220,Program to enter basic salary and calculate gross salary of an employee,"
basic=float(input(""Enter the basic salary of an employee:""))
da = (float)(15 * basic) / 100.0
hr = (float)(10 * basic) / 100.0
da_on_ta = (float)(3 * basic) / 100.0
gross = basic + da + hr + da_on_ta
print(""Gross salary of an Employee= "",gross)",True
3222,Python Program to Check Whether a String is a Palindrome or not Using Recursion,"def is_palindrome(s):
    if len(s) < 1:
        return True
    else:
        if s[0] == s[-1]:
            return is_palindrome(s[1:-1])
        else:
            return False
a=str(input(""Enter string:""))
if(is_palindrome(a)==True):
    print(""String is a palindrome!"")
else:
    print(""String isn't a palindrome!"")",True
3239,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
3243,Python Program to Remove the nth Index Character from a Non-Empty String,"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last
string=raw_input(""Enter the sring:"")
n=int(input(""Enter the index of the character to remove:""))
print(""Modified string:"")
print(remove(string, n))",True
3248,Python Program to Swap the First and Last Value of a List,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)",True
3257,Program to compute the area and perimeter of Octagon,"

import math
print(""Enter the length of the side:"")
a=int(input())
area=(2*(1+math.sqrt(2))*math.pow(a,2))
perimeter=(8*a)
print(""Area of the Octagon = "",area)
print(""Perimeter of the Octagon = "",perimeter)
",True
3260,Python Program to Form a New String Made of the First 2 and Last 2 characters From a Given String,"string=raw_input(""Enter string:"")
count=0
for i in string:
      count=count+1
new=string[0:2]+string[count-2:count]
print(""Newly formed string is:"")
print(new)",True
3263,Check whether a given matrix is an identity matrix or not,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        
        if i == j and matrix[i][j] != 1:
            point=1
            break
        
        elif i!=j and matrix[i][j]!=0:
            point=1
            break

if point==1:
    print(""Given Matrix is not an identity matrix."")
else:
    print(""Given Matrix is an identity matrix."")",True
3264,Program to print ascii value of a character,"
ch=input(""Enter a character:"")
ascii=ord(ch) 
print(""The ASCII value is"",ascii)",True
3266,Program to Find subtraction of two matrices,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])


sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]


print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)",True
3270,Python Program to Find the Second Largest Number in a List,"a=[]
n=int(input(""Enter number of elements:""))
for i in range(1,n+1):
    b=int(input(""Enter element:""))
    a.append(b)
a.sort()
print(""Second largest element is:"",a[n-2])",True
3272,Program to display an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



print(""Upper Triangular Matrix is:"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
3277,Python Program to Find the Sum of First N Natural Numbers,"n=int(input(""Enter a number: ""))
sum1 = 0
while(n > 0):
    sum1=sum1+n
    n=n-1
print(""The sum of first n natural numbers is"",sum1)",True
3281,Program to find the transpose of a matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])


tran_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(0,row_size):
    for j in range(0,col_size):
        tran_matrix[i][j]=matrix[j][i]


print(""Transpose of the Given Matrix is:"")
for m in tran_matrix:
    print(m)",True
3282,Program to find the normal and trace of a matrix,"import math

row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



trace=0
sum=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if i==j:
            trace += matrix[i][j]
        sum+=matrix[i][j]
normal=math.sqrt(sum)


print(""Normal Of the Matrix is: "",normal)
print(""Trace Of the Matrix is: "",trace)",True
3283,Python Program to Find the Factorial of a Number Using Recursion,"def factorial(n):
    if(n <= 1):
        return 1
    else:
        return(n*factorial(n-1))
n = int(input(""Enter number:""))
print(""Factorial:"")
print(factorial(n))",True
3285,Python Program that Displays which Letters are Present in Both the Strings,"s1=raw_input(""Enter first string:"")
s2=raw_input(""Enter second string:"")
a=list(set(s1)|set(s2))
print(""The letters are:"")
for i in a:
    print(i)",True
3286,Program to display an upper triangular matrix,"
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]

print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])



print(""Upper Triangular Matrix is:"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i>j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()",True
3287,Python Program to Multiply All the Items in a Dictionary,"d={'A':10,'B':10,'C':239}
tot=1
for i in d:    
    tot=tot*d[i]
print(tot)",True
3295,Program to read and display a Matrix,"# Get size of matrixrow_size=int(input(""Enter the row Size Of the Matrix:""))col_size=int(input(""Enter the columns Size Of the Matrix:""))matrix=[]# Taking input of the matrixprint(""Enter the Matrix Element:"")for i in range(row_size):    matrix.append([int(j) for j in input().split()])# display the Matrixprint(""Given Matrix is:"")for m in matrix:    print(m)",True
3296,Python Program to Find if a Number is Prime or Not Prime Using Recursion,"def check(n, div = None):
    if div is None:
        div = n - 1
    while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div-1)
    else:
        print(""Number is prime"")
        return 'True'
n=int(input(""Enter number: ""))
check(n)",True
3297,Find sum multiplication and an average of two numbers,"
num1=int(input(""Enter a number:""))
num2=int(input(""Enter a number:""))

addition=num1+num2
multiplication=num1*num2
average=(num1+num2)/2

print(""Addition ="",addition)
print(""Multiplication ="",multiplication)
print(""Average ="",average)
",True
3300,Python Program to Check if a Given Key Exists in a Dictionary or Not,"d={'A':1,'B':2,'C':3}
key=raw_input(""Enter key to check:"")
if key in d.keys():
      print(""Key is present and value of the key is:"")
      print(d[key])
else:
      print(""Key isn't present!"")",True
3304,"


Please raise a RuntimeError exception.
:","
raise RuntimeError('something wrong')



",True
